// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: entity.proto

package entity

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	pb "github.com/afairon/nautilus/pb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Account entity
type Account struct {
	Id        uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" db:"id"`
	Username  string         `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty" db:"username"`
	Email     string         `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty" db:"email"`
	Password  string         `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty" db:"password"`
	Type      pb.AccountType `protobuf:"varint,5,opt,name=type,proto3,enum=common.AccountType" json:"type,omitempty" db:"type"`
	Verified  bool           `protobuf:"varint,6,opt,name=verified,proto3" json:"verified,omitempty" db:"verified"`
	Active    bool           `protobuf:"varint,7,opt,name=active,proto3" json:"active,omitempty" db:"active"`
	CreatedOn *time.Time     `protobuf:"bytes,8,opt,name=created_on,json=createdOn,proto3,stdtime" json:"created_on,omitempty" db:"created_on"`
	UpdatedOn *time.Time     `protobuf:"bytes,9,opt,name=updated_on,json=updatedOn,proto3,stdtime" json:"updated_on,omitempty" db:"updated_on"`
}

func (m *Account) Reset()      { *m = Account{} }
func (*Account) ProtoMessage() {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf50d946d740d100, []int{0}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Account.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(m, src)
}
func (m *Account) XXX_Size() int {
	return m.Size()
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Account) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Account) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Account) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Account) GetType() pb.AccountType {
	if m != nil {
		return m.Type
	}
	return pb.ADMIN
}

func (m *Account) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *Account) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Account) GetCreatedOn() *time.Time {
	if m != nil {
		return m.CreatedOn
	}
	return nil
}

func (m *Account) GetUpdatedOn() *time.Time {
	if m != nil {
		return m.UpdatedOn
	}
	return nil
}

// Address entity
type Address struct {
	Id            uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" db:"id"`
	AddressLine_1 string     `protobuf:"bytes,2,opt,name=address_line_1,json=addressLine1,proto3" json:"address_line_1,omitempty" db:"address_line_1"`
	AddressLine_2 string     `protobuf:"bytes,3,opt,name=address_line_2,json=addressLine2,proto3" json:"address_line_2,omitempty" db:"address_line_2"`
	City          string     `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty" db:"city"`
	Postcode      string     `protobuf:"bytes,5,opt,name=postcode,proto3" json:"postcode,omitempty" db:"postcode"`
	Region        string     `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty" db:"region"`
	Country       string     `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty" db:"country"`
	CreatedOn     *time.Time `protobuf:"bytes,8,opt,name=created_on,json=createdOn,proto3,stdtime" json:"created_on,omitempty" db:"created_on"`
	UpdatedOn     *time.Time `protobuf:"bytes,9,opt,name=updated_on,json=updatedOn,proto3,stdtime" json:"updated_on,omitempty" db:"updated_on"`
}

func (m *Address) Reset()      { *m = Address{} }
func (*Address) ProtoMessage() {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf50d946d740d100, []int{1}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Address.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return m.Size()
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Address) GetAddressLine_1() string {
	if m != nil {
		return m.AddressLine_1
	}
	return ""
}

func (m *Address) GetAddressLine_2() string {
	if m != nil {
		return m.AddressLine_2
	}
	return ""
}

func (m *Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Address) GetPostcode() string {
	if m != nil {
		return m.Postcode
	}
	return ""
}

func (m *Address) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Address) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Address) GetCreatedOn() *time.Time {
	if m != nil {
		return m.CreatedOn
	}
	return nil
}

func (m *Address) GetUpdatedOn() *time.Time {
	if m != nil {
		return m.UpdatedOn
	}
	return nil
}

// Agency entity
type Agency struct {
	Id        uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" db:"id"`
	Name      string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" db:"name"`
	Phone     string      `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty" db:"phone"`
	AccountId uint64      `protobuf:"varint,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty" db:"account_id"`
	AddressId uint64      `protobuf:"varint,5,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty" db:"address_id"`
	Documents StringArray `protobuf:"bytes,6,opt,name=documents,proto3,customtype=StringArray" json:"documents" db:"documents"`
	CreatedOn *time.Time  `protobuf:"bytes,7,opt,name=created_on,json=createdOn,proto3,stdtime" json:"created_on,omitempty" db:"created_on"`
	UpdatedOn *time.Time  `protobuf:"bytes,8,opt,name=updated_on,json=updatedOn,proto3,stdtime" json:"updated_on,omitempty" db:"updated_on"`
}

func (m *Agency) Reset()      { *m = Agency{} }
func (*Agency) ProtoMessage() {}
func (*Agency) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf50d946d740d100, []int{2}
}
func (m *Agency) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Agency.Unmarshal(m, b)
}
func (m *Agency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Agency.Marshal(b, m, deterministic)
}
func (m *Agency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Agency.Merge(m, src)
}
func (m *Agency) XXX_Size() int {
	return xxx_messageInfo_Agency.Size(m)
}
func (m *Agency) XXX_DiscardUnknown() {
	xxx_messageInfo_Agency.DiscardUnknown(m)
}

var xxx_messageInfo_Agency proto.InternalMessageInfo

func (m *Agency) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Agency) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Agency) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Agency) GetAccountId() uint64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *Agency) GetAddressId() uint64 {
	if m != nil {
		return m.AddressId
	}
	return 0
}

func (m *Agency) GetCreatedOn() *time.Time {
	if m != nil {
		return m.CreatedOn
	}
	return nil
}

func (m *Agency) GetUpdatedOn() *time.Time {
	if m != nil {
		return m.UpdatedOn
	}
	return nil
}

// Diver entity
type Diver struct {
	Id        uint64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" db:"id"`
	FirstName string       `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty" db:"first_name"`
	LastName  string       `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty" db:"last_name"`
	Phone     string       `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty" db:"phone"`
	BirthDate string       `protobuf:"bytes,5,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty" db:"birth_date"`
	Level     pb.LevelType `protobuf:"varint,6,opt,name=level,proto3,enum=common.LevelType" json:"level,omitempty" db:"level"`
	AccountId uint64       `protobuf:"varint,7,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty" db:"account_id"`
	Documents StringArray  `protobuf:"bytes,8,opt,name=documents,proto3,customtype=StringArray" json:"documents" db:"documents"`
	CreatedOn *time.Time   `protobuf:"bytes,9,opt,name=created_on,json=createdOn,proto3,stdtime" json:"created_on,omitempty" db:"created_on"`
	UpdatedOn *time.Time   `protobuf:"bytes,10,opt,name=updated_on,json=updatedOn,proto3,stdtime" json:"updated_on,omitempty" db:"updated_on"`
}

func (m *Diver) Reset()      { *m = Diver{} }
func (*Diver) ProtoMessage() {}
func (*Diver) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf50d946d740d100, []int{3}
}
func (m *Diver) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Diver.Unmarshal(m, b)
}
func (m *Diver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Diver.Marshal(b, m, deterministic)
}
func (m *Diver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Diver.Merge(m, src)
}
func (m *Diver) XXX_Size() int {
	return xxx_messageInfo_Diver.Size(m)
}
func (m *Diver) XXX_DiscardUnknown() {
	xxx_messageInfo_Diver.DiscardUnknown(m)
}

var xxx_messageInfo_Diver proto.InternalMessageInfo

func (m *Diver) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Diver) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Diver) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Diver) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Diver) GetBirthDate() string {
	if m != nil {
		return m.BirthDate
	}
	return ""
}

func (m *Diver) GetLevel() pb.LevelType {
	if m != nil {
		return m.Level
	}
	return pb.INSTRUCTOR
}

func (m *Diver) GetAccountId() uint64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *Diver) GetCreatedOn() *time.Time {
	if m != nil {
		return m.CreatedOn
	}
	return nil
}

func (m *Diver) GetUpdatedOn() *time.Time {
	if m != nil {
		return m.UpdatedOn
	}
	return nil
}

// Staff entity
type Staff struct {
	Id        uint64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" db:"id"`
	FirstName string        `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty" db:"first_name"`
	LastName  string        `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty" db:"last_name"`
	Position  string        `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty" db:"position"`
	Gender    pb.GenderType `protobuf:"varint,5,opt,name=gender,proto3,enum=common.GenderType" json:"gender,omitempty" db:"gender"`
	AgencyId  uint64        `protobuf:"varint,6,opt,name=agency_id,json=agencyId,proto3" json:"agency_id,omitempty" db:"agency_id"`
	CreatedOn *time.Time    `protobuf:"bytes,7,opt,name=created_on,json=createdOn,proto3,stdtime" json:"created_on,omitempty" db:"created_on"`
	UpdatedOn *time.Time    `protobuf:"bytes,8,opt,name=updated_on,json=updatedOn,proto3,stdtime" json:"updated_on,omitempty" db:"updated_on"`
}

func (m *Staff) Reset()      { *m = Staff{} }
func (*Staff) ProtoMessage() {}
func (*Staff) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf50d946d740d100, []int{4}
}
func (m *Staff) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Staff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Staff.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Staff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Staff.Merge(m, src)
}
func (m *Staff) XXX_Size() int {
	return m.Size()
}
func (m *Staff) XXX_DiscardUnknown() {
	xxx_messageInfo_Staff.DiscardUnknown(m)
}

var xxx_messageInfo_Staff proto.InternalMessageInfo

func (m *Staff) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Staff) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Staff) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Staff) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *Staff) GetGender() pb.GenderType {
	if m != nil {
		return m.Gender
	}
	return pb.FEMALE
}

func (m *Staff) GetAgencyId() uint64 {
	if m != nil {
		return m.AgencyId
	}
	return 0
}

func (m *Staff) GetCreatedOn() *time.Time {
	if m != nil {
		return m.CreatedOn
	}
	return nil
}

func (m *Staff) GetUpdatedOn() *time.Time {
	if m != nil {
		return m.UpdatedOn
	}
	return nil
}

// Hotel entity
type Hotel struct {
	Id          uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" db:"id"`
	Name        string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" db:"name"`
	Description string     `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" db:"description"`
	Star        uint32     `protobuf:"varint,4,opt,name=star,proto3" json:"star,omitempty" db:"star"`
	Phone       string     `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty" db:"phone"`
	AgencyId    uint64     `protobuf:"varint,6,opt,name=agency_id,json=agencyId,proto3" json:"agency_id,omitempty" db:"agency_id"`
	AddressId   uint64     `protobuf:"varint,7,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty" db:"address_id"`
	Images      []string   `protobuf:"bytes,8,rep,name=images,proto3" json:"images,omitempty" db:"images"`
	CreatedOn   *time.Time `protobuf:"bytes,9,opt,name=created_on,json=createdOn,proto3,stdtime" json:"created_on,omitempty" db:"created_on"`
	UpdatedOn   *time.Time `protobuf:"bytes,10,opt,name=updated_on,json=updatedOn,proto3,stdtime" json:"updated_on,omitempty" db:"updated_on"`
}

func (m *Hotel) Reset()      { *m = Hotel{} }
func (*Hotel) ProtoMessage() {}
func (*Hotel) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf50d946d740d100, []int{5}
}
func (m *Hotel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hotel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hotel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hotel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hotel.Merge(m, src)
}
func (m *Hotel) XXX_Size() int {
	return m.Size()
}
func (m *Hotel) XXX_DiscardUnknown() {
	xxx_messageInfo_Hotel.DiscardUnknown(m)
}

var xxx_messageInfo_Hotel proto.InternalMessageInfo

func (m *Hotel) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Hotel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Hotel) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Hotel) GetStar() uint32 {
	if m != nil {
		return m.Star
	}
	return 0
}

func (m *Hotel) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Hotel) GetAgencyId() uint64 {
	if m != nil {
		return m.AgencyId
	}
	return 0
}

func (m *Hotel) GetAddressId() uint64 {
	if m != nil {
		return m.AddressId
	}
	return 0
}

func (m *Hotel) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *Hotel) GetCreatedOn() *time.Time {
	if m != nil {
		return m.CreatedOn
	}
	return nil
}

func (m *Hotel) GetUpdatedOn() *time.Time {
	if m != nil {
		return m.UpdatedOn
	}
	return nil
}

// Liveaboard entity
type Liveaboard struct {
	Id          uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" db:"id"`
	Name        string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" db:"name"`
	Description string     `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" db:"description"`
	Length      uint32     `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty" db:"length"`
	Width       uint32     `protobuf:"varint,5,opt,name=width,proto3" json:"width,omitempty" db:"width"`
	AgencyId    uint64     `protobuf:"varint,6,opt,name=agency_id,json=agencyId,proto3" json:"agency_id,omitempty" db:"agency_id"`
	Images      []string   `protobuf:"bytes,7,rep,name=images,proto3" json:"images,omitempty" db:"images"`
	CreatedOn   *time.Time `protobuf:"bytes,8,opt,name=created_on,json=createdOn,proto3,stdtime" json:"created_on,omitempty" db:"created_on"`
	UpdatedOn   *time.Time `protobuf:"bytes,9,opt,name=updated_on,json=updatedOn,proto3,stdtime" json:"updated_on,omitempty" db:"updated_on"`
}

func (m *Liveaboard) Reset()      { *m = Liveaboard{} }
func (*Liveaboard) ProtoMessage() {}
func (*Liveaboard) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf50d946d740d100, []int{6}
}
func (m *Liveaboard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Liveaboard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Liveaboard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Liveaboard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Liveaboard.Merge(m, src)
}
func (m *Liveaboard) XXX_Size() int {
	return m.Size()
}
func (m *Liveaboard) XXX_DiscardUnknown() {
	xxx_messageInfo_Liveaboard.DiscardUnknown(m)
}

var xxx_messageInfo_Liveaboard proto.InternalMessageInfo

func (m *Liveaboard) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Liveaboard) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Liveaboard) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Liveaboard) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *Liveaboard) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Liveaboard) GetAgencyId() uint64 {
	if m != nil {
		return m.AgencyId
	}
	return 0
}

func (m *Liveaboard) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *Liveaboard) GetCreatedOn() *time.Time {
	if m != nil {
		return m.CreatedOn
	}
	return nil
}

func (m *Liveaboard) GetUpdatedOn() *time.Time {
	if m != nil {
		return m.UpdatedOn
	}
	return nil
}

// Amenity entity
type Amenity struct {
	Id          uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" db:"id"`
	Name        string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" db:"name"`
	Description string     `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" db:"description"`
	CreatedOn   *time.Time `protobuf:"bytes,4,opt,name=created_on,json=createdOn,proto3,stdtime" json:"created_on,omitempty" db:"created_on"`
	UpdatedOn   *time.Time `protobuf:"bytes,5,opt,name=updated_on,json=updatedOn,proto3,stdtime" json:"updated_on,omitempty" db:"updated_on"`
}

func (m *Amenity) Reset()      { *m = Amenity{} }
func (*Amenity) ProtoMessage() {}
func (*Amenity) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf50d946d740d100, []int{7}
}
func (m *Amenity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Amenity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Amenity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Amenity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Amenity.Merge(m, src)
}
func (m *Amenity) XXX_Size() int {
	return m.Size()
}
func (m *Amenity) XXX_DiscardUnknown() {
	xxx_messageInfo_Amenity.DiscardUnknown(m)
}

var xxx_messageInfo_Amenity proto.InternalMessageInfo

func (m *Amenity) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Amenity) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Amenity) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Amenity) GetCreatedOn() *time.Time {
	if m != nil {
		return m.CreatedOn
	}
	return nil
}

func (m *Amenity) GetUpdatedOn() *time.Time {
	if m != nil {
		return m.UpdatedOn
	}
	return nil
}

// RoomType entity
type RoomType struct {
	Id           uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" db:"id"`
	Name         string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" db:"name"`
	Description  string     `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" db:"description"`
	MaxGuest     uint32     `protobuf:"varint,4,opt,name=max_guest,json=maxGuest,proto3" json:"max_guest,omitempty" db:"max_guest"`
	Price        float32    `protobuf:"fixed32,5,opt,name=price,proto3" json:"price,omitempty" db:"price"`
	Quantity     uint32     `protobuf:"varint,6,opt,name=quantity,proto3" json:"quantity,omitempty" db:"quantity"`
	HotelId      uint64     `protobuf:"varint,7,opt,name=hotel_id,json=hotelId,proto3" json:"hotel_id,omitempty" db:"hotel_id"`
	LiveaboardId uint64     `protobuf:"varint,8,opt,name=liveaboard_id,json=liveaboardId,proto3" json:"liveaboard_id,omitempty" db:"liveaboard_id"`
	Images       []string   `protobuf:"bytes,9,rep,name=images,proto3" json:"images,omitempty" db:"images"`
	CreatedOn    *time.Time `protobuf:"bytes,10,opt,name=created_on,json=createdOn,proto3,stdtime" json:"created_on,omitempty" db:"created_on"`
	UpdatedOn    *time.Time `protobuf:"bytes,11,opt,name=updated_on,json=updatedOn,proto3,stdtime" json:"updated_on,omitempty" db:"updated_on"`
}

func (m *RoomType) Reset()      { *m = RoomType{} }
func (*RoomType) ProtoMessage() {}
func (*RoomType) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf50d946d740d100, []int{8}
}
func (m *RoomType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoomType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomType.Merge(m, src)
}
func (m *RoomType) XXX_Size() int {
	return m.Size()
}
func (m *RoomType) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomType.DiscardUnknown(m)
}

var xxx_messageInfo_RoomType proto.InternalMessageInfo

func (m *RoomType) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RoomType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RoomType) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RoomType) GetMaxGuest() uint32 {
	if m != nil {
		return m.MaxGuest
	}
	return 0
}

func (m *RoomType) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *RoomType) GetQuantity() uint32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *RoomType) GetHotelId() uint64 {
	if m != nil {
		return m.HotelId
	}
	return 0
}

func (m *RoomType) GetLiveaboardId() uint64 {
	if m != nil {
		return m.LiveaboardId
	}
	return 0
}

func (m *RoomType) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *RoomType) GetCreatedOn() *time.Time {
	if m != nil {
		return m.CreatedOn
	}
	return nil
}

func (m *RoomType) GetUpdatedOn() *time.Time {
	if m != nil {
		return m.UpdatedOn
	}
	return nil
}

// RoomAmenity entity
type RoomAmenity struct {
	Id         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" db:"id"`
	RoomTypeId uint64 `protobuf:"varint,2,opt,name=room_type_id,json=roomTypeId,proto3" json:"room_type_id,omitempty" db:"room_type_id"`
	AmenityId  uint64 `protobuf:"varint,3,opt,name=amenity_id,json=amenityId,proto3" json:"amenity_id,omitempty" db:"amenity_id"`
}

func (m *RoomAmenity) Reset()      { *m = RoomAmenity{} }
func (*RoomAmenity) ProtoMessage() {}
func (*RoomAmenity) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf50d946d740d100, []int{9}
}
func (m *RoomAmenity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAmenity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAmenity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoomAmenity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAmenity.Merge(m, src)
}
func (m *RoomAmenity) XXX_Size() int {
	return m.Size()
}
func (m *RoomAmenity) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAmenity.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAmenity proto.InternalMessageInfo

func (m *RoomAmenity) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RoomAmenity) GetRoomTypeId() uint64 {
	if m != nil {
		return m.RoomTypeId
	}
	return 0
}

func (m *RoomAmenity) GetAmenityId() uint64 {
	if m != nil {
		return m.AmenityId
	}
	return 0
}

// Boat entity
type Boat struct {
	Id        uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" db:"id"`
	Name      string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" db:"name"`
	AgencyId  uint64     `protobuf:"varint,3,opt,name=agency_id,json=agencyId,proto3" json:"agency_id,omitempty" db:"agency_id"`
	Images    []string   `protobuf:"bytes,4,rep,name=images,proto3" json:"images,omitempty" db:"images"`
	CreatedOn *time.Time `protobuf:"bytes,5,opt,name=created_on,json=createdOn,proto3,stdtime" json:"created_on,omitempty" db:"created_on"`
	UpdatedOn *time.Time `protobuf:"bytes,6,opt,name=updated_on,json=updatedOn,proto3,stdtime" json:"updated_on,omitempty" db:"updated_on"`
}

func (m *Boat) Reset()      { *m = Boat{} }
func (*Boat) ProtoMessage() {}
func (*Boat) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf50d946d740d100, []int{10}
}
func (m *Boat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Boat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Boat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Boat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Boat.Merge(m, src)
}
func (m *Boat) XXX_Size() int {
	return m.Size()
}
func (m *Boat) XXX_DiscardUnknown() {
	xxx_messageInfo_Boat.DiscardUnknown(m)
}

var xxx_messageInfo_Boat proto.InternalMessageInfo

func (m *Boat) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Boat) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Boat) GetAgencyId() uint64 {
	if m != nil {
		return m.AgencyId
	}
	return 0
}

func (m *Boat) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *Boat) GetCreatedOn() *time.Time {
	if m != nil {
		return m.CreatedOn
	}
	return nil
}

func (m *Boat) GetUpdatedOn() *time.Time {
	if m != nil {
		return m.UpdatedOn
	}
	return nil
}

// TripTemplate entity
type TripTemplate struct {
	Id           uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" db:"id"`
	Name         string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" db:"name"`
	Description  string      `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" db:"description"`
	Type         pb.TripType `protobuf:"varint,4,opt,name=type,proto3,enum=common.TripType" json:"type,omitempty" db:"type"`
	AgencyId     uint64      `protobuf:"varint,5,opt,name=agency_id,json=agencyId,proto3" json:"agency_id,omitempty" db:"agency_id"`
	HotelId      uint64      `protobuf:"varint,6,opt,name=hotel_id,json=hotelId,proto3" json:"hotel_id,omitempty" db:"hotel_id"`
	BoatId       uint64      `protobuf:"varint,7,opt,name=boat_id,json=boatId,proto3" json:"boat_id,omitempty" db:"boat_id"`
	LiveaboardId uint64      `protobuf:"varint,8,opt,name=liveaboard_id,json=liveaboardId,proto3" json:"liveaboard_id,omitempty" db:"liveaboard_id"`
	Images       []string    `protobuf:"bytes,9,rep,name=images,proto3" json:"images,omitempty" db:"images"`
	CreatedOn    *time.Time  `protobuf:"bytes,10,opt,name=created_on,json=createdOn,proto3,stdtime" json:"created_on,omitempty" db:"created_on"`
	UpdatedOn    *time.Time  `protobuf:"bytes,11,opt,name=updated_on,json=updatedOn,proto3,stdtime" json:"updated_on,omitempty" db:"updated_on"`
}

func (m *TripTemplate) Reset()      { *m = TripTemplate{} }
func (*TripTemplate) ProtoMessage() {}
func (*TripTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf50d946d740d100, []int{11}
}
func (m *TripTemplate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TripTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TripTemplate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TripTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TripTemplate.Merge(m, src)
}
func (m *TripTemplate) XXX_Size() int {
	return m.Size()
}
func (m *TripTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_TripTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_TripTemplate proto.InternalMessageInfo

func (m *TripTemplate) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TripTemplate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TripTemplate) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TripTemplate) GetType() pb.TripType {
	if m != nil {
		return m.Type
	}
	return pb.ONSHORE
}

func (m *TripTemplate) GetAgencyId() uint64 {
	if m != nil {
		return m.AgencyId
	}
	return 0
}

func (m *TripTemplate) GetHotelId() uint64 {
	if m != nil {
		return m.HotelId
	}
	return 0
}

func (m *TripTemplate) GetBoatId() uint64 {
	if m != nil {
		return m.BoatId
	}
	return 0
}

func (m *TripTemplate) GetLiveaboardId() uint64 {
	if m != nil {
		return m.LiveaboardId
	}
	return 0
}

func (m *TripTemplate) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *TripTemplate) GetCreatedOn() *time.Time {
	if m != nil {
		return m.CreatedOn
	}
	return nil
}

func (m *TripTemplate) GetUpdatedOn() *time.Time {
	if m != nil {
		return m.UpdatedOn
	}
	return nil
}

// Trip entity
type Trip struct {
	Id         uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" db:"id"`
	TemplateId uint64     `protobuf:"varint,2,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty" db:"template_id"`
	AgencyId   uint64     `protobuf:"varint,3,opt,name=agency_id,json=agencyId,proto3" json:"agency_id,omitempty" db:"agency_id"`
	MaxGuest   uint32     `protobuf:"varint,4,opt,name=max_guest,json=maxGuest,proto3" json:"max_guest,omitempty" db:"max_guest"`
	Price      float32    `protobuf:"fixed32,5,opt,name=price,proto3" json:"price,omitempty" db:"price"`
	FromDate   *time.Time `protobuf:"bytes,6,opt,name=from_date,json=fromDate,proto3,stdtime" json:"from_date,omitempty" db:"from_date"`
	ToDate     *time.Time `protobuf:"bytes,7,opt,name=to_date,json=toDate,proto3,stdtime" json:"to_date,omitempty" db:"to_date"`
	CreatedOn  *time.Time `protobuf:"bytes,8,opt,name=created_on,json=createdOn,proto3,stdtime" json:"created_on,omitempty" db:"created_on"`
	UpdatedOn  *time.Time `protobuf:"bytes,9,opt,name=updated_on,json=updatedOn,proto3,stdtime" json:"updated_on,omitempty" db:"updated_on"`
}

func (m *Trip) Reset()      { *m = Trip{} }
func (*Trip) ProtoMessage() {}
func (*Trip) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf50d946d740d100, []int{12}
}
func (m *Trip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Trip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Trip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Trip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trip.Merge(m, src)
}
func (m *Trip) XXX_Size() int {
	return m.Size()
}
func (m *Trip) XXX_DiscardUnknown() {
	xxx_messageInfo_Trip.DiscardUnknown(m)
}

var xxx_messageInfo_Trip proto.InternalMessageInfo

func (m *Trip) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Trip) GetTemplateId() uint64 {
	if m != nil {
		return m.TemplateId
	}
	return 0
}

func (m *Trip) GetAgencyId() uint64 {
	if m != nil {
		return m.AgencyId
	}
	return 0
}

func (m *Trip) GetMaxGuest() uint32 {
	if m != nil {
		return m.MaxGuest
	}
	return 0
}

func (m *Trip) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Trip) GetFromDate() *time.Time {
	if m != nil {
		return m.FromDate
	}
	return nil
}

func (m *Trip) GetToDate() *time.Time {
	if m != nil {
		return m.ToDate
	}
	return nil
}

func (m *Trip) GetCreatedOn() *time.Time {
	if m != nil {
		return m.CreatedOn
	}
	return nil
}

func (m *Trip) GetUpdatedOn() *time.Time {
	if m != nil {
		return m.UpdatedOn
	}
	return nil
}

// DiveMaster entity
type DiveMaster struct {
	Id        uint64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" db:"id"`
	FirstName string       `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty" db:"first_name"`
	LastName  string       `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty" db:"last_name"`
	Level     pb.LevelType `protobuf:"varint,4,opt,name=level,proto3,enum=common.LevelType" json:"level,omitempty" db:"level"`
	AgencyId  uint64       `protobuf:"varint,5,opt,name=agency_id,json=agencyId,proto3" json:"agency_id,omitempty" db:"agency_id"`
	TripId    uint64       `protobuf:"varint,6,opt,name=trip_id,json=tripId,proto3" json:"trip_id,omitempty" db:"trip_id"`
	Documents []string     `protobuf:"bytes,7,rep,name=documents,proto3" json:"documents,omitempty" db:"documents"`
	CreatedOn *time.Time   `protobuf:"bytes,8,opt,name=created_on,json=createdOn,proto3,stdtime" json:"created_on,omitempty" db:"created_on"`
	UpdatedOn *time.Time   `protobuf:"bytes,9,opt,name=updated_on,json=updatedOn,proto3,stdtime" json:"updated_on,omitempty" db:"updated_on"`
}

func (m *DiveMaster) Reset()      { *m = DiveMaster{} }
func (*DiveMaster) ProtoMessage() {}
func (*DiveMaster) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf50d946d740d100, []int{13}
}
func (m *DiveMaster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiveMaster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiveMaster.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiveMaster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiveMaster.Merge(m, src)
}
func (m *DiveMaster) XXX_Size() int {
	return m.Size()
}
func (m *DiveMaster) XXX_DiscardUnknown() {
	xxx_messageInfo_DiveMaster.DiscardUnknown(m)
}

var xxx_messageInfo_DiveMaster proto.InternalMessageInfo

func (m *DiveMaster) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DiveMaster) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *DiveMaster) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *DiveMaster) GetLevel() pb.LevelType {
	if m != nil {
		return m.Level
	}
	return pb.INSTRUCTOR
}

func (m *DiveMaster) GetAgencyId() uint64 {
	if m != nil {
		return m.AgencyId
	}
	return 0
}

func (m *DiveMaster) GetTripId() uint64 {
	if m != nil {
		return m.TripId
	}
	return 0
}

func (m *DiveMaster) GetDocuments() []string {
	if m != nil {
		return m.Documents
	}
	return nil
}

func (m *DiveMaster) GetCreatedOn() *time.Time {
	if m != nil {
		return m.CreatedOn
	}
	return nil
}

func (m *DiveMaster) GetUpdatedOn() *time.Time {
	if m != nil {
		return m.UpdatedOn
	}
	return nil
}

// Reservation entity
type Reservation struct {
	Id        uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" db:"id"`
	TripId    uint64     `protobuf:"varint,2,opt,name=trip_id,json=tripId,proto3" json:"trip_id,omitempty" db:"trip_id"`
	DiverId   uint64     `protobuf:"varint,3,opt,name=diver_id,json=diverId,proto3" json:"diver_id,omitempty" db:"diver_id"`
	CreatedOn *time.Time `protobuf:"bytes,4,opt,name=created_on,json=createdOn,proto3,stdtime" json:"created_on,omitempty" db:"created_on"`
	UpdatedOn *time.Time `protobuf:"bytes,5,opt,name=updated_on,json=updatedOn,proto3,stdtime" json:"updated_on,omitempty" db:"updated_on"`
}

func (m *Reservation) Reset()      { *m = Reservation{} }
func (*Reservation) ProtoMessage() {}
func (*Reservation) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf50d946d740d100, []int{14}
}
func (m *Reservation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reservation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reservation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reservation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reservation.Merge(m, src)
}
func (m *Reservation) XXX_Size() int {
	return m.Size()
}
func (m *Reservation) XXX_DiscardUnknown() {
	xxx_messageInfo_Reservation.DiscardUnknown(m)
}

var xxx_messageInfo_Reservation proto.InternalMessageInfo

func (m *Reservation) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Reservation) GetTripId() uint64 {
	if m != nil {
		return m.TripId
	}
	return 0
}

func (m *Reservation) GetDiverId() uint64 {
	if m != nil {
		return m.DiverId
	}
	return 0
}

func (m *Reservation) GetCreatedOn() *time.Time {
	if m != nil {
		return m.CreatedOn
	}
	return nil
}

func (m *Reservation) GetUpdatedOn() *time.Time {
	if m != nil {
		return m.UpdatedOn
	}
	return nil
}

// BookedRoom entity
type BookedRoom struct {
	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" db:"id"`
	RoomTypeId    uint64 `protobuf:"varint,2,opt,name=room_type_id,json=roomTypeId,proto3" json:"room_type_id,omitempty" db:"room_type_id"`
	ReservationId uint64 `protobuf:"varint,3,opt,name=reservation_id,json=reservationId,proto3" json:"reservation_id,omitempty" db:"reservation_id"`
	NoAdults      uint32 `protobuf:"varint,4,opt,name=no_adults,json=noAdults,proto3" json:"no_adults,omitempty" db:"no_adults"`
	NoKids        uint32 `protobuf:"varint,5,opt,name=no_kids,json=noKids,proto3" json:"no_kids,omitempty" db:"no_kids"`
	Quantity      uint32 `protobuf:"varint,6,opt,name=quantity,proto3" json:"quantity,omitempty" db:"quantity"`
}

func (m *BookedRoom) Reset()      { *m = BookedRoom{} }
func (*BookedRoom) ProtoMessage() {}
func (*BookedRoom) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf50d946d740d100, []int{15}
}
func (m *BookedRoom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BookedRoom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BookedRoom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BookedRoom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookedRoom.Merge(m, src)
}
func (m *BookedRoom) XXX_Size() int {
	return m.Size()
}
func (m *BookedRoom) XXX_DiscardUnknown() {
	xxx_messageInfo_BookedRoom.DiscardUnknown(m)
}

var xxx_messageInfo_BookedRoom proto.InternalMessageInfo

func (m *BookedRoom) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BookedRoom) GetRoomTypeId() uint64 {
	if m != nil {
		return m.RoomTypeId
	}
	return 0
}

func (m *BookedRoom) GetReservationId() uint64 {
	if m != nil {
		return m.ReservationId
	}
	return 0
}

func (m *BookedRoom) GetNoAdults() uint32 {
	if m != nil {
		return m.NoAdults
	}
	return 0
}

func (m *BookedRoom) GetNoKids() uint32 {
	if m != nil {
		return m.NoKids
	}
	return 0
}

func (m *BookedRoom) GetQuantity() uint32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

// TripComment entity
type TripComment struct {
	Id            uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" db:"id"`
	Comment       string     `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty" db:"comment"`
	Star          uint32     `protobuf:"varint,3,opt,name=star,proto3" json:"star,omitempty" db:"star"`
	ReservationId uint64     `protobuf:"varint,4,opt,name=reservation_id,json=reservationId,proto3" json:"reservation_id,omitempty" db:"reservation_id"`
	CreatedOn     *time.Time `protobuf:"bytes,5,opt,name=created_on,json=createdOn,proto3,stdtime" json:"created_on,omitempty" db:"created_on"`
	UpdatedOn     *time.Time `protobuf:"bytes,6,opt,name=updated_on,json=updatedOn,proto3,stdtime" json:"updated_on,omitempty" db:"updated_on"`
}

func (m *TripComment) Reset()      { *m = TripComment{} }
func (*TripComment) ProtoMessage() {}
func (*TripComment) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf50d946d740d100, []int{16}
}
func (m *TripComment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TripComment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TripComment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TripComment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TripComment.Merge(m, src)
}
func (m *TripComment) XXX_Size() int {
	return m.Size()
}
func (m *TripComment) XXX_DiscardUnknown() {
	xxx_messageInfo_TripComment.DiscardUnknown(m)
}

var xxx_messageInfo_TripComment proto.InternalMessageInfo

func (m *TripComment) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TripComment) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *TripComment) GetStar() uint32 {
	if m != nil {
		return m.Star
	}
	return 0
}

func (m *TripComment) GetReservationId() uint64 {
	if m != nil {
		return m.ReservationId
	}
	return 0
}

func (m *TripComment) GetCreatedOn() *time.Time {
	if m != nil {
		return m.CreatedOn
	}
	return nil
}

func (m *TripComment) GetUpdatedOn() *time.Time {
	if m != nil {
		return m.UpdatedOn
	}
	return nil
}

// HotelComment entity
type HotelComment struct {
	Id            uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" db:"id"`
	Comment       string     `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty" db:"comment"`
	Star          uint32     `protobuf:"varint,3,opt,name=star,proto3" json:"star,omitempty" db:"star"`
	ReservationId uint64     `protobuf:"varint,4,opt,name=reservation_id,json=reservationId,proto3" json:"reservation_id,omitempty" db:"reservation_id"`
	CreatedOn     *time.Time `protobuf:"bytes,5,opt,name=created_on,json=createdOn,proto3,stdtime" json:"created_on,omitempty" db:"created_on"`
	UpdatedOn     *time.Time `protobuf:"bytes,6,opt,name=updated_on,json=updatedOn,proto3,stdtime" json:"updated_on,omitempty" db:"updated_on"`
}

func (m *HotelComment) Reset()      { *m = HotelComment{} }
func (*HotelComment) ProtoMessage() {}
func (*HotelComment) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf50d946d740d100, []int{17}
}
func (m *HotelComment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HotelComment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HotelComment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HotelComment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HotelComment.Merge(m, src)
}
func (m *HotelComment) XXX_Size() int {
	return m.Size()
}
func (m *HotelComment) XXX_DiscardUnknown() {
	xxx_messageInfo_HotelComment.DiscardUnknown(m)
}

var xxx_messageInfo_HotelComment proto.InternalMessageInfo

func (m *HotelComment) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *HotelComment) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *HotelComment) GetStar() uint32 {
	if m != nil {
		return m.Star
	}
	return 0
}

func (m *HotelComment) GetReservationId() uint64 {
	if m != nil {
		return m.ReservationId
	}
	return 0
}

func (m *HotelComment) GetCreatedOn() *time.Time {
	if m != nil {
		return m.CreatedOn
	}
	return nil
}

func (m *HotelComment) GetUpdatedOn() *time.Time {
	if m != nil {
		return m.UpdatedOn
	}
	return nil
}

// LiveaboardComment entity
type LiveaboardComment struct {
	Id            uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" db:"id"`
	Comment       string     `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty" db:"comment"`
	Star          uint32     `protobuf:"varint,3,opt,name=star,proto3" json:"star,omitempty" db:"star"`
	ReservationId uint64     `protobuf:"varint,4,opt,name=reservation_id,json=reservationId,proto3" json:"reservation_id,omitempty" db:"reservation_id"`
	CreatedOn     *time.Time `protobuf:"bytes,5,opt,name=created_on,json=createdOn,proto3,stdtime" json:"created_on,omitempty" db:"created_on"`
	UpdatedOn     *time.Time `protobuf:"bytes,6,opt,name=updated_on,json=updatedOn,proto3,stdtime" json:"updated_on,omitempty" db:"updated_on"`
}

func (m *LiveaboardComment) Reset()      { *m = LiveaboardComment{} }
func (*LiveaboardComment) ProtoMessage() {}
func (*LiveaboardComment) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf50d946d740d100, []int{18}
}
func (m *LiveaboardComment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiveaboardComment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiveaboardComment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiveaboardComment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveaboardComment.Merge(m, src)
}
func (m *LiveaboardComment) XXX_Size() int {
	return m.Size()
}
func (m *LiveaboardComment) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveaboardComment.DiscardUnknown(m)
}

var xxx_messageInfo_LiveaboardComment proto.InternalMessageInfo

func (m *LiveaboardComment) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LiveaboardComment) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *LiveaboardComment) GetStar() uint32 {
	if m != nil {
		return m.Star
	}
	return 0
}

func (m *LiveaboardComment) GetReservationId() uint64 {
	if m != nil {
		return m.ReservationId
	}
	return 0
}

func (m *LiveaboardComment) GetCreatedOn() *time.Time {
	if m != nil {
		return m.CreatedOn
	}
	return nil
}

func (m *LiveaboardComment) GetUpdatedOn() *time.Time {
	if m != nil {
		return m.UpdatedOn
	}
	return nil
}

func init() {
	proto.RegisterType((*Account)(nil), "entity.Account")
	proto.RegisterType((*Address)(nil), "entity.Address")
	proto.RegisterType((*Agency)(nil), "entity.Agency")
	proto.RegisterType((*Diver)(nil), "entity.Diver")
	proto.RegisterType((*Staff)(nil), "entity.Staff")
	proto.RegisterType((*Hotel)(nil), "entity.Hotel")
	proto.RegisterType((*Liveaboard)(nil), "entity.Liveaboard")
	proto.RegisterType((*Amenity)(nil), "entity.Amenity")
	proto.RegisterType((*RoomType)(nil), "entity.RoomType")
	proto.RegisterType((*RoomAmenity)(nil), "entity.RoomAmenity")
	proto.RegisterType((*Boat)(nil), "entity.Boat")
	proto.RegisterType((*TripTemplate)(nil), "entity.TripTemplate")
	proto.RegisterType((*Trip)(nil), "entity.Trip")
	proto.RegisterType((*DiveMaster)(nil), "entity.DiveMaster")
	proto.RegisterType((*Reservation)(nil), "entity.Reservation")
	proto.RegisterType((*BookedRoom)(nil), "entity.BookedRoom")
	proto.RegisterType((*TripComment)(nil), "entity.TripComment")
	proto.RegisterType((*HotelComment)(nil), "entity.HotelComment")
	proto.RegisterType((*LiveaboardComment)(nil), "entity.LiveaboardComment")
}

func init() { proto.RegisterFile("entity.proto", fileDescriptor_cf50d946d740d100) }

var fileDescriptor_cf50d946d740d100 = []byte{
	// 1675 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0xcf, 0x6f, 0x13, 0xc7,
	0x1e, 0xf7, 0x8f, 0xf5, 0x8f, 0x1d, 0x3b, 0x21, 0x59, 0x78, 0x3c, 0x8b, 0x27, 0x79, 0xc3, 0xe8,
	0x3d, 0x11, 0x9e, 0x20, 0x79, 0x18, 0x3d, 0x90, 0x40, 0x0f, 0x29, 0x06, 0x89, 0x67, 0x3d, 0x1e,
	0x48, 0x43, 0x4e, 0xbd, 0x58, 0x1b, 0xef, 0xc4, 0x19, 0xe1, 0xdd, 0x71, 0x77, 0xc7, 0x06, 0xdf,
	0x7a, 0xec, 0x91, 0x5b, 0xaf, 0x70, 0xa9, 0x5a, 0x55, 0xfd, 0x2f, 0x7a, 0xe0, 0xd4, 0x22, 0x55,
	0x95, 0x50, 0x0f, 0x6e, 0x63, 0x0e, 0xe5, 0x88, 0xdc, 0x73, 0xab, 0x6a, 0x7e, 0xec, 0xec, 0x3a,
	0x29, 0x49, 0x2c, 0x62, 0x25, 0x91, 0x38, 0x31, 0xf3, 0xfd, 0x31, 0xbb, 0xf9, 0x7e, 0x3e, 0xdf,
	0xcf, 0xcc, 0x8e, 0x01, 0x65, 0xec, 0x33, 0xc2, 0x06, 0x2b, 0xdd, 0x80, 0x32, 0x6a, 0xe5, 0xe5,
	0xec, 0x5c, 0xb9, 0x45, 0x3d, 0x8f, 0xfa, 0xd2, 0x7a, 0xee, 0x72, 0x9b, 0xb0, 0xad, 0xde, 0xc6,
	0x4a, 0x8b, 0x7a, 0xab, 0x6d, 0xda, 0xa6, 0xab, 0xc2, 0xbc, 0xd1, 0xdb, 0x14, 0x33, 0x31, 0x11,
	0x23, 0x15, 0x6e, 0xb7, 0x29, 0x6d, 0x77, 0x70, 0x1c, 0xc5, 0x88, 0x87, 0x43, 0xe6, 0x78, 0x5d,
	0x19, 0x00, 0x47, 0x59, 0x50, 0x58, 0x6b, 0xb5, 0x68, 0xcf, 0x67, 0xd6, 0xdf, 0x40, 0x86, 0xb8,
	0x95, 0xf4, 0x52, 0x7a, 0xd9, 0xa8, 0x97, 0xc6, 0x43, 0xbb, 0xe0, 0x6e, 0xdc, 0x80, 0xc4, 0x85,
	0x28, 0x43, 0x5c, 0xeb, 0x32, 0x28, 0xf6, 0x42, 0x1c, 0xf8, 0x8e, 0x87, 0x2b, 0x99, 0xa5, 0xf4,
	0xb2, 0x59, 0x5f, 0x1c, 0x0f, 0xed, 0x39, 0x1e, 0x12, 0xd9, 0x21, 0xd2, 0x21, 0xd6, 0xdf, 0x41,
	0x0e, 0x7b, 0x0e, 0xe9, 0x54, 0xb2, 0x22, 0x76, 0x7e, 0x3c, 0xb4, 0x01, 0x8f, 0x15, 0x46, 0x88,
	0xa4, 0x93, 0x2f, 0xda, 0x75, 0xc2, 0xf0, 0x31, 0x0d, 0xdc, 0x8a, 0x31, 0xb9, 0x68, 0x64, 0x87,
	0x48, 0x87, 0x58, 0xd7, 0x80, 0xc1, 0x06, 0x5d, 0x5c, 0xc9, 0x2d, 0xa5, 0x97, 0xe7, 0x6b, 0xa7,
	0x57, 0x54, 0x65, 0xd4, 0xfb, 0xaf, 0x0f, 0xba, 0xb8, 0x3e, 0x37, 0x1e, 0xda, 0x26, 0xcf, 0xe7,
	0x81, 0x10, 0x89, 0x78, 0xfe, 0x98, 0x3e, 0x0e, 0xc8, 0x26, 0xc1, 0x6e, 0x25, 0xbf, 0x94, 0x5e,
	0x2e, 0xc6, 0x8f, 0x89, 0xec, 0x10, 0xe9, 0x10, 0xeb, 0x02, 0xc8, 0x3b, 0x2d, 0x46, 0xfa, 0xb8,
	0x52, 0x10, 0xc1, 0xa7, 0xc6, 0x43, 0xbb, 0xc4, 0x83, 0xa5, 0x15, 0x22, 0xe5, 0xb6, 0x10, 0x00,
	0xad, 0x00, 0x3b, 0x0c, 0xbb, 0x4d, 0xea, 0x57, 0x8a, 0x4b, 0xe9, 0xe5, 0x52, 0xed, 0xdc, 0x8a,
	0x2c, 0xf9, 0x4a, 0x54, 0xf2, 0x95, 0xf5, 0xa8, 0xe4, 0xf5, 0xbf, 0x8e, 0x87, 0xf6, 0x29, 0xbe,
	0x50, 0x9c, 0x05, 0x9f, 0xfe, 0x64, 0xa7, 0x91, 0xa9, 0x0c, 0x0f, 0x7c, 0xbe, 0x66, 0xaf, 0xeb,
	0x46, 0x6b, 0x9a, 0x07, 0x5f, 0x33, 0xce, 0x52, 0x6b, 0x2a, 0xc3, 0x03, 0x1f, 0xfe, 0xca, 0x41,
	0x76, 0xdd, 0x00, 0x87, 0xe1, 0xde, 0x20, 0xff, 0x07, 0xcc, 0x3b, 0x32, 0xae, 0xd9, 0x21, 0x3e,
	0x6e, 0x5e, 0x51, 0x50, 0xf3, 0x87, 0x9c, 0x16, 0x15, 0x98, 0xf0, 0x42, 0x54, 0x56, 0x86, 0x7b,
	0xc4, 0xc7, 0x57, 0x76, 0xa5, 0xd7, 0x14, 0xfa, 0x7f, 0x9e, 0x5e, 0x9b, 0x4c, 0xaf, 0x59, 0xe7,
	0x81, 0xd1, 0x22, 0x6c, 0xa0, 0x98, 0xa0, 0x91, 0xe4, 0x36, 0x88, 0x84, 0x4b, 0x10, 0x86, 0x86,
	0xac, 0x45, 0x5d, 0xc9, 0x82, 0x24, 0x61, 0x94, 0x9d, 0x13, 0x46, 0x0d, 0x39, 0x92, 0x01, 0x6e,
	0x13, 0xea, 0x0b, 0xd8, 0xcd, 0x18, 0x49, 0x69, 0x85, 0x48, 0xb9, 0xad, 0x7f, 0x82, 0x82, 0xe0,
	0x50, 0x30, 0x10, 0x98, 0x9b, 0xf5, 0x85, 0xf1, 0xd0, 0x2e, 0x8b, 0xa7, 0x4b, 0x33, 0x44, 0x51,
	0xc0, 0x89, 0x41, 0xfd, 0x87, 0x2c, 0xc8, 0xaf, 0xb5, 0xb1, 0xdf, 0x1a, 0xec, 0x0d, 0xfa, 0x79,
	0x60, 0x24, 0xba, 0x5a, 0x97, 0x5d, 0x76, 0xb4, 0x11, 0x75, 0x73, 0x77, 0x8b, 0xfa, 0x78, 0x67,
	0x37, 0x0b, 0x23, 0x44, 0xd2, 0x69, 0xd5, 0x00, 0x70, 0x64, 0x2b, 0x36, 0x89, 0xec, 0x67, 0xa3,
	0x7e, 0x3a, 0x7a, 0xd1, 0xd8, 0x03, 0x91, 0xa9, 0x26, 0x0d, 0x57, 0xe4, 0x28, 0x52, 0x10, 0x57,
	0x40, 0x9a, 0xcc, 0xd1, 0x1e, 0x9e, 0x23, 0x27, 0x0d, 0xd7, 0xba, 0x0d, 0x4c, 0x97, 0xb6, 0x7a,
	0x1e, 0xf6, 0x59, 0xa8, 0x80, 0xfd, 0xc7, 0x8b, 0xa1, 0x9d, 0xfa, 0x71, 0x68, 0x97, 0x1e, 0xb2,
	0x80, 0xf8, 0xed, 0xb5, 0x20, 0x70, 0x06, 0xe3, 0xa1, 0x3d, 0xcf, 0x57, 0xd1, 0xb1, 0x10, 0xc5,
	0x79, 0x3b, 0x50, 0x2c, 0xcc, 0x00, 0xc5, 0xe2, 0x61, 0xa0, 0x78, 0x63, 0xe1, 0xcd, 0x33, 0x3b,
	0xf5, 0xe9, 0x73, 0x3b, 0xf5, 0xf4, 0xb9, 0x9d, 0x7a, 0xf6, 0xdc, 0x4e, 0xc1, 0xef, 0x0c, 0x90,
	0xbb, 0x43, 0xfa, 0x38, 0xd8, 0x1b, 0xd6, 0x1a, 0x00, 0x9b, 0x24, 0x08, 0x59, 0x33, 0x01, 0xae,
	0xae, 0x6c, 0xec, 0x81, 0xc8, 0x14, 0x93, 0xfb, 0x1c, 0xe7, 0x55, 0x60, 0x76, 0x9c, 0x28, 0x45,
	0x62, 0x6d, 0x45, 0x65, 0xd4, 0x0e, 0x88, 0x8a, 0x7c, 0x7c, 0x7f, 0x82, 0x18, 0xc6, 0x3e, 0xc4,
	0xd8, 0x20, 0x01, 0xdb, 0x6a, 0xf2, 0x3f, 0x4a, 0xf5, 0xad, 0x7e, 0x95, 0xd8, 0x03, 0x91, 0x29,
	0x26, 0x77, 0x1c, 0x86, 0xad, 0xeb, 0x20, 0xd7, 0xc1, 0x7d, 0xdc, 0x11, 0x00, 0xcf, 0xd7, 0x16,
	0x23, 0xb1, 0xbf, 0xc7, 0x8d, 0x42, 0xea, 0xf5, 0xc3, 0x44, 0x1c, 0x44, 0x32, 0x7e, 0x07, 0x0b,
	0x0b, 0x07, 0x62, 0xe1, 0x04, 0xa3, 0x8a, 0x87, 0xc2, 0x28, 0x73, 0x06, 0x8c, 0x02, 0x33, 0x62,
	0xd4, 0xb7, 0x59, 0x90, 0x7b, 0xc8, 0x9c, 0xcd, 0xcd, 0x63, 0xc0, 0x28, 0xa9, 0xf0, 0x84, 0x71,
	0xd1, 0x36, 0x76, 0x29, 0xbc, 0xb0, 0x4b, 0x85, 0x17, 0x43, 0xeb, 0x26, 0xc8, 0xb7, 0xb1, 0xef,
	0xe2, 0x40, 0x1d, 0x0a, 0xac, 0x88, 0x27, 0x77, 0x85, 0x55, 0x10, 0x45, 0xab, 0xbe, 0x8c, 0x84,
	0x48, 0xa5, 0xf0, 0x97, 0x73, 0x84, 0x40, 0x72, 0xa6, 0xe4, 0xc5, 0x1f, 0xad, 0x5f, 0x4e, 0x3b,
	0x20, 0x2a, 0xca, 0x71, 0xc3, 0x3d, 0x29, 0xa2, 0x01, 0x7f, 0xcf, 0x82, 0xdc, 0x7f, 0x29, 0xc3,
	0x9d, 0xf7, 0x56, 0xfe, 0x6b, 0xa0, 0xe4, 0xe2, 0xb0, 0x15, 0x90, 0xae, 0x40, 0x44, 0x22, 0x78,
	0x66, 0x3c, 0xb4, 0x17, 0x44, 0x23, 0xc4, 0x2e, 0x88, 0x92, 0x81, 0x7c, 0xe9, 0x90, 0x39, 0x81,
	0x80, 0x70, 0x2e, 0x5e, 0x9a, 0xdb, 0x20, 0x12, 0xae, 0x58, 0x3b, 0x72, 0x7b, 0x69, 0xc7, 0xd4,
	0x18, 0x4d, 0xee, 0x28, 0x85, 0x03, 0xed, 0x28, 0x17, 0x40, 0x9e, 0x78, 0x4e, 0x1b, 0xf3, 0xe6,
	0xcf, 0x26, 0xcf, 0x09, 0xd2, 0x0a, 0x91, 0x72, 0x9f, 0x94, 0x1e, 0xe7, 0x7b, 0x3f, 0xb8, 0x47,
	0xfa, 0xd8, 0xd9, 0xa0, 0x4e, 0xe0, 0x1e, 0x19, 0x0b, 0x2e, 0x80, 0x7c, 0x07, 0xfb, 0x6d, 0xb6,
	0xa5, 0x78, 0xa0, 0xeb, 0x2a, 0xad, 0x10, 0x29, 0x37, 0xe7, 0xc2, 0x63, 0xe2, 0xb2, 0x2d, 0xc1,
	0x85, 0xb9, 0x98, 0x0b, 0xc2, 0x08, 0x91, 0x74, 0x4e, 0xcf, 0x85, 0x18, 0xd7, 0xc2, 0x34, 0xb8,
	0x1e, 0xdf, 0x33, 0xdd, 0x97, 0x19, 0x50, 0x58, 0xf3, 0xb0, 0xcf, 0xcf, 0xc2, 0x47, 0x05, 0xea,
	0x64, 0xad, 0x8c, 0x19, 0xd4, 0x2a, 0x77, 0x28, 0xb5, 0xfa, 0xc6, 0x00, 0x45, 0x44, 0xa9, 0xc7,
	0xf7, 0x80, 0x23, 0x2b, 0xd6, 0x2a, 0x30, 0x3d, 0xe7, 0x49, 0xb3, 0xdd, 0xc3, 0x21, 0x53, 0x4d,
	0xa0, 0x29, 0xab, 0x1d, 0x10, 0x15, 0x3d, 0xe7, 0xc9, 0x5d, 0x3e, 0x14, 0xaa, 0x18, 0x90, 0x96,
	0x54, 0xc5, 0x4c, 0x42, 0x15, 0xb9, 0x91, 0xab, 0x22, 0xff, 0x97, 0xef, 0x92, 0x1f, 0xf7, 0x1c,
	0x71, 0x41, 0x20, 0x1a, 0x61, 0x2e, 0xde, 0x25, 0x23, 0x3b, 0x44, 0x3a, 0xc4, 0xba, 0x04, 0x8a,
	0x5b, 0x7c, 0x3b, 0x88, 0x15, 0x51, 0x87, 0x47, 0x76, 0x88, 0x0a, 0x62, 0xd8, 0x70, 0xad, 0x9b,
	0x60, 0xae, 0xa3, 0xb5, 0x83, 0xa7, 0x14, 0x45, 0xca, 0xd9, 0xf1, 0xd0, 0xb6, 0x44, 0xf3, 0x26,
	0x9d, 0x10, 0x95, 0xe3, 0xf9, 0x44, 0xcb, 0x99, 0xd3, 0xb4, 0x1c, 0x98, 0x01, 0x8d, 0x4a, 0x87,
	0x42, 0xa3, 0xcf, 0xd2, 0xa0, 0xc4, 0x69, 0x74, 0xa0, 0xb6, 0xbb, 0x0e, 0xca, 0x01, 0xa5, 0x5e,
	0x93, 0x0d, 0xba, 0x98, 0x57, 0x2e, 0x23, 0xc2, 0xfe, 0x32, 0x1e, 0xda, 0x8b, 0xe2, 0xb3, 0x33,
	0xe1, 0x83, 0x08, 0x04, 0x8a, 0x9d, 0x6a, 0xd7, 0x92, 0x0f, 0xe0, 0x69, 0xd9, 0x1d, 0xbb, 0x96,
	0xf6, 0xf0, 0x5d, 0x4b, 0x4e, 0x1a, 0x2e, 0x7c, 0x91, 0x01, 0x46, 0x9d, 0x3a, 0xec, 0xbd, 0xc9,
	0x3d, 0xa1, 0xab, 0xd9, 0xa9, 0x74, 0xd5, 0x98, 0x06, 0xe4, 0xdc, 0x0c, 0x40, 0xce, 0x1f, 0x0a,
	0xc8, 0xdf, 0x1b, 0xa0, 0xbc, 0x1e, 0x90, 0xee, 0x3a, 0xf6, 0xba, 0x1d, 0xfe, 0xf9, 0x71, 0x54,
	0x7a, 0x71, 0x55, 0x5d, 0x71, 0x19, 0xe2, 0x34, 0xbb, 0x10, 0x9d, 0x66, 0xc5, 0xbb, 0xbd, 0xf3,
	0x7e, 0x6b, 0x02, 0xbf, 0xdc, 0x01, 0xf0, 0x4b, 0xea, 0x41, 0x7e, 0x5f, 0x3d, 0xb8, 0x08, 0x0a,
	0x1b, 0xd4, 0x49, 0x7c, 0x4e, 0xe9, 0xcb, 0x11, 0x65, 0x86, 0x28, 0xcf, 0x47, 0x1f, 0xa4, 0x63,
	0x07, 0xab, 0x3e, 0x37, 0x80, 0xc1, 0x91, 0xdb, 0x9b, 0x4d, 0xff, 0x06, 0x25, 0xa6, 0x68, 0x17,
	0x4b, 0x86, 0xa6, 0x4a, 0xc2, 0x05, 0x11, 0x88, 0x66, 0x0d, 0x77, 0xfa, 0xa6, 0x9d, 0xd1, 0x56,
	0xf4, 0x00, 0x98, 0x9b, 0x01, 0xf5, 0xe4, 0xb7, 0xfd, 0xfe, 0xdd, 0x78, 0x36, 0x7a, 0xa4, 0x4e,
	0x92, 0x65, 0x2b, 0xf2, 0xb9, 0xf8, 0xf2, 0x6f, 0x80, 0x02, 0xa3, 0x72, 0xb9, 0xfd, 0xbf, 0xb0,
	0xce, 0x44, 0x54, 0x54, 0x29, 0x72, 0xb1, 0x3c, 0xa3, 0x62, 0xa9, 0x93, 0x72, 0xac, 0xfb, 0x2d,
	0x0b, 0xc0, 0x1d, 0xd2, 0xc7, 0xff, 0x77, 0x42, 0x76, 0x2c, 0xee, 0x75, 0xf4, 0xed, 0x8b, 0x31,
	0xe5, 0xed, 0xcb, 0xd4, 0x52, 0x74, 0x11, 0x14, 0x58, 0x40, 0xba, 0xb1, 0x12, 0x69, 0x71, 0x51,
	0x66, 0x88, 0xf2, 0x7c, 0xd4, 0x70, 0xad, 0x7f, 0x25, 0x6f, 0x69, 0xe4, 0x81, 0xde, 0x9a, 0xe6,
	0x4a, 0xe6, 0xf8, 0xe2, 0xff, 0x55, 0x06, 0x94, 0x10, 0x0e, 0x71, 0xd0, 0x77, 0xc4, 0x2e, 0xb0,
	0x27, 0x01, 0x12, 0x15, 0xcb, 0xec, 0x53, 0xb1, 0x4b, 0xa0, 0xe8, 0x92, 0x3e, 0x0e, 0x62, 0x89,
	0xd0, 0x3a, 0x1f, 0xd9, 0x21, 0x2a, 0x88, 0xe1, 0xae, 0xdb, 0x8d, 0xe3, 0x7b, 0xb0, 0xff, 0x3a,
	0x03, 0x40, 0x9d, 0xd2, 0x47, 0xd8, 0xe5, 0xe7, 0xb2, 0x19, 0x1d, 0xc8, 0x6e, 0x81, 0xf9, 0x20,
	0x46, 0x24, 0x2e, 0xa0, 0xfe, 0x2d, 0x63, 0xd2, 0x0b, 0xd1, 0x5c, 0xc2, 0x20, 0xd5, 0xd6, 0xa7,
	0x4d, 0xc7, 0xed, 0x75, 0x58, 0xb8, 0x53, 0x6d, 0xb5, 0x03, 0xa2, 0xa2, 0x4f, 0xd7, 0xc4, 0x90,
	0xc3, 0xea, 0xd3, 0xe6, 0x23, 0xe2, 0x86, 0xea, 0x23, 0x58, 0xc3, 0xaa, 0xcc, 0x10, 0xe5, 0x7d,
	0xfa, 0x3f, 0xe2, 0x86, 0x53, 0x9e, 0xfe, 0xe1, 0x76, 0x06, 0x94, 0xf8, 0x36, 0x74, 0x9b, 0x7a,
	0xbc, 0x2d, 0xf6, 0x2e, 0x98, 0xf8, 0x25, 0x44, 0xc4, 0x29, 0x6d, 0x49, 0xfc, 0x12, 0x22, 0xcc,
	0xe2, 0x97, 0x10, 0xb9, 0x50, 0x74, 0xc9, 0x93, 0x7d, 0xf7, 0x25, 0xcf, 0xee, 0x32, 0x1a, 0x53,
	0x95, 0xf1, 0xa4, 0x1c, 0x20, 0x47, 0x19, 0x50, 0x16, 0x37, 0x6e, 0x1f, 0x8a, 0x3c, 0xbb, 0x22,
	0xff, 0x92, 0x01, 0x8b, 0xf1, 0xad, 0xd6, 0x87, 0x4a, 0xcf, 0xac, 0xd2, 0xf5, 0x5b, 0x2f, 0xb7,
	0xab, 0xa9, 0x57, 0xdb, 0xd5, 0xd4, 0xdb, 0xed, 0x6a, 0xfa, 0x93, 0x51, 0x35, 0xfd, 0xc5, 0xa8,
	0x9a, 0x7e, 0x31, 0xaa, 0xa6, 0x5f, 0x8e, 0xaa, 0xe9, 0x9f, 0x47, 0xd5, 0xf4, 0x9b, 0x51, 0x35,
	0xf5, 0x76, 0x54, 0x4d, 0x3f, 0x7d, 0x5d, 0x4d, 0xbd, 0x7c, 0x5d, 0x4d, 0xbd, 0x7a, 0x5d, 0x4d,
	0x7d, 0x54, 0x5c, 0x59, 0x95, 0xff, 0x69, 0x61, 0x23, 0x2f, 0x9e, 0x7b, 0xf5, 0x8f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x06, 0x09, 0x6a, 0x5f, 0xd3, 0x20, 0x00, 0x00,
}

func (this *Account) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Account)
	if !ok {
		that2, ok := that.(Account)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Verified != that1.Verified {
		return false
	}
	if this.Active != that1.Active {
		return false
	}
	if that1.CreatedOn == nil {
		if this.CreatedOn != nil {
			return false
		}
	} else if !this.CreatedOn.Equal(*that1.CreatedOn) {
		return false
	}
	if that1.UpdatedOn == nil {
		if this.UpdatedOn != nil {
			return false
		}
	} else if !this.UpdatedOn.Equal(*that1.UpdatedOn) {
		return false
	}
	return true
}
func (this *Address) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Address)
	if !ok {
		that2, ok := that.(Address)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.AddressLine_1 != that1.AddressLine_1 {
		return false
	}
	if this.AddressLine_2 != that1.AddressLine_2 {
		return false
	}
	if this.City != that1.City {
		return false
	}
	if this.Postcode != that1.Postcode {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if that1.CreatedOn == nil {
		if this.CreatedOn != nil {
			return false
		}
	} else if !this.CreatedOn.Equal(*that1.CreatedOn) {
		return false
	}
	if that1.UpdatedOn == nil {
		if this.UpdatedOn != nil {
			return false
		}
	} else if !this.UpdatedOn.Equal(*that1.UpdatedOn) {
		return false
	}
	return true
}
func (this *Staff) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Staff)
	if !ok {
		that2, ok := that.(Staff)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if this.Position != that1.Position {
		return false
	}
	if this.Gender != that1.Gender {
		return false
	}
	if this.AgencyId != that1.AgencyId {
		return false
	}
	if that1.CreatedOn == nil {
		if this.CreatedOn != nil {
			return false
		}
	} else if !this.CreatedOn.Equal(*that1.CreatedOn) {
		return false
	}
	if that1.UpdatedOn == nil {
		if this.UpdatedOn != nil {
			return false
		}
	} else if !this.UpdatedOn.Equal(*that1.UpdatedOn) {
		return false
	}
	return true
}
func (this *Hotel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Hotel)
	if !ok {
		that2, ok := that.(Hotel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Star != that1.Star {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if this.AgencyId != that1.AgencyId {
		return false
	}
	if this.AddressId != that1.AddressId {
		return false
	}
	if len(this.Images) != len(that1.Images) {
		return false
	}
	for i := range this.Images {
		if this.Images[i] != that1.Images[i] {
			return false
		}
	}
	if that1.CreatedOn == nil {
		if this.CreatedOn != nil {
			return false
		}
	} else if !this.CreatedOn.Equal(*that1.CreatedOn) {
		return false
	}
	if that1.UpdatedOn == nil {
		if this.UpdatedOn != nil {
			return false
		}
	} else if !this.UpdatedOn.Equal(*that1.UpdatedOn) {
		return false
	}
	return true
}
func (this *Liveaboard) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Liveaboard)
	if !ok {
		that2, ok := that.(Liveaboard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Length != that1.Length {
		return false
	}
	if this.Width != that1.Width {
		return false
	}
	if this.AgencyId != that1.AgencyId {
		return false
	}
	if len(this.Images) != len(that1.Images) {
		return false
	}
	for i := range this.Images {
		if this.Images[i] != that1.Images[i] {
			return false
		}
	}
	if that1.CreatedOn == nil {
		if this.CreatedOn != nil {
			return false
		}
	} else if !this.CreatedOn.Equal(*that1.CreatedOn) {
		return false
	}
	if that1.UpdatedOn == nil {
		if this.UpdatedOn != nil {
			return false
		}
	} else if !this.UpdatedOn.Equal(*that1.UpdatedOn) {
		return false
	}
	return true
}
func (this *Amenity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Amenity)
	if !ok {
		that2, ok := that.(Amenity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if that1.CreatedOn == nil {
		if this.CreatedOn != nil {
			return false
		}
	} else if !this.CreatedOn.Equal(*that1.CreatedOn) {
		return false
	}
	if that1.UpdatedOn == nil {
		if this.UpdatedOn != nil {
			return false
		}
	} else if !this.UpdatedOn.Equal(*that1.UpdatedOn) {
		return false
	}
	return true
}
func (this *RoomType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoomType)
	if !ok {
		that2, ok := that.(RoomType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.MaxGuest != that1.MaxGuest {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if this.Quantity != that1.Quantity {
		return false
	}
	if this.HotelId != that1.HotelId {
		return false
	}
	if this.LiveaboardId != that1.LiveaboardId {
		return false
	}
	if len(this.Images) != len(that1.Images) {
		return false
	}
	for i := range this.Images {
		if this.Images[i] != that1.Images[i] {
			return false
		}
	}
	if that1.CreatedOn == nil {
		if this.CreatedOn != nil {
			return false
		}
	} else if !this.CreatedOn.Equal(*that1.CreatedOn) {
		return false
	}
	if that1.UpdatedOn == nil {
		if this.UpdatedOn != nil {
			return false
		}
	} else if !this.UpdatedOn.Equal(*that1.UpdatedOn) {
		return false
	}
	return true
}
func (this *RoomAmenity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoomAmenity)
	if !ok {
		that2, ok := that.(RoomAmenity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.RoomTypeId != that1.RoomTypeId {
		return false
	}
	if this.AmenityId != that1.AmenityId {
		return false
	}
	return true
}
func (this *Boat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Boat)
	if !ok {
		that2, ok := that.(Boat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.AgencyId != that1.AgencyId {
		return false
	}
	if len(this.Images) != len(that1.Images) {
		return false
	}
	for i := range this.Images {
		if this.Images[i] != that1.Images[i] {
			return false
		}
	}
	if that1.CreatedOn == nil {
		if this.CreatedOn != nil {
			return false
		}
	} else if !this.CreatedOn.Equal(*that1.CreatedOn) {
		return false
	}
	if that1.UpdatedOn == nil {
		if this.UpdatedOn != nil {
			return false
		}
	} else if !this.UpdatedOn.Equal(*that1.UpdatedOn) {
		return false
	}
	return true
}
func (this *TripTemplate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TripTemplate)
	if !ok {
		that2, ok := that.(TripTemplate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.AgencyId != that1.AgencyId {
		return false
	}
	if this.HotelId != that1.HotelId {
		return false
	}
	if this.BoatId != that1.BoatId {
		return false
	}
	if this.LiveaboardId != that1.LiveaboardId {
		return false
	}
	if len(this.Images) != len(that1.Images) {
		return false
	}
	for i := range this.Images {
		if this.Images[i] != that1.Images[i] {
			return false
		}
	}
	if that1.CreatedOn == nil {
		if this.CreatedOn != nil {
			return false
		}
	} else if !this.CreatedOn.Equal(*that1.CreatedOn) {
		return false
	}
	if that1.UpdatedOn == nil {
		if this.UpdatedOn != nil {
			return false
		}
	} else if !this.UpdatedOn.Equal(*that1.UpdatedOn) {
		return false
	}
	return true
}
func (this *Trip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Trip)
	if !ok {
		that2, ok := that.(Trip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.TemplateId != that1.TemplateId {
		return false
	}
	if this.AgencyId != that1.AgencyId {
		return false
	}
	if this.MaxGuest != that1.MaxGuest {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if that1.FromDate == nil {
		if this.FromDate != nil {
			return false
		}
	} else if !this.FromDate.Equal(*that1.FromDate) {
		return false
	}
	if that1.ToDate == nil {
		if this.ToDate != nil {
			return false
		}
	} else if !this.ToDate.Equal(*that1.ToDate) {
		return false
	}
	if that1.CreatedOn == nil {
		if this.CreatedOn != nil {
			return false
		}
	} else if !this.CreatedOn.Equal(*that1.CreatedOn) {
		return false
	}
	if that1.UpdatedOn == nil {
		if this.UpdatedOn != nil {
			return false
		}
	} else if !this.UpdatedOn.Equal(*that1.UpdatedOn) {
		return false
	}
	return true
}
func (this *DiveMaster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DiveMaster)
	if !ok {
		that2, ok := that.(DiveMaster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.AgencyId != that1.AgencyId {
		return false
	}
	if this.TripId != that1.TripId {
		return false
	}
	if len(this.Documents) != len(that1.Documents) {
		return false
	}
	for i := range this.Documents {
		if this.Documents[i] != that1.Documents[i] {
			return false
		}
	}
	if that1.CreatedOn == nil {
		if this.CreatedOn != nil {
			return false
		}
	} else if !this.CreatedOn.Equal(*that1.CreatedOn) {
		return false
	}
	if that1.UpdatedOn == nil {
		if this.UpdatedOn != nil {
			return false
		}
	} else if !this.UpdatedOn.Equal(*that1.UpdatedOn) {
		return false
	}
	return true
}
func (this *Reservation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Reservation)
	if !ok {
		that2, ok := that.(Reservation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.TripId != that1.TripId {
		return false
	}
	if this.DiverId != that1.DiverId {
		return false
	}
	if that1.CreatedOn == nil {
		if this.CreatedOn != nil {
			return false
		}
	} else if !this.CreatedOn.Equal(*that1.CreatedOn) {
		return false
	}
	if that1.UpdatedOn == nil {
		if this.UpdatedOn != nil {
			return false
		}
	} else if !this.UpdatedOn.Equal(*that1.UpdatedOn) {
		return false
	}
	return true
}
func (this *BookedRoom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BookedRoom)
	if !ok {
		that2, ok := that.(BookedRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.RoomTypeId != that1.RoomTypeId {
		return false
	}
	if this.ReservationId != that1.ReservationId {
		return false
	}
	if this.NoAdults != that1.NoAdults {
		return false
	}
	if this.NoKids != that1.NoKids {
		return false
	}
	if this.Quantity != that1.Quantity {
		return false
	}
	return true
}
func (this *TripComment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TripComment)
	if !ok {
		that2, ok := that.(TripComment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Comment != that1.Comment {
		return false
	}
	if this.Star != that1.Star {
		return false
	}
	if this.ReservationId != that1.ReservationId {
		return false
	}
	if that1.CreatedOn == nil {
		if this.CreatedOn != nil {
			return false
		}
	} else if !this.CreatedOn.Equal(*that1.CreatedOn) {
		return false
	}
	if that1.UpdatedOn == nil {
		if this.UpdatedOn != nil {
			return false
		}
	} else if !this.UpdatedOn.Equal(*that1.UpdatedOn) {
		return false
	}
	return true
}
func (this *HotelComment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HotelComment)
	if !ok {
		that2, ok := that.(HotelComment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Comment != that1.Comment {
		return false
	}
	if this.Star != that1.Star {
		return false
	}
	if this.ReservationId != that1.ReservationId {
		return false
	}
	if that1.CreatedOn == nil {
		if this.CreatedOn != nil {
			return false
		}
	} else if !this.CreatedOn.Equal(*that1.CreatedOn) {
		return false
	}
	if that1.UpdatedOn == nil {
		if this.UpdatedOn != nil {
			return false
		}
	} else if !this.UpdatedOn.Equal(*that1.UpdatedOn) {
		return false
	}
	return true
}
func (this *LiveaboardComment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LiveaboardComment)
	if !ok {
		that2, ok := that.(LiveaboardComment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Comment != that1.Comment {
		return false
	}
	if this.Star != that1.Star {
		return false
	}
	if this.ReservationId != that1.ReservationId {
		return false
	}
	if that1.CreatedOn == nil {
		if this.CreatedOn != nil {
			return false
		}
	} else if !this.CreatedOn.Equal(*that1.CreatedOn) {
		return false
	}
	if that1.UpdatedOn == nil {
		if this.UpdatedOn != nil {
			return false
		}
	} else if !this.UpdatedOn.Equal(*that1.UpdatedOn) {
		return false
	}
	return true
}
func (this *Account) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&entity.Account{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Verified: "+fmt.Sprintf("%#v", this.Verified)+",\n")
	s = append(s, "Active: "+fmt.Sprintf("%#v", this.Active)+",\n")
	s = append(s, "CreatedOn: "+fmt.Sprintf("%#v", this.CreatedOn)+",\n")
	s = append(s, "UpdatedOn: "+fmt.Sprintf("%#v", this.UpdatedOn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Address) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&entity.Address{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "AddressLine_1: "+fmt.Sprintf("%#v", this.AddressLine_1)+",\n")
	s = append(s, "AddressLine_2: "+fmt.Sprintf("%#v", this.AddressLine_2)+",\n")
	s = append(s, "City: "+fmt.Sprintf("%#v", this.City)+",\n")
	s = append(s, "Postcode: "+fmt.Sprintf("%#v", this.Postcode)+",\n")
	s = append(s, "Region: "+fmt.Sprintf("%#v", this.Region)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "CreatedOn: "+fmt.Sprintf("%#v", this.CreatedOn)+",\n")
	s = append(s, "UpdatedOn: "+fmt.Sprintf("%#v", this.UpdatedOn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Agency) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&entity.Agency{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "AccountId: "+fmt.Sprintf("%#v", this.AccountId)+",\n")
	s = append(s, "AddressId: "+fmt.Sprintf("%#v", this.AddressId)+",\n")
	s = append(s, "Documents: "+fmt.Sprintf("%#v", this.Documents)+",\n")
	s = append(s, "CreatedOn: "+fmt.Sprintf("%#v", this.CreatedOn)+",\n")
	s = append(s, "UpdatedOn: "+fmt.Sprintf("%#v", this.UpdatedOn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Diver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&entity.Diver{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "BirthDate: "+fmt.Sprintf("%#v", this.BirthDate)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "AccountId: "+fmt.Sprintf("%#v", this.AccountId)+",\n")
	s = append(s, "Documents: "+fmt.Sprintf("%#v", this.Documents)+",\n")
	s = append(s, "CreatedOn: "+fmt.Sprintf("%#v", this.CreatedOn)+",\n")
	s = append(s, "UpdatedOn: "+fmt.Sprintf("%#v", this.UpdatedOn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Staff) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&entity.Staff{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "Position: "+fmt.Sprintf("%#v", this.Position)+",\n")
	s = append(s, "Gender: "+fmt.Sprintf("%#v", this.Gender)+",\n")
	s = append(s, "AgencyId: "+fmt.Sprintf("%#v", this.AgencyId)+",\n")
	s = append(s, "CreatedOn: "+fmt.Sprintf("%#v", this.CreatedOn)+",\n")
	s = append(s, "UpdatedOn: "+fmt.Sprintf("%#v", this.UpdatedOn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Hotel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&entity.Hotel{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Star: "+fmt.Sprintf("%#v", this.Star)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "AgencyId: "+fmt.Sprintf("%#v", this.AgencyId)+",\n")
	s = append(s, "AddressId: "+fmt.Sprintf("%#v", this.AddressId)+",\n")
	s = append(s, "Images: "+fmt.Sprintf("%#v", this.Images)+",\n")
	s = append(s, "CreatedOn: "+fmt.Sprintf("%#v", this.CreatedOn)+",\n")
	s = append(s, "UpdatedOn: "+fmt.Sprintf("%#v", this.UpdatedOn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Liveaboard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&entity.Liveaboard{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Length: "+fmt.Sprintf("%#v", this.Length)+",\n")
	s = append(s, "Width: "+fmt.Sprintf("%#v", this.Width)+",\n")
	s = append(s, "AgencyId: "+fmt.Sprintf("%#v", this.AgencyId)+",\n")
	s = append(s, "Images: "+fmt.Sprintf("%#v", this.Images)+",\n")
	s = append(s, "CreatedOn: "+fmt.Sprintf("%#v", this.CreatedOn)+",\n")
	s = append(s, "UpdatedOn: "+fmt.Sprintf("%#v", this.UpdatedOn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Amenity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&entity.Amenity{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "CreatedOn: "+fmt.Sprintf("%#v", this.CreatedOn)+",\n")
	s = append(s, "UpdatedOn: "+fmt.Sprintf("%#v", this.UpdatedOn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RoomType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&entity.RoomType{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "MaxGuest: "+fmt.Sprintf("%#v", this.MaxGuest)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	s = append(s, "Quantity: "+fmt.Sprintf("%#v", this.Quantity)+",\n")
	s = append(s, "HotelId: "+fmt.Sprintf("%#v", this.HotelId)+",\n")
	s = append(s, "LiveaboardId: "+fmt.Sprintf("%#v", this.LiveaboardId)+",\n")
	s = append(s, "Images: "+fmt.Sprintf("%#v", this.Images)+",\n")
	s = append(s, "CreatedOn: "+fmt.Sprintf("%#v", this.CreatedOn)+",\n")
	s = append(s, "UpdatedOn: "+fmt.Sprintf("%#v", this.UpdatedOn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RoomAmenity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&entity.RoomAmenity{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "RoomTypeId: "+fmt.Sprintf("%#v", this.RoomTypeId)+",\n")
	s = append(s, "AmenityId: "+fmt.Sprintf("%#v", this.AmenityId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Boat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&entity.Boat{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "AgencyId: "+fmt.Sprintf("%#v", this.AgencyId)+",\n")
	s = append(s, "Images: "+fmt.Sprintf("%#v", this.Images)+",\n")
	s = append(s, "CreatedOn: "+fmt.Sprintf("%#v", this.CreatedOn)+",\n")
	s = append(s, "UpdatedOn: "+fmt.Sprintf("%#v", this.UpdatedOn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TripTemplate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&entity.TripTemplate{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "AgencyId: "+fmt.Sprintf("%#v", this.AgencyId)+",\n")
	s = append(s, "HotelId: "+fmt.Sprintf("%#v", this.HotelId)+",\n")
	s = append(s, "BoatId: "+fmt.Sprintf("%#v", this.BoatId)+",\n")
	s = append(s, "LiveaboardId: "+fmt.Sprintf("%#v", this.LiveaboardId)+",\n")
	s = append(s, "Images: "+fmt.Sprintf("%#v", this.Images)+",\n")
	s = append(s, "CreatedOn: "+fmt.Sprintf("%#v", this.CreatedOn)+",\n")
	s = append(s, "UpdatedOn: "+fmt.Sprintf("%#v", this.UpdatedOn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Trip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&entity.Trip{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "TemplateId: "+fmt.Sprintf("%#v", this.TemplateId)+",\n")
	s = append(s, "AgencyId: "+fmt.Sprintf("%#v", this.AgencyId)+",\n")
	s = append(s, "MaxGuest: "+fmt.Sprintf("%#v", this.MaxGuest)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	s = append(s, "FromDate: "+fmt.Sprintf("%#v", this.FromDate)+",\n")
	s = append(s, "ToDate: "+fmt.Sprintf("%#v", this.ToDate)+",\n")
	s = append(s, "CreatedOn: "+fmt.Sprintf("%#v", this.CreatedOn)+",\n")
	s = append(s, "UpdatedOn: "+fmt.Sprintf("%#v", this.UpdatedOn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DiveMaster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&entity.DiveMaster{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "AgencyId: "+fmt.Sprintf("%#v", this.AgencyId)+",\n")
	s = append(s, "TripId: "+fmt.Sprintf("%#v", this.TripId)+",\n")
	s = append(s, "Documents: "+fmt.Sprintf("%#v", this.Documents)+",\n")
	s = append(s, "CreatedOn: "+fmt.Sprintf("%#v", this.CreatedOn)+",\n")
	s = append(s, "UpdatedOn: "+fmt.Sprintf("%#v", this.UpdatedOn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Reservation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&entity.Reservation{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "TripId: "+fmt.Sprintf("%#v", this.TripId)+",\n")
	s = append(s, "DiverId: "+fmt.Sprintf("%#v", this.DiverId)+",\n")
	s = append(s, "CreatedOn: "+fmt.Sprintf("%#v", this.CreatedOn)+",\n")
	s = append(s, "UpdatedOn: "+fmt.Sprintf("%#v", this.UpdatedOn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BookedRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&entity.BookedRoom{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "RoomTypeId: "+fmt.Sprintf("%#v", this.RoomTypeId)+",\n")
	s = append(s, "ReservationId: "+fmt.Sprintf("%#v", this.ReservationId)+",\n")
	s = append(s, "NoAdults: "+fmt.Sprintf("%#v", this.NoAdults)+",\n")
	s = append(s, "NoKids: "+fmt.Sprintf("%#v", this.NoKids)+",\n")
	s = append(s, "Quantity: "+fmt.Sprintf("%#v", this.Quantity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TripComment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&entity.TripComment{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Comment: "+fmt.Sprintf("%#v", this.Comment)+",\n")
	s = append(s, "Star: "+fmt.Sprintf("%#v", this.Star)+",\n")
	s = append(s, "ReservationId: "+fmt.Sprintf("%#v", this.ReservationId)+",\n")
	s = append(s, "CreatedOn: "+fmt.Sprintf("%#v", this.CreatedOn)+",\n")
	s = append(s, "UpdatedOn: "+fmt.Sprintf("%#v", this.UpdatedOn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HotelComment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&entity.HotelComment{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Comment: "+fmt.Sprintf("%#v", this.Comment)+",\n")
	s = append(s, "Star: "+fmt.Sprintf("%#v", this.Star)+",\n")
	s = append(s, "ReservationId: "+fmt.Sprintf("%#v", this.ReservationId)+",\n")
	s = append(s, "CreatedOn: "+fmt.Sprintf("%#v", this.CreatedOn)+",\n")
	s = append(s, "UpdatedOn: "+fmt.Sprintf("%#v", this.UpdatedOn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LiveaboardComment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&entity.LiveaboardComment{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Comment: "+fmt.Sprintf("%#v", this.Comment)+",\n")
	s = append(s, "Star: "+fmt.Sprintf("%#v", this.Star)+",\n")
	s = append(s, "ReservationId: "+fmt.Sprintf("%#v", this.ReservationId)+",\n")
	s = append(s, "CreatedOn: "+fmt.Sprintf("%#v", this.CreatedOn)+",\n")
	s = append(s, "UpdatedOn: "+fmt.Sprintf("%#v", this.UpdatedOn)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEntity(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Account) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Account) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Account) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedOn != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintEntity(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x4a
	}
	if m.CreatedOn != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintEntity(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x42
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Verified {
		i--
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Type != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Address) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Address) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Address) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedOn != nil {
		n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintEntity(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x4a
	}
	if m.CreatedOn != nil {
		n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintEntity(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Postcode) > 0 {
		i -= len(m.Postcode)
		copy(dAtA[i:], m.Postcode)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Postcode)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AddressLine_2) > 0 {
		i -= len(m.AddressLine_2)
		copy(dAtA[i:], m.AddressLine_2)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.AddressLine_2)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AddressLine_1) > 0 {
		i -= len(m.AddressLine_1)
		copy(dAtA[i:], m.AddressLine_1)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.AddressLine_1)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Staff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Staff) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Staff) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedOn != nil {
		n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn):])
		if err5 != nil {
			return 0, err5
		}
		i -= n5
		i = encodeVarintEntity(dAtA, i, uint64(n5))
		i--
		dAtA[i] = 0x42
	}
	if m.CreatedOn != nil {
		n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn):])
		if err6 != nil {
			return 0, err6
		}
		i -= n6
		i = encodeVarintEntity(dAtA, i, uint64(n6))
		i--
		dAtA[i] = 0x3a
	}
	if m.AgencyId != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.AgencyId))
		i--
		dAtA[i] = 0x30
	}
	if m.Gender != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Gender))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Position) > 0 {
		i -= len(m.Position)
		copy(dAtA[i:], m.Position)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Position)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Hotel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hotel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Hotel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedOn != nil {
		n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn):])
		if err7 != nil {
			return 0, err7
		}
		i -= n7
		i = encodeVarintEntity(dAtA, i, uint64(n7))
		i--
		dAtA[i] = 0x52
	}
	if m.CreatedOn != nil {
		n8, err8 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn):])
		if err8 != nil {
			return 0, err8
		}
		i -= n8
		i = encodeVarintEntity(dAtA, i, uint64(n8))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Images[iNdEx])
			copy(dAtA[i:], m.Images[iNdEx])
			i = encodeVarintEntity(dAtA, i, uint64(len(m.Images[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.AddressId != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.AddressId))
		i--
		dAtA[i] = 0x38
	}
	if m.AgencyId != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.AgencyId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Star != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Star))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Liveaboard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Liveaboard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Liveaboard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedOn != nil {
		n9, err9 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn):])
		if err9 != nil {
			return 0, err9
		}
		i -= n9
		i = encodeVarintEntity(dAtA, i, uint64(n9))
		i--
		dAtA[i] = 0x4a
	}
	if m.CreatedOn != nil {
		n10, err10 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn):])
		if err10 != nil {
			return 0, err10
		}
		i -= n10
		i = encodeVarintEntity(dAtA, i, uint64(n10))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Images[iNdEx])
			copy(dAtA[i:], m.Images[iNdEx])
			i = encodeVarintEntity(dAtA, i, uint64(len(m.Images[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.AgencyId != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.AgencyId))
		i--
		dAtA[i] = 0x30
	}
	if m.Width != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x28
	}
	if m.Length != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Amenity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Amenity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Amenity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedOn != nil {
		n11, err11 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn):])
		if err11 != nil {
			return 0, err11
		}
		i -= n11
		i = encodeVarintEntity(dAtA, i, uint64(n11))
		i--
		dAtA[i] = 0x2a
	}
	if m.CreatedOn != nil {
		n12, err12 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn):])
		if err12 != nil {
			return 0, err12
		}
		i -= n12
		i = encodeVarintEntity(dAtA, i, uint64(n12))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoomType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoomType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedOn != nil {
		n13, err13 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn):])
		if err13 != nil {
			return 0, err13
		}
		i -= n13
		i = encodeVarintEntity(dAtA, i, uint64(n13))
		i--
		dAtA[i] = 0x5a
	}
	if m.CreatedOn != nil {
		n14, err14 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn):])
		if err14 != nil {
			return 0, err14
		}
		i -= n14
		i = encodeVarintEntity(dAtA, i, uint64(n14))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Images[iNdEx])
			copy(dAtA[i:], m.Images[iNdEx])
			i = encodeVarintEntity(dAtA, i, uint64(len(m.Images[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.LiveaboardId != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.LiveaboardId))
		i--
		dAtA[i] = 0x40
	}
	if m.HotelId != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.HotelId))
		i--
		dAtA[i] = 0x38
	}
	if m.Quantity != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Quantity))
		i--
		dAtA[i] = 0x30
	}
	if m.Price != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Price))))
		i--
		dAtA[i] = 0x2d
	}
	if m.MaxGuest != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.MaxGuest))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoomAmenity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAmenity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoomAmenity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AmenityId != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.AmenityId))
		i--
		dAtA[i] = 0x18
	}
	if m.RoomTypeId != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.RoomTypeId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Boat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Boat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Boat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedOn != nil {
		n15, err15 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn):])
		if err15 != nil {
			return 0, err15
		}
		i -= n15
		i = encodeVarintEntity(dAtA, i, uint64(n15))
		i--
		dAtA[i] = 0x32
	}
	if m.CreatedOn != nil {
		n16, err16 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn):])
		if err16 != nil {
			return 0, err16
		}
		i -= n16
		i = encodeVarintEntity(dAtA, i, uint64(n16))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Images[iNdEx])
			copy(dAtA[i:], m.Images[iNdEx])
			i = encodeVarintEntity(dAtA, i, uint64(len(m.Images[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.AgencyId != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.AgencyId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TripTemplate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TripTemplate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TripTemplate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedOn != nil {
		n17, err17 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn):])
		if err17 != nil {
			return 0, err17
		}
		i -= n17
		i = encodeVarintEntity(dAtA, i, uint64(n17))
		i--
		dAtA[i] = 0x5a
	}
	if m.CreatedOn != nil {
		n18, err18 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn):])
		if err18 != nil {
			return 0, err18
		}
		i -= n18
		i = encodeVarintEntity(dAtA, i, uint64(n18))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Images[iNdEx])
			copy(dAtA[i:], m.Images[iNdEx])
			i = encodeVarintEntity(dAtA, i, uint64(len(m.Images[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.LiveaboardId != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.LiveaboardId))
		i--
		dAtA[i] = 0x40
	}
	if m.BoatId != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.BoatId))
		i--
		dAtA[i] = 0x38
	}
	if m.HotelId != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.HotelId))
		i--
		dAtA[i] = 0x30
	}
	if m.AgencyId != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.AgencyId))
		i--
		dAtA[i] = 0x28
	}
	if m.Type != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Trip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Trip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Trip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedOn != nil {
		n19, err19 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn):])
		if err19 != nil {
			return 0, err19
		}
		i -= n19
		i = encodeVarintEntity(dAtA, i, uint64(n19))
		i--
		dAtA[i] = 0x4a
	}
	if m.CreatedOn != nil {
		n20, err20 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn):])
		if err20 != nil {
			return 0, err20
		}
		i -= n20
		i = encodeVarintEntity(dAtA, i, uint64(n20))
		i--
		dAtA[i] = 0x42
	}
	if m.ToDate != nil {
		n21, err21 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ToDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ToDate):])
		if err21 != nil {
			return 0, err21
		}
		i -= n21
		i = encodeVarintEntity(dAtA, i, uint64(n21))
		i--
		dAtA[i] = 0x3a
	}
	if m.FromDate != nil {
		n22, err22 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.FromDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.FromDate):])
		if err22 != nil {
			return 0, err22
		}
		i -= n22
		i = encodeVarintEntity(dAtA, i, uint64(n22))
		i--
		dAtA[i] = 0x32
	}
	if m.Price != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Price))))
		i--
		dAtA[i] = 0x2d
	}
	if m.MaxGuest != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.MaxGuest))
		i--
		dAtA[i] = 0x20
	}
	if m.AgencyId != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.AgencyId))
		i--
		dAtA[i] = 0x18
	}
	if m.TemplateId != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.TemplateId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DiveMaster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiveMaster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiveMaster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedOn != nil {
		n23, err23 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn):])
		if err23 != nil {
			return 0, err23
		}
		i -= n23
		i = encodeVarintEntity(dAtA, i, uint64(n23))
		i--
		dAtA[i] = 0x4a
	}
	if m.CreatedOn != nil {
		n24, err24 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn):])
		if err24 != nil {
			return 0, err24
		}
		i -= n24
		i = encodeVarintEntity(dAtA, i, uint64(n24))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Documents) > 0 {
		for iNdEx := len(m.Documents) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Documents[iNdEx])
			copy(dAtA[i:], m.Documents[iNdEx])
			i = encodeVarintEntity(dAtA, i, uint64(len(m.Documents[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.TripId != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.TripId))
		i--
		dAtA[i] = 0x30
	}
	if m.AgencyId != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.AgencyId))
		i--
		dAtA[i] = 0x28
	}
	if m.Level != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x20
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Reservation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reservation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Reservation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedOn != nil {
		n25, err25 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn):])
		if err25 != nil {
			return 0, err25
		}
		i -= n25
		i = encodeVarintEntity(dAtA, i, uint64(n25))
		i--
		dAtA[i] = 0x2a
	}
	if m.CreatedOn != nil {
		n26, err26 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn):])
		if err26 != nil {
			return 0, err26
		}
		i -= n26
		i = encodeVarintEntity(dAtA, i, uint64(n26))
		i--
		dAtA[i] = 0x22
	}
	if m.DiverId != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.DiverId))
		i--
		dAtA[i] = 0x18
	}
	if m.TripId != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.TripId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BookedRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BookedRoom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BookedRoom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Quantity != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Quantity))
		i--
		dAtA[i] = 0x30
	}
	if m.NoKids != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.NoKids))
		i--
		dAtA[i] = 0x28
	}
	if m.NoAdults != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.NoAdults))
		i--
		dAtA[i] = 0x20
	}
	if m.ReservationId != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.ReservationId))
		i--
		dAtA[i] = 0x18
	}
	if m.RoomTypeId != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.RoomTypeId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TripComment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TripComment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TripComment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedOn != nil {
		n27, err27 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn):])
		if err27 != nil {
			return 0, err27
		}
		i -= n27
		i = encodeVarintEntity(dAtA, i, uint64(n27))
		i--
		dAtA[i] = 0x32
	}
	if m.CreatedOn != nil {
		n28, err28 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn):])
		if err28 != nil {
			return 0, err28
		}
		i -= n28
		i = encodeVarintEntity(dAtA, i, uint64(n28))
		i--
		dAtA[i] = 0x2a
	}
	if m.ReservationId != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.ReservationId))
		i--
		dAtA[i] = 0x20
	}
	if m.Star != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Star))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HotelComment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HotelComment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HotelComment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedOn != nil {
		n29, err29 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn):])
		if err29 != nil {
			return 0, err29
		}
		i -= n29
		i = encodeVarintEntity(dAtA, i, uint64(n29))
		i--
		dAtA[i] = 0x32
	}
	if m.CreatedOn != nil {
		n30, err30 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn):])
		if err30 != nil {
			return 0, err30
		}
		i -= n30
		i = encodeVarintEntity(dAtA, i, uint64(n30))
		i--
		dAtA[i] = 0x2a
	}
	if m.ReservationId != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.ReservationId))
		i--
		dAtA[i] = 0x20
	}
	if m.Star != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Star))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LiveaboardComment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiveaboardComment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiveaboardComment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedOn != nil {
		n31, err31 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn):])
		if err31 != nil {
			return 0, err31
		}
		i -= n31
		i = encodeVarintEntity(dAtA, i, uint64(n31))
		i--
		dAtA[i] = 0x32
	}
	if m.CreatedOn != nil {
		n32, err32 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn):])
		if err32 != nil {
			return 0, err32
		}
		i -= n32
		i = encodeVarintEntity(dAtA, i, uint64(n32))
		i--
		dAtA[i] = 0x2a
	}
	if m.ReservationId != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.ReservationId))
		i--
		dAtA[i] = 0x20
	}
	if m.Star != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Star))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintEntity(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEntity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEntity(dAtA []byte, offset int, v uint64) int {
	offset -= sovEntity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Account) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEntity(uint64(m.Id))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovEntity(uint64(m.Type))
	}
	if m.Verified {
		n += 2
	}
	if m.Active {
		n += 2
	}
	if m.CreatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.UpdatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEntity(uint64(m.Id))
	}
	l = len(m.AddressLine_1)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.AddressLine_2)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.Postcode)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.CreatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.UpdatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *Staff) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEntity(uint64(m.Id))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.Gender != 0 {
		n += 1 + sovEntity(uint64(m.Gender))
	}
	if m.AgencyId != 0 {
		n += 1 + sovEntity(uint64(m.AgencyId))
	}
	if m.CreatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.UpdatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *Hotel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEntity(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.Star != 0 {
		n += 1 + sovEntity(uint64(m.Star))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.AgencyId != 0 {
		n += 1 + sovEntity(uint64(m.AgencyId))
	}
	if m.AddressId != 0 {
		n += 1 + sovEntity(uint64(m.AddressId))
	}
	if len(m.Images) > 0 {
		for _, s := range m.Images {
			l = len(s)
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if m.CreatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.UpdatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *Liveaboard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEntity(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.Length != 0 {
		n += 1 + sovEntity(uint64(m.Length))
	}
	if m.Width != 0 {
		n += 1 + sovEntity(uint64(m.Width))
	}
	if m.AgencyId != 0 {
		n += 1 + sovEntity(uint64(m.AgencyId))
	}
	if len(m.Images) > 0 {
		for _, s := range m.Images {
			l = len(s)
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if m.CreatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.UpdatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *Amenity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEntity(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.CreatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.UpdatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *RoomType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEntity(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.MaxGuest != 0 {
		n += 1 + sovEntity(uint64(m.MaxGuest))
	}
	if m.Price != 0 {
		n += 5
	}
	if m.Quantity != 0 {
		n += 1 + sovEntity(uint64(m.Quantity))
	}
	if m.HotelId != 0 {
		n += 1 + sovEntity(uint64(m.HotelId))
	}
	if m.LiveaboardId != 0 {
		n += 1 + sovEntity(uint64(m.LiveaboardId))
	}
	if len(m.Images) > 0 {
		for _, s := range m.Images {
			l = len(s)
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if m.CreatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.UpdatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *RoomAmenity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEntity(uint64(m.Id))
	}
	if m.RoomTypeId != 0 {
		n += 1 + sovEntity(uint64(m.RoomTypeId))
	}
	if m.AmenityId != 0 {
		n += 1 + sovEntity(uint64(m.AmenityId))
	}
	return n
}

func (m *Boat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEntity(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.AgencyId != 0 {
		n += 1 + sovEntity(uint64(m.AgencyId))
	}
	if len(m.Images) > 0 {
		for _, s := range m.Images {
			l = len(s)
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if m.CreatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.UpdatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *TripTemplate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEntity(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovEntity(uint64(m.Type))
	}
	if m.AgencyId != 0 {
		n += 1 + sovEntity(uint64(m.AgencyId))
	}
	if m.HotelId != 0 {
		n += 1 + sovEntity(uint64(m.HotelId))
	}
	if m.BoatId != 0 {
		n += 1 + sovEntity(uint64(m.BoatId))
	}
	if m.LiveaboardId != 0 {
		n += 1 + sovEntity(uint64(m.LiveaboardId))
	}
	if len(m.Images) > 0 {
		for _, s := range m.Images {
			l = len(s)
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if m.CreatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.UpdatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *Trip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEntity(uint64(m.Id))
	}
	if m.TemplateId != 0 {
		n += 1 + sovEntity(uint64(m.TemplateId))
	}
	if m.AgencyId != 0 {
		n += 1 + sovEntity(uint64(m.AgencyId))
	}
	if m.MaxGuest != 0 {
		n += 1 + sovEntity(uint64(m.MaxGuest))
	}
	if m.Price != 0 {
		n += 5
	}
	if m.FromDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.FromDate)
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.ToDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ToDate)
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.CreatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.UpdatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *DiveMaster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEntity(uint64(m.Id))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovEntity(uint64(m.Level))
	}
	if m.AgencyId != 0 {
		n += 1 + sovEntity(uint64(m.AgencyId))
	}
	if m.TripId != 0 {
		n += 1 + sovEntity(uint64(m.TripId))
	}
	if len(m.Documents) > 0 {
		for _, s := range m.Documents {
			l = len(s)
			n += 1 + l + sovEntity(uint64(l))
		}
	}
	if m.CreatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.UpdatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *Reservation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEntity(uint64(m.Id))
	}
	if m.TripId != 0 {
		n += 1 + sovEntity(uint64(m.TripId))
	}
	if m.DiverId != 0 {
		n += 1 + sovEntity(uint64(m.DiverId))
	}
	if m.CreatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.UpdatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *BookedRoom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEntity(uint64(m.Id))
	}
	if m.RoomTypeId != 0 {
		n += 1 + sovEntity(uint64(m.RoomTypeId))
	}
	if m.ReservationId != 0 {
		n += 1 + sovEntity(uint64(m.ReservationId))
	}
	if m.NoAdults != 0 {
		n += 1 + sovEntity(uint64(m.NoAdults))
	}
	if m.NoKids != 0 {
		n += 1 + sovEntity(uint64(m.NoKids))
	}
	if m.Quantity != 0 {
		n += 1 + sovEntity(uint64(m.Quantity))
	}
	return n
}

func (m *TripComment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEntity(uint64(m.Id))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.Star != 0 {
		n += 1 + sovEntity(uint64(m.Star))
	}
	if m.ReservationId != 0 {
		n += 1 + sovEntity(uint64(m.ReservationId))
	}
	if m.CreatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.UpdatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *HotelComment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEntity(uint64(m.Id))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.Star != 0 {
		n += 1 + sovEntity(uint64(m.Star))
	}
	if m.ReservationId != 0 {
		n += 1 + sovEntity(uint64(m.ReservationId))
	}
	if m.CreatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.UpdatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func (m *LiveaboardComment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEntity(uint64(m.Id))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.Star != 0 {
		n += 1 + sovEntity(uint64(m.Star))
	}
	if m.ReservationId != 0 {
		n += 1 + sovEntity(uint64(m.ReservationId))
	}
	if m.CreatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	if m.UpdatedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedOn)
		n += 1 + l + sovEntity(uint64(l))
	}
	return n
}

func sovEntity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEntity(x uint64) (n int) {
	return sovEntity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Account) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Account{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Verified:` + fmt.Sprintf("%v", this.Verified) + `,`,
		`Active:` + fmt.Sprintf("%v", this.Active) + `,`,
		`CreatedOn:` + strings.Replace(fmt.Sprintf("%v", this.CreatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`UpdatedOn:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Address) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Address{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`AddressLine_1:` + fmt.Sprintf("%v", this.AddressLine_1) + `,`,
		`AddressLine_2:` + fmt.Sprintf("%v", this.AddressLine_2) + `,`,
		`City:` + fmt.Sprintf("%v", this.City) + `,`,
		`Postcode:` + fmt.Sprintf("%v", this.Postcode) + `,`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`CreatedOn:` + strings.Replace(fmt.Sprintf("%v", this.CreatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`UpdatedOn:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Agency) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Agency{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`AccountId:` + fmt.Sprintf("%v", this.AccountId) + `,`,
		`AddressId:` + fmt.Sprintf("%v", this.AddressId) + `,`,
		`Documents:` + fmt.Sprintf("%v", this.Documents) + `,`,
		`CreatedOn:` + strings.Replace(fmt.Sprintf("%v", this.CreatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`UpdatedOn:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Diver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Diver{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`BirthDate:` + fmt.Sprintf("%v", this.BirthDate) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`AccountId:` + fmt.Sprintf("%v", this.AccountId) + `,`,
		`Documents:` + fmt.Sprintf("%v", this.Documents) + `,`,
		`CreatedOn:` + strings.Replace(fmt.Sprintf("%v", this.CreatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`UpdatedOn:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Staff) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Staff{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`Position:` + fmt.Sprintf("%v", this.Position) + `,`,
		`Gender:` + fmt.Sprintf("%v", this.Gender) + `,`,
		`AgencyId:` + fmt.Sprintf("%v", this.AgencyId) + `,`,
		`CreatedOn:` + strings.Replace(fmt.Sprintf("%v", this.CreatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`UpdatedOn:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Hotel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Hotel{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Star:` + fmt.Sprintf("%v", this.Star) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`AgencyId:` + fmt.Sprintf("%v", this.AgencyId) + `,`,
		`AddressId:` + fmt.Sprintf("%v", this.AddressId) + `,`,
		`Images:` + fmt.Sprintf("%v", this.Images) + `,`,
		`CreatedOn:` + strings.Replace(fmt.Sprintf("%v", this.CreatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`UpdatedOn:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Liveaboard) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Liveaboard{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Length:` + fmt.Sprintf("%v", this.Length) + `,`,
		`Width:` + fmt.Sprintf("%v", this.Width) + `,`,
		`AgencyId:` + fmt.Sprintf("%v", this.AgencyId) + `,`,
		`Images:` + fmt.Sprintf("%v", this.Images) + `,`,
		`CreatedOn:` + strings.Replace(fmt.Sprintf("%v", this.CreatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`UpdatedOn:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Amenity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Amenity{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`CreatedOn:` + strings.Replace(fmt.Sprintf("%v", this.CreatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`UpdatedOn:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoomType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoomType{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`MaxGuest:` + fmt.Sprintf("%v", this.MaxGuest) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`Quantity:` + fmt.Sprintf("%v", this.Quantity) + `,`,
		`HotelId:` + fmt.Sprintf("%v", this.HotelId) + `,`,
		`LiveaboardId:` + fmt.Sprintf("%v", this.LiveaboardId) + `,`,
		`Images:` + fmt.Sprintf("%v", this.Images) + `,`,
		`CreatedOn:` + strings.Replace(fmt.Sprintf("%v", this.CreatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`UpdatedOn:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoomAmenity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoomAmenity{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`RoomTypeId:` + fmt.Sprintf("%v", this.RoomTypeId) + `,`,
		`AmenityId:` + fmt.Sprintf("%v", this.AmenityId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Boat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Boat{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`AgencyId:` + fmt.Sprintf("%v", this.AgencyId) + `,`,
		`Images:` + fmt.Sprintf("%v", this.Images) + `,`,
		`CreatedOn:` + strings.Replace(fmt.Sprintf("%v", this.CreatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`UpdatedOn:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TripTemplate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TripTemplate{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`AgencyId:` + fmt.Sprintf("%v", this.AgencyId) + `,`,
		`HotelId:` + fmt.Sprintf("%v", this.HotelId) + `,`,
		`BoatId:` + fmt.Sprintf("%v", this.BoatId) + `,`,
		`LiveaboardId:` + fmt.Sprintf("%v", this.LiveaboardId) + `,`,
		`Images:` + fmt.Sprintf("%v", this.Images) + `,`,
		`CreatedOn:` + strings.Replace(fmt.Sprintf("%v", this.CreatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`UpdatedOn:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Trip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Trip{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`TemplateId:` + fmt.Sprintf("%v", this.TemplateId) + `,`,
		`AgencyId:` + fmt.Sprintf("%v", this.AgencyId) + `,`,
		`MaxGuest:` + fmt.Sprintf("%v", this.MaxGuest) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`FromDate:` + strings.Replace(fmt.Sprintf("%v", this.FromDate), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`ToDate:` + strings.Replace(fmt.Sprintf("%v", this.ToDate), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`CreatedOn:` + strings.Replace(fmt.Sprintf("%v", this.CreatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`UpdatedOn:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DiveMaster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DiveMaster{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`AgencyId:` + fmt.Sprintf("%v", this.AgencyId) + `,`,
		`TripId:` + fmt.Sprintf("%v", this.TripId) + `,`,
		`Documents:` + fmt.Sprintf("%v", this.Documents) + `,`,
		`CreatedOn:` + strings.Replace(fmt.Sprintf("%v", this.CreatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`UpdatedOn:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Reservation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Reservation{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`TripId:` + fmt.Sprintf("%v", this.TripId) + `,`,
		`DiverId:` + fmt.Sprintf("%v", this.DiverId) + `,`,
		`CreatedOn:` + strings.Replace(fmt.Sprintf("%v", this.CreatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`UpdatedOn:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BookedRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BookedRoom{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`RoomTypeId:` + fmt.Sprintf("%v", this.RoomTypeId) + `,`,
		`ReservationId:` + fmt.Sprintf("%v", this.ReservationId) + `,`,
		`NoAdults:` + fmt.Sprintf("%v", this.NoAdults) + `,`,
		`NoKids:` + fmt.Sprintf("%v", this.NoKids) + `,`,
		`Quantity:` + fmt.Sprintf("%v", this.Quantity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TripComment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TripComment{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Comment:` + fmt.Sprintf("%v", this.Comment) + `,`,
		`Star:` + fmt.Sprintf("%v", this.Star) + `,`,
		`ReservationId:` + fmt.Sprintf("%v", this.ReservationId) + `,`,
		`CreatedOn:` + strings.Replace(fmt.Sprintf("%v", this.CreatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`UpdatedOn:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HotelComment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HotelComment{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Comment:` + fmt.Sprintf("%v", this.Comment) + `,`,
		`Star:` + fmt.Sprintf("%v", this.Star) + `,`,
		`ReservationId:` + fmt.Sprintf("%v", this.ReservationId) + `,`,
		`CreatedOn:` + strings.Replace(fmt.Sprintf("%v", this.CreatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`UpdatedOn:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LiveaboardComment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LiveaboardComment{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Comment:` + fmt.Sprintf("%v", this.Comment) + `,`,
		`Star:` + fmt.Sprintf("%v", this.Star) + `,`,
		`ReservationId:` + fmt.Sprintf("%v", this.ReservationId) + `,`,
		`CreatedOn:` + strings.Replace(fmt.Sprintf("%v", this.CreatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`UpdatedOn:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedOn), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEntity(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Account) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= pb.AccountType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedOn == nil {
				m.CreatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedOn == nil {
				m.UpdatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Address) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressLine_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressLine_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressLine_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressLine_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Postcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Postcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedOn == nil {
				m.CreatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedOn == nil {
				m.UpdatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Staff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Staff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Staff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= pb.GenderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgencyId", wireType)
			}
			m.AgencyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgencyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedOn == nil {
				m.CreatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedOn == nil {
				m.UpdatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hotel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hotel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hotel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star", wireType)
			}
			m.Star = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgencyId", wireType)
			}
			m.AgencyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgencyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressId", wireType)
			}
			m.AddressId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddressId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedOn == nil {
				m.CreatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedOn == nil {
				m.UpdatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Liveaboard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Liveaboard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Liveaboard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgencyId", wireType)
			}
			m.AgencyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgencyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedOn == nil {
				m.CreatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedOn == nil {
				m.UpdatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Amenity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Amenity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Amenity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedOn == nil {
				m.CreatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedOn == nil {
				m.UpdatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGuest", wireType)
			}
			m.MaxGuest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxGuest |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Price = float32(math.Float32frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotelId", wireType)
			}
			m.HotelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HotelId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveaboardId", wireType)
			}
			m.LiveaboardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveaboardId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedOn == nil {
				m.CreatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedOn == nil {
				m.UpdatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAmenity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomAmenity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomAmenity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomTypeId", wireType)
			}
			m.RoomTypeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomTypeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmenityId", wireType)
			}
			m.AmenityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmenityId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Boat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Boat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Boat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgencyId", wireType)
			}
			m.AgencyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgencyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedOn == nil {
				m.CreatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedOn == nil {
				m.UpdatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TripTemplate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TripTemplate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TripTemplate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= pb.TripType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgencyId", wireType)
			}
			m.AgencyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgencyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotelId", wireType)
			}
			m.HotelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HotelId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoatId", wireType)
			}
			m.BoatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoatId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveaboardId", wireType)
			}
			m.LiveaboardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveaboardId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedOn == nil {
				m.CreatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedOn == nil {
				m.UpdatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Trip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateId", wireType)
			}
			m.TemplateId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TemplateId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgencyId", wireType)
			}
			m.AgencyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgencyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGuest", wireType)
			}
			m.MaxGuest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxGuest |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Price = float32(math.Float32frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FromDate == nil {
				m.FromDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.FromDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ToDate == nil {
				m.ToDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ToDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedOn == nil {
				m.CreatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedOn == nil {
				m.UpdatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiveMaster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiveMaster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiveMaster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= pb.LevelType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgencyId", wireType)
			}
			m.AgencyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgencyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TripId", wireType)
			}
			m.TripId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TripId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Documents = append(m.Documents, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedOn == nil {
				m.CreatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedOn == nil {
				m.UpdatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Reservation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reservation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reservation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TripId", wireType)
			}
			m.TripId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TripId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiverId", wireType)
			}
			m.DiverId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiverId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedOn == nil {
				m.CreatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedOn == nil {
				m.UpdatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BookedRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BookedRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BookedRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomTypeId", wireType)
			}
			m.RoomTypeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomTypeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservationId", wireType)
			}
			m.ReservationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReservationId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoAdults", wireType)
			}
			m.NoAdults = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoAdults |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoKids", wireType)
			}
			m.NoKids = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoKids |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TripComment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TripComment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TripComment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star", wireType)
			}
			m.Star = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservationId", wireType)
			}
			m.ReservationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReservationId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedOn == nil {
				m.CreatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedOn == nil {
				m.UpdatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HotelComment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HotelComment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HotelComment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star", wireType)
			}
			m.Star = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservationId", wireType)
			}
			m.ReservationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReservationId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedOn == nil {
				m.CreatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedOn == nil {
				m.UpdatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiveaboardComment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiveaboardComment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiveaboardComment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star", wireType)
			}
			m.Star = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservationId", wireType)
			}
			m.ReservationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReservationId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedOn == nil {
				m.CreatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedOn == nil {
				m.UpdatedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEntity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEntity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEntity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEntity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEntity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEntity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEntity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEntity = fmt.Errorf("proto: unexpected end of group")
)
