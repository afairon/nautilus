syntax = "proto3";

package agency;

import "model.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option go_package = "./pb";

service AgencyService {
    rpc AddDiveMaster(AddDiveMasterRequest) returns (google.protobuf.Empty);
    rpc AddStaff(AddStaffRequest) returns (google.protobuf.Empty);
    rpc AddTripTemplate(AddTripTemplateRequest) returns (google.protobuf.Empty);
    rpc AddTrip(AddTripRequest) returns (google.protobuf.Empty);
    rpc AddDivingBoat(AddDivingBoatRequest) returns (google.protobuf.Empty);
    rpc AddHotel(AddHotelRequest) returns (google.protobuf.Empty);
    rpc AddLiveaboard(AddLiveaboardRequest) returns (google.protobuf.Empty);

    rpc UpdateTrip(UpdateTripRequest) returns (google.protobuf.Empty);
    rpc UpdateHotel(UpdateHotelRequest) returns (google.protobuf.Empty);
    rpc UpdateLiveaboard(UpdateLiveaboardRequest) returns (google.protobuf.Empty);
    rpc UpdateBoat(UpdateBoatRequest) returns (google.protobuf.Empty);
    rpc UpdateDiveMaster(UpdateDiveMasterRequest) returns (google.protobuf.Empty);
    rpc UpdateStaff(UpdateStaffRequest) returns (google.protobuf.Empty);

    rpc ListBoats (ListBoatsRequest) returns (stream ListBoatsResponse);
    rpc ListDiveMasters (ListDiveMastersRequest) returns (stream ListDiveMastersResponse);
    rpc ListHotels (ListHotelsRequest) returns (stream ListHotelsResponse);
    rpc ListLiveaboards (ListLiveaboardsRequest) returns (stream ListLiveaboardsResponse);
    rpc ListStaffs (ListStaffsRequest) returns (stream ListStaffsResponse);
    rpc ListTripTemplates (ListTripTemplatesRequest) returns (stream ListTripTemplatesResponse);
    rpc ListTrips (ListTripsRequest) returns (stream ListTripsResponse);
    rpc ListTripsWithTemplates(ListTripsWithTemplatesRequest) returns (stream ListTripsWithTemplatesResponse);
    rpc ListRoomTypes(ListRoomTypesRequest) returns (stream ListRoomTypesResponse);

    rpc SearchTrips(SearchTripsRequest) returns (stream SearchTripsResponse);

    rpc GenerateCurrentTripsReport(GenerateCurrentTripsReportRequest) returns (stream GenerateCurrentTripsReportResponse);
    // GenerateYearlyEndedTripsReport generates reports for trips that have already ended
    rpc GenerateYearlyEndedTripsReport(GenerateEndedTripsReportRequest) returns (stream GenerateEndedTripsReportResponse);
}

message AddDiveMasterRequest {
    model.DiveMaster dive_master = 1;
}

message AddStaffRequest {
    model.Staff staff = 1;
}

message AddTripTemplateRequest {
    model.TripTemplate trip_template = 1;
    uint64 agency_id = 2;
}

message AddTripRequest {
    model.Trip trip = 1;
    model.TripTemplate trip_template = 2;
}

message AddDivingBoatRequest {
    model.Boat diving_boat = 1;
}

message AddHotelRequest {
    model.Hotel hotel = 1;
}

message AddLiveaboardRequest {
    model.Liveaboard liveaboard = 1;
}

// ListBoatsRequest
message ListBoatsRequest {
    uint64 limit = 1;
    uint64 offset = 2;
}

// ListBoatsResponse
message ListBoatsResponse {
    model.Boat boat = 1;
}

// ListDiveMastersRequest
message ListDiveMastersRequest {
    uint64 limit = 1;
    uint64 offset = 2;
}

// ListDiveMastersResponse
message ListDiveMastersResponse {
    model.DiveMaster dive_master = 1;
}

// ListHotelsRequest
message ListHotelsRequest {
    uint64 limit = 1;
    uint64 offset = 2;
}

// ListHotelsResponse
message ListHotelsResponse {
    model.Hotel hotel = 1;
}

// ListLiveaboardsRequest
message ListLiveaboardsRequest {
    uint64 limit = 1;
    uint64 offset = 2;
}

// ListLiveaboardsResponse
message ListLiveaboardsResponse {
    model.Liveaboard liveaboard = 1;
}

// ListStaffsRequest
message ListStaffsRequest {
    uint64 limit = 1;
    uint64 offset = 2;
}

// ListStaffsResponse
message ListStaffsResponse {
    model.Staff staff = 1;
}

// ListTripTemplatesRequest
message ListTripTemplatesRequest {
    uint64 limit = 1;
    uint64 offset = 2;
}

// ListTripTemplatesResponse
message ListTripTemplatesResponse {
    model.TripTemplate template = 1;
}

// ListTripsRequest
message ListTripsRequest {
    uint64 limit = 1;
    uint64 offset = 2;
}

// ListTripsResponse
message ListTripsResponse {
    model.Trip trip = 1;
}

// ListTripsWithTemplatesRequest
message ListTripsWithTemplatesRequest {
    uint64 limit = 1;
    uint64 offset = 2;
}

// ListTripsWithTemplatesResponse
message ListTripsWithTemplatesResponse {
    model.TripWithTemplate trip = 1;
}

// ListRoomTypesRequest
message ListRoomTypesRequest {
    oneof id {
        uint64 hotel_id = 1;
        uint64 liveaboard_id = 10;
    }
    uint64 limit = 20;
    uint64 offset = 25;
}

// ListRoomTypesResponse
message ListRoomTypesResponse {
    model.RoomType room_type = 1;
}

message SearchTripsOptions {
    // allow either country or city for location filtering
    oneof location_filter {
        string country = 1;
        string city = 2;
        string region = 3;
    }
    uint32 divers = 10;
    model.TripType trip_type = 15;
    google.protobuf.Timestamp start_date = 20 [(gogoproto.stdtime) = true];
    google.protobuf.Timestamp end_date = 30 [(gogoproto.stdtime) = true];
}

message SearchTripsRequest {
    SearchTripsOptions search_trips_options = 1;
    uint64 limit = 2;
    uint64 offset = 3;
}

message SearchTripsResponse {
    model.TripWithTemplate trip = 1;
}

message UpdateTripRequest {
    model.Trip trip = 10;
}

message UpdateHotelRequest {
    model.Hotel hotel = 10;
}

message UpdateLiveaboardRequest {
    model.Liveaboard liveaboard = 10;
}

message UpdateBoatRequest {
    model.Boat boat = 10;
}

message UpdateDiveMasterRequest {
    model.DiveMaster dive_master = 10;
}

message UpdateStaffRequest {
    model.Staff staff = 10;
}

message GenerateCurrentTripsReportRequest {
    uint64 limit = 1;
    uint64 offset = 2;
}

message GenerateCurrentTripsReportResponse {
    model.ReportTrip report = 1;
}

message GenerateEndedTripsReportRequest {
    uint64 limit = 1;
    uint64 offset = 2;
    uint32 years = 10;
}

message GenerateEndedTripsReportResponse {
    model.ReportTrip report = 1;
}