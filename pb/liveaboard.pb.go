// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: liveaboard.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetLiveaboardRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetLiveaboardRequest) Reset()      { *m = GetLiveaboardRequest{} }
func (*GetLiveaboardRequest) ProtoMessage() {}
func (*GetLiveaboardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d02d8246968ded8, []int{0}
}
func (m *GetLiveaboardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLiveaboardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLiveaboardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLiveaboardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLiveaboardRequest.Merge(m, src)
}
func (m *GetLiveaboardRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetLiveaboardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLiveaboardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLiveaboardRequest proto.InternalMessageInfo

func (m *GetLiveaboardRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetLiveaboardResponse struct {
	Liveabaord *Liveaboard `protobuf:"bytes,1,opt,name=liveabaord,proto3" json:"liveabaord,omitempty"`
}

func (m *GetLiveaboardResponse) Reset()      { *m = GetLiveaboardResponse{} }
func (*GetLiveaboardResponse) ProtoMessage() {}
func (*GetLiveaboardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d02d8246968ded8, []int{1}
}
func (m *GetLiveaboardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLiveaboardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLiveaboardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLiveaboardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLiveaboardResponse.Merge(m, src)
}
func (m *GetLiveaboardResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetLiveaboardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLiveaboardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLiveaboardResponse proto.InternalMessageInfo

func (m *GetLiveaboardResponse) GetLiveabaord() *Liveaboard {
	if m != nil {
		return m.Liveabaord
	}
	return nil
}

func init() {
	proto.RegisterType((*GetLiveaboardRequest)(nil), "liveaboard.GetLiveaboardRequest")
	proto.RegisterType((*GetLiveaboardResponse)(nil), "liveaboard.GetLiveaboardResponse")
}

func init() { proto.RegisterFile("liveaboard.proto", fileDescriptor_0d02d8246968ded8) }

var fileDescriptor_0d02d8246968ded8 = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0xc9, 0x2c, 0x4b,
	0x4d, 0x4c, 0xca, 0x4f, 0x2c, 0x4a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x48, 0x71, 0xe7, 0xe6, 0xa7, 0xa4, 0xe6, 0x40, 0x24, 0x94, 0xd4, 0xb8, 0x44, 0xdc, 0x53, 0x4b,
	0x7c, 0xe0, 0xb2, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x7c, 0x5c, 0x4c, 0x99, 0x29,
	0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x2c, 0x41, 0x4c, 0x99, 0x29, 0x4a, 0x5e, 0x5c, 0xa2, 0x68, 0xea,
	0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x0c, 0xb9, 0xa0, 0x66, 0x27, 0xe6, 0x17, 0x41, 0x34,
	0x70, 0x1b, 0x09, 0xea, 0x41, 0xac, 0x40, 0x52, 0x8e, 0xa4, 0xc8, 0x28, 0x93, 0x4b, 0x10, 0x21,
	0x13, 0x9c, 0x5a, 0x54, 0x96, 0x99, 0x9c, 0x2a, 0x14, 0xc2, 0xc5, 0x8b, 0x62, 0x81, 0x90, 0x82,
	0x1e, 0x92, 0x2f, 0xb0, 0xb9, 0x51, 0x4a, 0x11, 0x8f, 0x0a, 0x88, 0xeb, 0x9c, 0xac, 0x2e, 0x3c,
	0x94, 0x63, 0xb8, 0xf1, 0x50, 0x8e, 0xe1, 0xc3, 0x43, 0x39, 0xc6, 0x86, 0x47, 0x72, 0x8c, 0x2b,
	0x1e, 0xc9, 0x31, 0x9e, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c,
	0x2f, 0x1e, 0xc9, 0x31, 0x7c, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72,
	0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0xb1, 0xe8, 0xe9, 0x17, 0x24, 0x25, 0xb1, 0x81, 0x43, 0xc8,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x24, 0x2d, 0x9f, 0x10, 0x4e, 0x01, 0x00, 0x00,
}

func (this *GetLiveaboardRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetLiveaboardRequest)
	if !ok {
		that2, ok := that.(GetLiveaboardRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *GetLiveaboardResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetLiveaboardResponse)
	if !ok {
		that2, ok := that.(GetLiveaboardResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Liveabaord.Equal(that1.Liveabaord) {
		return false
	}
	return true
}
func (this *GetLiveaboardRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetLiveaboardRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetLiveaboardResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetLiveaboardResponse{")
	if this.Liveabaord != nil {
		s = append(s, "Liveabaord: "+fmt.Sprintf("%#v", this.Liveabaord)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLiveaboard(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LiveaboardServiceClient is the client API for LiveaboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LiveaboardServiceClient interface {
	GetLiveaboard(ctx context.Context, in *GetLiveaboardRequest, opts ...grpc.CallOption) (*GetLiveaboardResponse, error)
}

type liveaboardServiceClient struct {
	cc *grpc.ClientConn
}

func NewLiveaboardServiceClient(cc *grpc.ClientConn) LiveaboardServiceClient {
	return &liveaboardServiceClient{cc}
}

func (c *liveaboardServiceClient) GetLiveaboard(ctx context.Context, in *GetLiveaboardRequest, opts ...grpc.CallOption) (*GetLiveaboardResponse, error) {
	out := new(GetLiveaboardResponse)
	err := c.cc.Invoke(ctx, "/liveaboard.LiveaboardService/GetLiveaboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveaboardServiceServer is the server API for LiveaboardService service.
type LiveaboardServiceServer interface {
	GetLiveaboard(context.Context, *GetLiveaboardRequest) (*GetLiveaboardResponse, error)
}

// UnimplementedLiveaboardServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLiveaboardServiceServer struct {
}

func (*UnimplementedLiveaboardServiceServer) GetLiveaboard(ctx context.Context, req *GetLiveaboardRequest) (*GetLiveaboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveaboard not implemented")
}

func RegisterLiveaboardServiceServer(s *grpc.Server, srv LiveaboardServiceServer) {
	s.RegisterService(&_LiveaboardService_serviceDesc, srv)
}

func _LiveaboardService_GetLiveaboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveaboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveaboardServiceServer).GetLiveaboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liveaboard.LiveaboardService/GetLiveaboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveaboardServiceServer).GetLiveaboard(ctx, req.(*GetLiveaboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LiveaboardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "liveaboard.LiveaboardService",
	HandlerType: (*LiveaboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLiveaboard",
			Handler:    _LiveaboardService_GetLiveaboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "liveaboard.proto",
}

func (m *GetLiveaboardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLiveaboardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLiveaboardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintLiveaboard(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetLiveaboardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLiveaboardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLiveaboardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Liveabaord != nil {
		{
			size, err := m.Liveabaord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiveaboard(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLiveaboard(dAtA []byte, offset int, v uint64) int {
	offset -= sovLiveaboard(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetLiveaboardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiveaboard(uint64(m.Id))
	}
	return n
}

func (m *GetLiveaboardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Liveabaord != nil {
		l = m.Liveabaord.Size()
		n += 1 + l + sovLiveaboard(uint64(l))
	}
	return n
}

func sovLiveaboard(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLiveaboard(x uint64) (n int) {
	return sovLiveaboard(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetLiveaboardRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetLiveaboardRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetLiveaboardResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetLiveaboardResponse{`,
		`Liveabaord:` + strings.Replace(fmt.Sprintf("%v", this.Liveabaord), "Liveaboard", "Liveaboard", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLiveaboard(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetLiveaboardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiveaboard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLiveaboardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLiveaboardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiveaboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiveaboard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiveaboard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLiveaboardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiveaboard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLiveaboardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLiveaboardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liveabaord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiveaboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiveaboard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiveaboard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Liveabaord == nil {
				m.Liveabaord = &Liveaboard{}
			}
			if err := m.Liveabaord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiveaboard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiveaboard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLiveaboard(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLiveaboard
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiveaboard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiveaboard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLiveaboard
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLiveaboard
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLiveaboard
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLiveaboard        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLiveaboard          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLiveaboard = fmt.Errorf("proto: unexpected end of group")
)
