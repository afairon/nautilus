// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comment.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CreateCommentRequest
type CreateCommentRequest struct {
	// type defines type of comment
	//
	// Types that are valid to be assigned to Type:
	//	*CreateCommentRequest_Trip
	//	*CreateCommentRequest_Hotel
	//	*CreateCommentRequest_Liveaboard
	Type isCreateCommentRequest_Type `protobuf_oneof:"type"`
}

func (m *CreateCommentRequest) Reset()      { *m = CreateCommentRequest{} }
func (*CreateCommentRequest) ProtoMessage() {}
func (*CreateCommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_749aee09ea917828, []int{0}
}
func (m *CreateCommentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateCommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateCommentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateCommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCommentRequest.Merge(m, src)
}
func (m *CreateCommentRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateCommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCommentRequest proto.InternalMessageInfo

type isCreateCommentRequest_Type interface {
	isCreateCommentRequest_Type()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateCommentRequest_Trip struct {
	Trip *TripComment `protobuf:"bytes,1,opt,name=trip,proto3,oneof" json:"trip,omitempty"`
}
type CreateCommentRequest_Hotel struct {
	Hotel *HotelComment `protobuf:"bytes,5,opt,name=hotel,proto3,oneof" json:"hotel,omitempty"`
}
type CreateCommentRequest_Liveaboard struct {
	Liveaboard *LiveaboardComment `protobuf:"bytes,10,opt,name=liveaboard,proto3,oneof" json:"liveaboard,omitempty"`
}

func (*CreateCommentRequest_Trip) isCreateCommentRequest_Type()       {}
func (*CreateCommentRequest_Hotel) isCreateCommentRequest_Type()      {}
func (*CreateCommentRequest_Liveaboard) isCreateCommentRequest_Type() {}

func (m *CreateCommentRequest) GetType() isCreateCommentRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *CreateCommentRequest) GetTrip() *TripComment {
	if x, ok := m.GetType().(*CreateCommentRequest_Trip); ok {
		return x.Trip
	}
	return nil
}

func (m *CreateCommentRequest) GetHotel() *HotelComment {
	if x, ok := m.GetType().(*CreateCommentRequest_Hotel); ok {
		return x.Hotel
	}
	return nil
}

func (m *CreateCommentRequest) GetLiveaboard() *LiveaboardComment {
	if x, ok := m.GetType().(*CreateCommentRequest_Liveaboard); ok {
		return x.Liveaboard
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateCommentRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateCommentRequest_Trip)(nil),
		(*CreateCommentRequest_Hotel)(nil),
		(*CreateCommentRequest_Liveaboard)(nil),
	}
}

// CreateCommentResponse
type CreateCommentResponse struct {
	// type defines type of comment
	//
	// Types that are valid to be assigned to Type:
	//	*CreateCommentResponse_Trip
	//	*CreateCommentResponse_Hotel
	//	*CreateCommentResponse_Liveaboard
	Type isCreateCommentResponse_Type `protobuf_oneof:"type"`
}

func (m *CreateCommentResponse) Reset()      { *m = CreateCommentResponse{} }
func (*CreateCommentResponse) ProtoMessage() {}
func (*CreateCommentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_749aee09ea917828, []int{1}
}
func (m *CreateCommentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateCommentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateCommentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateCommentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCommentResponse.Merge(m, src)
}
func (m *CreateCommentResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateCommentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCommentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCommentResponse proto.InternalMessageInfo

type isCreateCommentResponse_Type interface {
	isCreateCommentResponse_Type()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateCommentResponse_Trip struct {
	Trip *TripComment `protobuf:"bytes,1,opt,name=trip,proto3,oneof" json:"trip,omitempty"`
}
type CreateCommentResponse_Hotel struct {
	Hotel *HotelComment `protobuf:"bytes,5,opt,name=hotel,proto3,oneof" json:"hotel,omitempty"`
}
type CreateCommentResponse_Liveaboard struct {
	Liveaboard *LiveaboardComment `protobuf:"bytes,10,opt,name=liveaboard,proto3,oneof" json:"liveaboard,omitempty"`
}

func (*CreateCommentResponse_Trip) isCreateCommentResponse_Type()       {}
func (*CreateCommentResponse_Hotel) isCreateCommentResponse_Type()      {}
func (*CreateCommentResponse_Liveaboard) isCreateCommentResponse_Type() {}

func (m *CreateCommentResponse) GetType() isCreateCommentResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *CreateCommentResponse) GetTrip() *TripComment {
	if x, ok := m.GetType().(*CreateCommentResponse_Trip); ok {
		return x.Trip
	}
	return nil
}

func (m *CreateCommentResponse) GetHotel() *HotelComment {
	if x, ok := m.GetType().(*CreateCommentResponse_Hotel); ok {
		return x.Hotel
	}
	return nil
}

func (m *CreateCommentResponse) GetLiveaboard() *LiveaboardComment {
	if x, ok := m.GetType().(*CreateCommentResponse_Liveaboard); ok {
		return x.Liveaboard
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateCommentResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateCommentResponse_Trip)(nil),
		(*CreateCommentResponse_Hotel)(nil),
		(*CreateCommentResponse_Liveaboard)(nil),
	}
}

// DeleteCommentRequest
type DeleteCommentRequest struct {
	// Types that are valid to be assigned to Type:
	//	*DeleteCommentRequest_Trip
	//	*DeleteCommentRequest_Hotel
	//	*DeleteCommentRequest_Liveaboard
	Type isDeleteCommentRequest_Type `protobuf_oneof:"type"`
}

func (m *DeleteCommentRequest) Reset()      { *m = DeleteCommentRequest{} }
func (*DeleteCommentRequest) ProtoMessage() {}
func (*DeleteCommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_749aee09ea917828, []int{2}
}
func (m *DeleteCommentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCommentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteCommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCommentRequest.Merge(m, src)
}
func (m *DeleteCommentRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCommentRequest proto.InternalMessageInfo

type isDeleteCommentRequest_Type interface {
	isDeleteCommentRequest_Type()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DeleteCommentRequest_Trip struct {
	Trip *TripComment `protobuf:"bytes,1,opt,name=trip,proto3,oneof" json:"trip,omitempty"`
}
type DeleteCommentRequest_Hotel struct {
	Hotel *HotelComment `protobuf:"bytes,5,opt,name=hotel,proto3,oneof" json:"hotel,omitempty"`
}
type DeleteCommentRequest_Liveaboard struct {
	Liveaboard *LiveaboardComment `protobuf:"bytes,10,opt,name=liveaboard,proto3,oneof" json:"liveaboard,omitempty"`
}

func (*DeleteCommentRequest_Trip) isDeleteCommentRequest_Type()       {}
func (*DeleteCommentRequest_Hotel) isDeleteCommentRequest_Type()      {}
func (*DeleteCommentRequest_Liveaboard) isDeleteCommentRequest_Type() {}

func (m *DeleteCommentRequest) GetType() isDeleteCommentRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *DeleteCommentRequest) GetTrip() *TripComment {
	if x, ok := m.GetType().(*DeleteCommentRequest_Trip); ok {
		return x.Trip
	}
	return nil
}

func (m *DeleteCommentRequest) GetHotel() *HotelComment {
	if x, ok := m.GetType().(*DeleteCommentRequest_Hotel); ok {
		return x.Hotel
	}
	return nil
}

func (m *DeleteCommentRequest) GetLiveaboard() *LiveaboardComment {
	if x, ok := m.GetType().(*DeleteCommentRequest_Liveaboard); ok {
		return x.Liveaboard
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DeleteCommentRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DeleteCommentRequest_Trip)(nil),
		(*DeleteCommentRequest_Hotel)(nil),
		(*DeleteCommentRequest_Liveaboard)(nil),
	}
}

func init() {
	proto.RegisterType((*CreateCommentRequest)(nil), "comment.CreateCommentRequest")
	proto.RegisterType((*CreateCommentResponse)(nil), "comment.CreateCommentResponse")
	proto.RegisterType((*DeleteCommentRequest)(nil), "comment.DeleteCommentRequest")
}

func init() { proto.RegisterFile("comment.proto", fileDescriptor_749aee09ea917828) }

var fileDescriptor_749aee09ea917828 = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x92, 0xbd, 0x4e, 0x02, 0x41,
	0x14, 0x85, 0x67, 0x12, 0xc0, 0x64, 0x08, 0x16, 0xe3, 0x4f, 0x36, 0x6b, 0xbc, 0x31, 0x5b, 0x91,
	0x98, 0x0c, 0x09, 0x76, 0x94, 0xa0, 0x09, 0x85, 0x85, 0x41, 0x2b, 0x3b, 0x16, 0xae, 0xb8, 0xc9,
	0x2e, 0x33, 0x2e, 0x03, 0x09, 0x9d, 0x8f, 0xe0, 0x63, 0x58, 0xd8, 0xe8, 0x53, 0x58, 0x52, 0x52,
	0xca, 0xd0, 0x58, 0xf2, 0x08, 0x66, 0x77, 0x16, 0x01, 0x83, 0xbd, 0x96, 0x73, 0xef, 0x77, 0x4e,
	0x6e, 0xce, 0x1c, 0x56, 0xea, 0xc8, 0x28, 0xc2, 0xbe, 0x16, 0x2a, 0x96, 0x5a, 0xf2, 0x9d, 0xec,
	0xe9, 0x16, 0x23, 0xd9, 0xc5, 0xd0, 0x4e, 0xdd, 0xa3, 0x9e, 0x94, 0xbd, 0x10, 0x2b, 0xe9, 0xcb,
	0x1f, 0xde, 0x55, 0x30, 0x52, 0x7a, 0x6c, 0x97, 0xde, 0x2b, 0x65, 0xfb, 0x8d, 0x18, 0xdb, 0x1a,
	0x1b, 0x56, 0xdb, 0xc2, 0x87, 0x21, 0x0e, 0x34, 0x2f, 0xb3, 0x9c, 0x8e, 0x03, 0xe5, 0xd0, 0x13,
	0x5a, 0x2e, 0x56, 0xb9, 0xb0, 0x8e, 0x37, 0x71, 0xa0, 0x32, 0xb0, 0x49, 0x5a, 0x29, 0xc1, 0x4f,
	0x59, 0xfe, 0x5e, 0x6a, 0x0c, 0x9d, 0x7c, 0x8a, 0xee, 0x65, 0x68, 0x33, 0x99, 0xad, 0x58, 0xcb,
	0xf0, 0x1a, 0x63, 0x61, 0x30, 0xc2, 0xb6, 0x2f, 0xdb, 0x71, 0xd7, 0x61, 0xa9, 0xc2, 0xc9, 0x14,
	0x97, 0xdf, 0x8b, 0x95, 0x6c, 0x8d, 0xae, 0x17, 0x58, 0x4e, 0x8f, 0x15, 0x7a, 0x6f, 0x94, 0x1d,
	0xfc, 0xb8, 0x79, 0xa0, 0x64, 0x7f, 0x80, 0x7f, 0xf9, 0xe8, 0x24, 0xe8, 0x73, 0x0c, 0xf1, 0x1f,
	0x05, 0x5d, 0x7d, 0xa1, 0x6c, 0x37, 0x23, 0xae, 0x31, 0x1e, 0x05, 0x1d, 0xe4, 0x57, 0xac, 0xb4,
	0x11, 0x3d, 0x3f, 0x16, 0xcb, 0x0e, 0x6e, 0xab, 0x91, 0x0b, 0xbf, 0xad, 0xed, 0x8f, 0x79, 0x84,
	0x37, 0x59, 0x69, 0x23, 0x97, 0x35, 0xc7, 0x6d, 0x79, 0xb9, 0x87, 0xc2, 0xf6, 0x59, 0x2c, 0xfb,
	0x2c, 0x2e, 0x92, 0x3e, 0x7b, 0xa4, 0x5e, 0x9b, 0xcc, 0x80, 0x4c, 0x67, 0x40, 0x16, 0x33, 0xa0,
	0x8f, 0x06, 0xe8, 0xb3, 0x01, 0xfa, 0x6e, 0x80, 0x4e, 0x0c, 0xd0, 0x0f, 0x03, 0xf4, 0xd3, 0x00,
	0x59, 0x18, 0xa0, 0x4f, 0x73, 0x20, 0x93, 0x39, 0x90, 0xe9, 0x1c, 0xc8, 0x6d, 0x4e, 0x54, 0x94,
	0xef, 0x17, 0x52, 0xb7, 0xb3, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x31, 0xb5, 0xc4, 0x08, 0x52,
	0x03, 0x00, 0x00,
}

func (this *CreateCommentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateCommentRequest)
	if !ok {
		that2, ok := that.(CreateCommentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Type == nil {
		if this.Type != nil {
			return false
		}
	} else if this.Type == nil {
		return false
	} else if !this.Type.Equal(that1.Type) {
		return false
	}
	return true
}
func (this *CreateCommentRequest_Trip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateCommentRequest_Trip)
	if !ok {
		that2, ok := that.(CreateCommentRequest_Trip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Trip.Equal(that1.Trip) {
		return false
	}
	return true
}
func (this *CreateCommentRequest_Hotel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateCommentRequest_Hotel)
	if !ok {
		that2, ok := that.(CreateCommentRequest_Hotel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Hotel.Equal(that1.Hotel) {
		return false
	}
	return true
}
func (this *CreateCommentRequest_Liveaboard) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateCommentRequest_Liveaboard)
	if !ok {
		that2, ok := that.(CreateCommentRequest_Liveaboard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Liveaboard.Equal(that1.Liveaboard) {
		return false
	}
	return true
}
func (this *CreateCommentResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateCommentResponse)
	if !ok {
		that2, ok := that.(CreateCommentResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Type == nil {
		if this.Type != nil {
			return false
		}
	} else if this.Type == nil {
		return false
	} else if !this.Type.Equal(that1.Type) {
		return false
	}
	return true
}
func (this *CreateCommentResponse_Trip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateCommentResponse_Trip)
	if !ok {
		that2, ok := that.(CreateCommentResponse_Trip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Trip.Equal(that1.Trip) {
		return false
	}
	return true
}
func (this *CreateCommentResponse_Hotel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateCommentResponse_Hotel)
	if !ok {
		that2, ok := that.(CreateCommentResponse_Hotel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Hotel.Equal(that1.Hotel) {
		return false
	}
	return true
}
func (this *CreateCommentResponse_Liveaboard) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateCommentResponse_Liveaboard)
	if !ok {
		that2, ok := that.(CreateCommentResponse_Liveaboard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Liveaboard.Equal(that1.Liveaboard) {
		return false
	}
	return true
}
func (this *DeleteCommentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteCommentRequest)
	if !ok {
		that2, ok := that.(DeleteCommentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Type == nil {
		if this.Type != nil {
			return false
		}
	} else if this.Type == nil {
		return false
	} else if !this.Type.Equal(that1.Type) {
		return false
	}
	return true
}
func (this *DeleteCommentRequest_Trip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteCommentRequest_Trip)
	if !ok {
		that2, ok := that.(DeleteCommentRequest_Trip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Trip.Equal(that1.Trip) {
		return false
	}
	return true
}
func (this *DeleteCommentRequest_Hotel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteCommentRequest_Hotel)
	if !ok {
		that2, ok := that.(DeleteCommentRequest_Hotel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Hotel.Equal(that1.Hotel) {
		return false
	}
	return true
}
func (this *DeleteCommentRequest_Liveaboard) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteCommentRequest_Liveaboard)
	if !ok {
		that2, ok := that.(DeleteCommentRequest_Liveaboard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Liveaboard.Equal(that1.Liveaboard) {
		return false
	}
	return true
}
func (this *CreateCommentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CreateCommentRequest{")
	if this.Type != nil {
		s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateCommentRequest_Trip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.CreateCommentRequest_Trip{` +
		`Trip:` + fmt.Sprintf("%#v", this.Trip) + `}`}, ", ")
	return s
}
func (this *CreateCommentRequest_Hotel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.CreateCommentRequest_Hotel{` +
		`Hotel:` + fmt.Sprintf("%#v", this.Hotel) + `}`}, ", ")
	return s
}
func (this *CreateCommentRequest_Liveaboard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.CreateCommentRequest_Liveaboard{` +
		`Liveaboard:` + fmt.Sprintf("%#v", this.Liveaboard) + `}`}, ", ")
	return s
}
func (this *CreateCommentResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CreateCommentResponse{")
	if this.Type != nil {
		s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateCommentResponse_Trip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.CreateCommentResponse_Trip{` +
		`Trip:` + fmt.Sprintf("%#v", this.Trip) + `}`}, ", ")
	return s
}
func (this *CreateCommentResponse_Hotel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.CreateCommentResponse_Hotel{` +
		`Hotel:` + fmt.Sprintf("%#v", this.Hotel) + `}`}, ", ")
	return s
}
func (this *CreateCommentResponse_Liveaboard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.CreateCommentResponse_Liveaboard{` +
		`Liveaboard:` + fmt.Sprintf("%#v", this.Liveaboard) + `}`}, ", ")
	return s
}
func (this *DeleteCommentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.DeleteCommentRequest{")
	if this.Type != nil {
		s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteCommentRequest_Trip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.DeleteCommentRequest_Trip{` +
		`Trip:` + fmt.Sprintf("%#v", this.Trip) + `}`}, ", ")
	return s
}
func (this *DeleteCommentRequest_Hotel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.DeleteCommentRequest_Hotel{` +
		`Hotel:` + fmt.Sprintf("%#v", this.Hotel) + `}`}, ", ")
	return s
}
func (this *DeleteCommentRequest_Liveaboard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.DeleteCommentRequest_Liveaboard{` +
		`Liveaboard:` + fmt.Sprintf("%#v", this.Liveaboard) + `}`}, ", ")
	return s
}
func valueToGoStringComment(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommentServiceClient is the client API for CommentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommentServiceClient interface {
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type commentServiceClient struct {
	cc *grpc.ClientConn
}

func NewCommentServiceClient(cc *grpc.ClientConn) CommentServiceClient {
	return &commentServiceClient{cc}
}

func (c *commentServiceClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error) {
	out := new(CreateCommentResponse)
	err := c.cc.Invoke(ctx, "/comment.CommentService/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/comment.CommentService/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServiceServer is the server API for CommentService service.
type CommentServiceServer interface {
	CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*empty.Empty, error)
}

// UnimplementedCommentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCommentServiceServer struct {
}

func (*UnimplementedCommentServiceServer) CreateComment(ctx context.Context, req *CreateCommentRequest) (*CreateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (*UnimplementedCommentServiceServer) DeleteComment(ctx context.Context, req *DeleteCommentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}

func RegisterCommentServiceServer(s *grpc.Server, srv CommentServiceServer) {
	s.RegisterService(&_CommentService_serviceDesc, srv)
}

func _CommentService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.CommentService/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.CommentService/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comment.CommentService",
	HandlerType: (*CommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateComment",
			Handler:    _CommentService_CreateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _CommentService_DeleteComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comment.proto",
}

func (m *CreateCommentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCommentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateCommentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size := m.Type.Size()
			i -= size
			if _, err := m.Type.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateCommentRequest_Trip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateCommentRequest_Trip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Trip != nil {
		{
			size, err := m.Trip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *CreateCommentRequest_Hotel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateCommentRequest_Hotel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Hotel != nil {
		{
			size, err := m.Hotel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CreateCommentRequest_Liveaboard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateCommentRequest_Liveaboard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Liveaboard != nil {
		{
			size, err := m.Liveaboard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *CreateCommentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCommentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateCommentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size := m.Type.Size()
			i -= size
			if _, err := m.Type.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateCommentResponse_Trip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateCommentResponse_Trip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Trip != nil {
		{
			size, err := m.Trip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *CreateCommentResponse_Hotel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateCommentResponse_Hotel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Hotel != nil {
		{
			size, err := m.Hotel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *CreateCommentResponse_Liveaboard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateCommentResponse_Liveaboard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Liveaboard != nil {
		{
			size, err := m.Liveaboard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *DeleteCommentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCommentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteCommentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size := m.Type.Size()
			i -= size
			if _, err := m.Type.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeleteCommentRequest_Trip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteCommentRequest_Trip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Trip != nil {
		{
			size, err := m.Trip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *DeleteCommentRequest_Hotel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteCommentRequest_Hotel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Hotel != nil {
		{
			size, err := m.Hotel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *DeleteCommentRequest_Liveaboard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteCommentRequest_Liveaboard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Liveaboard != nil {
		{
			size, err := m.Liveaboard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintComment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func encodeVarintComment(dAtA []byte, offset int, v uint64) int {
	offset -= sovComment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateCommentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	return n
}

func (m *CreateCommentRequest_Trip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Trip != nil {
		l = m.Trip.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	return n
}
func (m *CreateCommentRequest_Hotel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hotel != nil {
		l = m.Hotel.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	return n
}
func (m *CreateCommentRequest_Liveaboard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Liveaboard != nil {
		l = m.Liveaboard.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	return n
}
func (m *CreateCommentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	return n
}

func (m *CreateCommentResponse_Trip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Trip != nil {
		l = m.Trip.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	return n
}
func (m *CreateCommentResponse_Hotel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hotel != nil {
		l = m.Hotel.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	return n
}
func (m *CreateCommentResponse_Liveaboard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Liveaboard != nil {
		l = m.Liveaboard.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	return n
}
func (m *DeleteCommentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	return n
}

func (m *DeleteCommentRequest_Trip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Trip != nil {
		l = m.Trip.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	return n
}
func (m *DeleteCommentRequest_Hotel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hotel != nil {
		l = m.Hotel.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	return n
}
func (m *DeleteCommentRequest_Liveaboard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Liveaboard != nil {
		l = m.Liveaboard.Size()
		n += 1 + l + sovComment(uint64(l))
	}
	return n
}

func sovComment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozComment(x uint64) (n int) {
	return sovComment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateCommentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateCommentRequest{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateCommentRequest_Trip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateCommentRequest_Trip{`,
		`Trip:` + strings.Replace(fmt.Sprintf("%v", this.Trip), "TripComment", "TripComment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateCommentRequest_Hotel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateCommentRequest_Hotel{`,
		`Hotel:` + strings.Replace(fmt.Sprintf("%v", this.Hotel), "HotelComment", "HotelComment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateCommentRequest_Liveaboard) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateCommentRequest_Liveaboard{`,
		`Liveaboard:` + strings.Replace(fmt.Sprintf("%v", this.Liveaboard), "LiveaboardComment", "LiveaboardComment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateCommentResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateCommentResponse{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateCommentResponse_Trip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateCommentResponse_Trip{`,
		`Trip:` + strings.Replace(fmt.Sprintf("%v", this.Trip), "TripComment", "TripComment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateCommentResponse_Hotel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateCommentResponse_Hotel{`,
		`Hotel:` + strings.Replace(fmt.Sprintf("%v", this.Hotel), "HotelComment", "HotelComment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateCommentResponse_Liveaboard) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateCommentResponse_Liveaboard{`,
		`Liveaboard:` + strings.Replace(fmt.Sprintf("%v", this.Liveaboard), "LiveaboardComment", "LiveaboardComment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteCommentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteCommentRequest{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteCommentRequest_Trip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteCommentRequest_Trip{`,
		`Trip:` + strings.Replace(fmt.Sprintf("%v", this.Trip), "TripComment", "TripComment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteCommentRequest_Hotel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteCommentRequest_Hotel{`,
		`Hotel:` + strings.Replace(fmt.Sprintf("%v", this.Hotel), "HotelComment", "HotelComment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteCommentRequest_Liveaboard) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteCommentRequest_Liveaboard{`,
		`Liveaboard:` + strings.Replace(fmt.Sprintf("%v", this.Liveaboard), "LiveaboardComment", "LiveaboardComment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringComment(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateCommentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCommentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCommentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TripComment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &CreateCommentRequest_Trip{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hotel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HotelComment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &CreateCommentRequest_Hotel{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liveaboard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LiveaboardComment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &CreateCommentRequest_Liveaboard{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCommentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCommentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCommentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TripComment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &CreateCommentResponse_Trip{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hotel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HotelComment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &CreateCommentResponse_Hotel{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liveaboard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LiveaboardComment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &CreateCommentResponse_Liveaboard{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCommentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCommentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCommentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TripComment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &DeleteCommentRequest_Trip{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hotel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HotelComment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &DeleteCommentRequest_Hotel{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liveaboard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LiveaboardComment{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &DeleteCommentRequest_Liveaboard{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthComment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupComment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthComment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthComment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupComment = fmt.Errorf("proto: unexpected end of group")
)
