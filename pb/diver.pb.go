// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: diver.proto

package pb

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Diver struct {
	FirstName   string `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName    string `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	PhoneNumber string `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	FrontLink   string `protobuf:"bytes,4,opt,name=front_link,json=frontLink,proto3" json:"front_link,omitempty"`
	BackLink    string `protobuf:"bytes,5,opt,name=back_link,json=backLink,proto3" json:"back_link,omitempty"`
	FrontImage  []byte `protobuf:"bytes,6,opt,name=front_image,json=frontImage,proto3" json:"front_image,omitempty"`
	BackImage   []byte `protobuf:"bytes,7,opt,name=back_image,json=backImage,proto3" json:"back_image,omitempty"`
	BirthDate   uint32 `protobuf:"varint,8,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`
	Level       Level  `protobuf:"varint,9,opt,name=level,proto3,enum=common.Level" json:"level,omitempty"`
}

func (m *Diver) Reset()      { *m = Diver{} }
func (*Diver) ProtoMessage() {}
func (*Diver) Descriptor() ([]byte, []int) {
	return fileDescriptor_765ae613bf716c8b, []int{0}
}
func (m *Diver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Diver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Diver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Diver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Diver.Merge(m, src)
}
func (m *Diver) XXX_Size() int {
	return m.Size()
}
func (m *Diver) XXX_DiscardUnknown() {
	xxx_messageInfo_Diver.DiscardUnknown(m)
}

var xxx_messageInfo_Diver proto.InternalMessageInfo

func (m *Diver) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Diver) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Diver) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *Diver) GetFrontLink() string {
	if m != nil {
		return m.FrontLink
	}
	return ""
}

func (m *Diver) GetBackLink() string {
	if m != nil {
		return m.BackLink
	}
	return ""
}

func (m *Diver) GetFrontImage() []byte {
	if m != nil {
		return m.FrontImage
	}
	return nil
}

func (m *Diver) GetBackImage() []byte {
	if m != nil {
		return m.BackImage
	}
	return nil
}

func (m *Diver) GetBirthDate() uint32 {
	if m != nil {
		return m.BirthDate
	}
	return 0
}

func (m *Diver) GetLevel() Level {
	if m != nil {
		return m.Level
	}
	return INSTRUCTOR
}

func init() {
	proto.RegisterType((*Diver)(nil), "diver.Diver")
}

func init() { proto.RegisterFile("diver.proto", fileDescriptor_765ae613bf716c8b) }

var fileDescriptor_765ae613bf716c8b = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0xb1, 0x4e, 0x32, 0x41,
	0x14, 0x46, 0xf7, 0xf2, 0xb3, 0xfc, 0xec, 0x00, 0x16, 0x5b, 0x6d, 0x34, 0x5e, 0x57, 0x6d, 0xb6,
	0xc2, 0x44, 0x3b, 0x4b, 0x43, 0x63, 0x42, 0x28, 0xb6, 0xb4, 0xd9, 0xcc, 0xc2, 0x28, 0x1b, 0x76,
	0x67, 0xc8, 0x38, 0x52, 0xfb, 0x08, 0x3e, 0x85, 0xf1, 0x51, 0x2c, 0x29, 0x29, 0x65, 0x68, 0x2c,
	0x79, 0x04, 0x33, 0x77, 0x30, 0x96, 0xf7, 0x9c, 0xdc, 0x53, 0x7c, 0xac, 0x37, 0xab, 0x56, 0x42,
	0x0f, 0x97, 0x5a, 0x19, 0x15, 0x87, 0x74, 0x1c, 0xf7, 0xa7, 0xaa, 0x69, 0x94, 0xf4, 0xf0, 0xe2,
	0xbd, 0xc5, 0xc2, 0x91, 0xe3, 0xf1, 0x29, 0x63, 0x8f, 0x95, 0x7e, 0x36, 0x85, 0xe4, 0x8d, 0x48,
	0x20, 0x85, 0x2c, 0xca, 0x23, 0x22, 0x13, 0xde, 0x88, 0xf8, 0x84, 0x45, 0x35, 0xff, 0xb5, 0x2d,
	0xb2, 0x5d, 0x07, 0x48, 0x9e, 0xb3, 0xfe, 0x72, 0xae, 0xa4, 0x28, 0xe4, 0x4b, 0x53, 0x0a, 0x9d,
	0xfc, 0x23, 0xdf, 0x23, 0x36, 0x21, 0x44, 0x79, 0xad, 0xa4, 0x29, 0xea, 0x4a, 0x2e, 0x92, 0xf6,
	0x21, 0xef, 0xc8, 0xb8, 0x92, 0x0b, 0x97, 0x2f, 0xf9, 0x74, 0xe1, 0x6d, 0xe8, 0xf3, 0x0e, 0x90,
	0x3c, 0x63, 0x3d, 0xff, 0x5b, 0x35, 0xfc, 0x49, 0x24, 0x9d, 0x14, 0xb2, 0x7e, 0xee, 0x73, 0xf7,
	0x8e, 0xb8, 0x38, 0x7d, 0x7b, 0xff, 0x9f, 0x3c, 0xf5, 0xfe, 0x74, 0xa5, 0xcd, 0xbc, 0x98, 0x71,
	0x23, 0x92, 0x6e, 0x0a, 0xd9, 0x20, 0x8f, 0x88, 0x8c, 0xb8, 0x11, 0xf1, 0x25, 0x0b, 0x6b, 0xb1,
	0x12, 0x75, 0x12, 0xa5, 0x90, 0x1d, 0x5d, 0x0f, 0x86, 0x87, 0x85, 0xc6, 0x0e, 0xe6, 0xde, 0xdd,
	0xdd, 0xae, 0xb7, 0x18, 0x6c, 0xb6, 0x18, 0xec, 0xb7, 0x08, 0xaf, 0x16, 0xe1, 0xc3, 0x22, 0x7c,
	0x5a, 0x84, 0xb5, 0x45, 0xf8, 0xb2, 0x08, 0xdf, 0x16, 0x83, 0xbd, 0x45, 0x78, 0xdb, 0x61, 0xb0,
	0xde, 0x61, 0xb0, 0xd9, 0x61, 0xf0, 0xd0, 0x1e, 0x5e, 0x2d, 0xcb, 0xb2, 0x43, 0x5b, 0xdf, 0xfc,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x68, 0x55, 0xc3, 0x43, 0x8f, 0x01, 0x00, 0x00,
}

func (this *Diver) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Diver)
	if !ok {
		that2, ok := that.(Diver)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	if this.FrontLink != that1.FrontLink {
		return false
	}
	if this.BackLink != that1.BackLink {
		return false
	}
	if !bytes.Equal(this.FrontImage, that1.FrontImage) {
		return false
	}
	if !bytes.Equal(this.BackImage, that1.BackImage) {
		return false
	}
	if this.BirthDate != that1.BirthDate {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	return true
}
func (this *Diver) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&pb.Diver{")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "FrontLink: "+fmt.Sprintf("%#v", this.FrontLink)+",\n")
	s = append(s, "BackLink: "+fmt.Sprintf("%#v", this.BackLink)+",\n")
	s = append(s, "FrontImage: "+fmt.Sprintf("%#v", this.FrontImage)+",\n")
	s = append(s, "BackImage: "+fmt.Sprintf("%#v", this.BackImage)+",\n")
	s = append(s, "BirthDate: "+fmt.Sprintf("%#v", this.BirthDate)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDiver(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Diver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Diver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Diver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		i = encodeVarintDiver(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x48
	}
	if m.BirthDate != 0 {
		i = encodeVarintDiver(dAtA, i, uint64(m.BirthDate))
		i--
		dAtA[i] = 0x40
	}
	if len(m.BackImage) > 0 {
		i -= len(m.BackImage)
		copy(dAtA[i:], m.BackImage)
		i = encodeVarintDiver(dAtA, i, uint64(len(m.BackImage)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.FrontImage) > 0 {
		i -= len(m.FrontImage)
		copy(dAtA[i:], m.FrontImage)
		i = encodeVarintDiver(dAtA, i, uint64(len(m.FrontImage)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BackLink) > 0 {
		i -= len(m.BackLink)
		copy(dAtA[i:], m.BackLink)
		i = encodeVarintDiver(dAtA, i, uint64(len(m.BackLink)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FrontLink) > 0 {
		i -= len(m.FrontLink)
		copy(dAtA[i:], m.FrontLink)
		i = encodeVarintDiver(dAtA, i, uint64(len(m.FrontLink)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintDiver(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintDiver(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintDiver(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDiver(dAtA []byte, offset int, v uint64) int {
	offset -= sovDiver(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Diver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovDiver(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovDiver(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovDiver(uint64(l))
	}
	l = len(m.FrontLink)
	if l > 0 {
		n += 1 + l + sovDiver(uint64(l))
	}
	l = len(m.BackLink)
	if l > 0 {
		n += 1 + l + sovDiver(uint64(l))
	}
	l = len(m.FrontImage)
	if l > 0 {
		n += 1 + l + sovDiver(uint64(l))
	}
	l = len(m.BackImage)
	if l > 0 {
		n += 1 + l + sovDiver(uint64(l))
	}
	if m.BirthDate != 0 {
		n += 1 + sovDiver(uint64(m.BirthDate))
	}
	if m.Level != 0 {
		n += 1 + sovDiver(uint64(m.Level))
	}
	return n
}

func sovDiver(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDiver(x uint64) (n int) {
	return sovDiver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Diver) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Diver{`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`FrontLink:` + fmt.Sprintf("%v", this.FrontLink) + `,`,
		`BackLink:` + fmt.Sprintf("%v", this.BackLink) + `,`,
		`FrontImage:` + fmt.Sprintf("%v", this.FrontImage) + `,`,
		`BackImage:` + fmt.Sprintf("%v", this.BackImage) + `,`,
		`BirthDate:` + fmt.Sprintf("%v", this.BirthDate) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDiver(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Diver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Diver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Diver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiver
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiver
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiver
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrontLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiver
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrontLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDiver
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDiver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrontImage", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDiver
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDiver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrontImage = append(m.FrontImage[:0], dAtA[iNdEx:postIndex]...)
			if m.FrontImage == nil {
				m.FrontImage = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackImage", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDiver
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDiver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackImage = append(m.BackImage[:0], dAtA[iNdEx:postIndex]...)
			if m.BackImage == nil {
				m.BackImage = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BirthDate", wireType)
			}
			m.BirthDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BirthDate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= Level(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDiver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDiver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDiver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDiver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDiver
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDiver
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDiver
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDiver        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDiver          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDiver = fmt.Errorf("proto: unexpected end of group")
)
