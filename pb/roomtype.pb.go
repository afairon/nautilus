// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: roomtype.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ListRoomTypesRequest
type ListRoomTypesByTripRequest struct {
	// Types that are valid to be assigned to Id:
	//	*ListRoomTypesByTripRequest_HotelId
	//	*ListRoomTypesByTripRequest_LiveaboardId
	Id     isListRoomTypesByTripRequest_Id `protobuf_oneof:"id"`
	TripId uint64                          `protobuf:"varint,15,opt,name=trip_id,json=tripId,proto3" json:"trip_id,omitempty"`
	Limit  uint64                          `protobuf:"varint,20,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64                          `protobuf:"varint,25,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *ListRoomTypesByTripRequest) Reset()      { *m = ListRoomTypesByTripRequest{} }
func (*ListRoomTypesByTripRequest) ProtoMessage() {}
func (*ListRoomTypesByTripRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f11f6044003c223, []int{0}
}
func (m *ListRoomTypesByTripRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRoomTypesByTripRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRoomTypesByTripRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRoomTypesByTripRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRoomTypesByTripRequest.Merge(m, src)
}
func (m *ListRoomTypesByTripRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListRoomTypesByTripRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRoomTypesByTripRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRoomTypesByTripRequest proto.InternalMessageInfo

type isListRoomTypesByTripRequest_Id interface {
	isListRoomTypesByTripRequest_Id()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListRoomTypesByTripRequest_HotelId struct {
	HotelId uint64 `protobuf:"varint,1,opt,name=hotel_id,json=hotelId,proto3,oneof" json:"hotel_id,omitempty"`
}
type ListRoomTypesByTripRequest_LiveaboardId struct {
	LiveaboardId uint64 `protobuf:"varint,10,opt,name=liveaboard_id,json=liveaboardId,proto3,oneof" json:"liveaboard_id,omitempty"`
}

func (*ListRoomTypesByTripRequest_HotelId) isListRoomTypesByTripRequest_Id()      {}
func (*ListRoomTypesByTripRequest_LiveaboardId) isListRoomTypesByTripRequest_Id() {}

func (m *ListRoomTypesByTripRequest) GetId() isListRoomTypesByTripRequest_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ListRoomTypesByTripRequest) GetHotelId() uint64 {
	if x, ok := m.GetId().(*ListRoomTypesByTripRequest_HotelId); ok {
		return x.HotelId
	}
	return 0
}

func (m *ListRoomTypesByTripRequest) GetLiveaboardId() uint64 {
	if x, ok := m.GetId().(*ListRoomTypesByTripRequest_LiveaboardId); ok {
		return x.LiveaboardId
	}
	return 0
}

func (m *ListRoomTypesByTripRequest) GetTripId() uint64 {
	if m != nil {
		return m.TripId
	}
	return 0
}

func (m *ListRoomTypesByTripRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListRoomTypesByTripRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListRoomTypesByTripRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListRoomTypesByTripRequest_HotelId)(nil),
		(*ListRoomTypesByTripRequest_LiveaboardId)(nil),
	}
}

// ListRoomTypesResponse
type ListRoomTypesByTripResponse struct {
	RoomType *RoomType `protobuf:"bytes,1,opt,name=room_type,json=roomType,proto3" json:"room_type,omitempty"`
}

func (m *ListRoomTypesByTripResponse) Reset()      { *m = ListRoomTypesByTripResponse{} }
func (*ListRoomTypesByTripResponse) ProtoMessage() {}
func (*ListRoomTypesByTripResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f11f6044003c223, []int{1}
}
func (m *ListRoomTypesByTripResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRoomTypesByTripResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRoomTypesByTripResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRoomTypesByTripResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRoomTypesByTripResponse.Merge(m, src)
}
func (m *ListRoomTypesByTripResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListRoomTypesByTripResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRoomTypesByTripResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRoomTypesByTripResponse proto.InternalMessageInfo

func (m *ListRoomTypesByTripResponse) GetRoomType() *RoomType {
	if m != nil {
		return m.RoomType
	}
	return nil
}

type ListRoomsOfReservationRequest struct {
	ReservationId uint64 `protobuf:"varint,1,opt,name=reservation_id,json=reservationId,proto3" json:"reservation_id,omitempty"`
}

func (m *ListRoomsOfReservationRequest) Reset()      { *m = ListRoomsOfReservationRequest{} }
func (*ListRoomsOfReservationRequest) ProtoMessage() {}
func (*ListRoomsOfReservationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f11f6044003c223, []int{2}
}
func (m *ListRoomsOfReservationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRoomsOfReservationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRoomsOfReservationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRoomsOfReservationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRoomsOfReservationRequest.Merge(m, src)
}
func (m *ListRoomsOfReservationRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListRoomsOfReservationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRoomsOfReservationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRoomsOfReservationRequest proto.InternalMessageInfo

func (m *ListRoomsOfReservationRequest) GetReservationId() uint64 {
	if m != nil {
		return m.ReservationId
	}
	return 0
}

type ListRoomsOfReservationResponse struct {
	Room *ReservationRoom `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
}

func (m *ListRoomsOfReservationResponse) Reset()      { *m = ListRoomsOfReservationResponse{} }
func (*ListRoomsOfReservationResponse) ProtoMessage() {}
func (*ListRoomsOfReservationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f11f6044003c223, []int{3}
}
func (m *ListRoomsOfReservationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRoomsOfReservationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRoomsOfReservationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRoomsOfReservationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRoomsOfReservationResponse.Merge(m, src)
}
func (m *ListRoomsOfReservationResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListRoomsOfReservationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRoomsOfReservationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRoomsOfReservationResponse proto.InternalMessageInfo

func (m *ListRoomsOfReservationResponse) GetRoom() *ReservationRoom {
	if m != nil {
		return m.Room
	}
	return nil
}

type GetRoomTypeRequest struct {
	RoomTypeId uint64 `protobuf:"varint,1,opt,name=room_type_id,json=roomTypeId,proto3" json:"room_type_id,omitempty"`
}

func (m *GetRoomTypeRequest) Reset()      { *m = GetRoomTypeRequest{} }
func (*GetRoomTypeRequest) ProtoMessage() {}
func (*GetRoomTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f11f6044003c223, []int{4}
}
func (m *GetRoomTypeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRoomTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRoomTypeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRoomTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoomTypeRequest.Merge(m, src)
}
func (m *GetRoomTypeRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRoomTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoomTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoomTypeRequest proto.InternalMessageInfo

func (m *GetRoomTypeRequest) GetRoomTypeId() uint64 {
	if m != nil {
		return m.RoomTypeId
	}
	return 0
}

type GetRoomTypeResponse struct {
	RoomType *RoomType `protobuf:"bytes,1,opt,name=room_type,json=roomType,proto3" json:"room_type,omitempty"`
}

func (m *GetRoomTypeResponse) Reset()      { *m = GetRoomTypeResponse{} }
func (*GetRoomTypeResponse) ProtoMessage() {}
func (*GetRoomTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f11f6044003c223, []int{5}
}
func (m *GetRoomTypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRoomTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRoomTypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRoomTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoomTypeResponse.Merge(m, src)
}
func (m *GetRoomTypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRoomTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoomTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoomTypeResponse proto.InternalMessageInfo

func (m *GetRoomTypeResponse) GetRoomType() *RoomType {
	if m != nil {
		return m.RoomType
	}
	return nil
}

func init() {
	proto.RegisterType((*ListRoomTypesByTripRequest)(nil), "roomtype.ListRoomTypesByTripRequest")
	proto.RegisterType((*ListRoomTypesByTripResponse)(nil), "roomtype.ListRoomTypesByTripResponse")
	proto.RegisterType((*ListRoomsOfReservationRequest)(nil), "roomtype.ListRoomsOfReservationRequest")
	proto.RegisterType((*ListRoomsOfReservationResponse)(nil), "roomtype.ListRoomsOfReservationResponse")
	proto.RegisterType((*GetRoomTypeRequest)(nil), "roomtype.GetRoomTypeRequest")
	proto.RegisterType((*GetRoomTypeResponse)(nil), "roomtype.GetRoomTypeResponse")
}

func init() { proto.RegisterFile("roomtype.proto", fileDescriptor_2f11f6044003c223) }

var fileDescriptor_2f11f6044003c223 = []byte{
	// 455 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xf5, 0x56, 0x21, 0x2d, 0x93, 0xb6, 0x91, 0xb6, 0x55, 0x08, 0x2e, 0x5d, 0x55, 0x16, 0x11,
	0x15, 0x42, 0x06, 0x15, 0x89, 0x03, 0xc7, 0x20, 0x01, 0x86, 0x4a, 0x48, 0x4b, 0x4f, 0x5c, 0xaa,
	0x84, 0xdd, 0x88, 0x95, 0xec, 0xae, 0xd9, 0x5d, 0x22, 0xe5, 0xc6, 0x27, 0xf0, 0x19, 0x5c, 0xb8,
	0xf0, 0x15, 0x1c, 0x73, 0xec, 0x91, 0x38, 0x17, 0x8e, 0xfd, 0x04, 0xb4, 0xb6, 0xd7, 0x0e, 0xaa,
	0xa3, 0x4a, 0xdc, 0x3c, 0xcf, 0x6f, 0x66, 0xde, 0x9b, 0x99, 0x85, 0x5d, 0x25, 0x65, 0x62, 0x66,
	0x29, 0x0f, 0x53, 0x25, 0x8d, 0xc4, 0x5b, 0x2e, 0xf6, 0x3b, 0x89, 0x64, 0x3c, 0x2e, 0xe0, 0xe0,
	0x07, 0x02, 0xff, 0x54, 0x68, 0x43, 0xa5, 0x4c, 0xce, 0x66, 0x29, 0xd7, 0xc3, 0xd9, 0x99, 0x12,
	0x29, 0xe5, 0x9f, 0xbf, 0x70, 0x6d, 0xf0, 0x01, 0x6c, 0x7d, 0x92, 0x86, 0xc7, 0xe7, 0x82, 0xf5,
	0xd1, 0x11, 0x3a, 0x6e, 0xbd, 0xf6, 0xe8, 0x66, 0x8e, 0x44, 0x0c, 0x0f, 0x60, 0x27, 0x16, 0x53,
	0x3e, 0x1a, 0xcb, 0x91, 0x62, 0x96, 0x01, 0x25, 0x63, 0xbb, 0x86, 0x23, 0x86, 0xef, 0xc0, 0xa6,
	0x51, 0x22, 0xb5, 0x84, 0xae, 0x25, 0xd0, 0xb6, 0x0d, 0x23, 0x86, 0xf7, 0xe1, 0x56, 0x2c, 0x12,
	0x61, 0xfa, 0xfb, 0x39, 0x5c, 0x04, 0xb8, 0x07, 0x6d, 0x39, 0x99, 0x68, 0x6e, 0xfa, 0x77, 0x0b,
	0x76, 0x11, 0x0d, 0x5b, 0xb0, 0x21, 0x58, 0xf0, 0x16, 0x0e, 0x1a, 0xe5, 0xea, 0x54, 0x5e, 0x68,
	0x8e, 0x1f, 0xc1, 0x6d, 0xeb, 0xf3, 0xdc, 0x1a, 0xcd, 0x05, 0x77, 0x4e, 0xba, 0x61, 0xe1, 0xd7,
	0xa5, 0xd0, 0x7c, 0x12, 0xf6, 0x2b, 0x78, 0x09, 0x87, 0xae, 0x98, 0x7e, 0x37, 0xa1, 0x5c, 0x73,
	0x35, 0x1d, 0x19, 0x21, 0x2f, 0x9c, 0xfd, 0x01, 0xec, 0xaa, 0x1a, 0xad, 0x86, 0x40, 0x77, 0x56,
	0xd0, 0x88, 0x05, 0xa7, 0x40, 0xd6, 0xd5, 0x29, 0x75, 0x3d, 0x84, 0x96, 0xed, 0x5a, 0x4a, 0xea,
	0x39, 0x49, 0x2b, 0x4c, 0x29, 0x13, 0x9a, 0x73, 0x82, 0x67, 0x80, 0x5f, 0xf1, 0xca, 0xa1, 0x93,
	0x72, 0x04, 0xdb, 0x95, 0xb3, 0x5a, 0x08, 0x38, 0x2f, 0x11, 0x0b, 0x5e, 0xc0, 0xde, 0x3f, 0x79,
	0xff, 0x33, 0x92, 0x93, 0x9f, 0x1b, 0xd0, 0x75, 0xf0, 0x7b, 0xae, 0xa6, 0xe2, 0x23, 0xc7, 0x6f,
	0xa0, 0xb3, 0x52, 0x18, 0xdf, 0x0b, 0xab, 0xd3, 0xba, 0xae, 0xd3, 0x3f, 0x5c, 0xf3, 0xb7, 0x54,
	0xc3, 0x60, 0xaf, 0x61, 0x7f, 0xf8, 0x7e, 0x9d, 0xb5, 0xfe, 0x1a, 0xfd, 0xc1, 0x0d, 0xac, 0xa2,
	0xc7, 0x13, 0x84, 0x13, 0xe8, 0x35, 0x2f, 0x04, 0x3f, 0xb8, 0x5e, 0xa2, 0x71, 0xf5, 0xfe, 0xf1,
	0xcd, 0x44, 0xd7, 0x6e, 0xf8, 0x7c, 0xbe, 0x20, 0xde, 0xe5, 0x82, 0x78, 0x57, 0x0b, 0x82, 0xbe,
	0x66, 0x04, 0x7d, 0xcf, 0x08, 0xfa, 0x95, 0x11, 0x34, 0xcf, 0x08, 0xfa, 0x9d, 0x11, 0xf4, 0x27,
	0x23, 0xde, 0x55, 0x46, 0xd0, 0xb7, 0x25, 0xf1, 0xe6, 0x4b, 0xe2, 0x5d, 0x2e, 0x89, 0xf7, 0xa1,
	0x15, 0x3e, 0x4e, 0xc7, 0xe3, 0x76, 0xfe, 0x0e, 0x9f, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xaf,
	0x7e, 0x3e, 0xdd, 0xb0, 0x03, 0x00, 0x00,
}

func (this *ListRoomTypesByTripRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRoomTypesByTripRequest)
	if !ok {
		that2, ok := that.(ListRoomTypesByTripRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Id == nil {
		if this.Id != nil {
			return false
		}
	} else if this.Id == nil {
		return false
	} else if !this.Id.Equal(that1.Id) {
		return false
	}
	if this.TripId != that1.TripId {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	return true
}
func (this *ListRoomTypesByTripRequest_HotelId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRoomTypesByTripRequest_HotelId)
	if !ok {
		that2, ok := that.(ListRoomTypesByTripRequest_HotelId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HotelId != that1.HotelId {
		return false
	}
	return true
}
func (this *ListRoomTypesByTripRequest_LiveaboardId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRoomTypesByTripRequest_LiveaboardId)
	if !ok {
		that2, ok := that.(ListRoomTypesByTripRequest_LiveaboardId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LiveaboardId != that1.LiveaboardId {
		return false
	}
	return true
}
func (this *ListRoomTypesByTripResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRoomTypesByTripResponse)
	if !ok {
		that2, ok := that.(ListRoomTypesByTripResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RoomType.Equal(that1.RoomType) {
		return false
	}
	return true
}
func (this *ListRoomsOfReservationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRoomsOfReservationRequest)
	if !ok {
		that2, ok := that.(ListRoomsOfReservationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ReservationId != that1.ReservationId {
		return false
	}
	return true
}
func (this *ListRoomsOfReservationResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRoomsOfReservationResponse)
	if !ok {
		that2, ok := that.(ListRoomsOfReservationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Room.Equal(that1.Room) {
		return false
	}
	return true
}
func (this *GetRoomTypeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRoomTypeRequest)
	if !ok {
		that2, ok := that.(GetRoomTypeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoomTypeId != that1.RoomTypeId {
		return false
	}
	return true
}
func (this *GetRoomTypeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRoomTypeResponse)
	if !ok {
		that2, ok := that.(GetRoomTypeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RoomType.Equal(that1.RoomType) {
		return false
	}
	return true
}
func (this *ListRoomTypesByTripRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.ListRoomTypesByTripRequest{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	s = append(s, "TripId: "+fmt.Sprintf("%#v", this.TripId)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListRoomTypesByTripRequest_HotelId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.ListRoomTypesByTripRequest_HotelId{` +
		`HotelId:` + fmt.Sprintf("%#v", this.HotelId) + `}`}, ", ")
	return s
}
func (this *ListRoomTypesByTripRequest_LiveaboardId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.ListRoomTypesByTripRequest_LiveaboardId{` +
		`LiveaboardId:` + fmt.Sprintf("%#v", this.LiveaboardId) + `}`}, ", ")
	return s
}
func (this *ListRoomTypesByTripResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ListRoomTypesByTripResponse{")
	if this.RoomType != nil {
		s = append(s, "RoomType: "+fmt.Sprintf("%#v", this.RoomType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListRoomsOfReservationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ListRoomsOfReservationRequest{")
	s = append(s, "ReservationId: "+fmt.Sprintf("%#v", this.ReservationId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListRoomsOfReservationResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ListRoomsOfReservationResponse{")
	if this.Room != nil {
		s = append(s, "Room: "+fmt.Sprintf("%#v", this.Room)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRoomTypeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetRoomTypeRequest{")
	s = append(s, "RoomTypeId: "+fmt.Sprintf("%#v", this.RoomTypeId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRoomTypeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetRoomTypeResponse{")
	if this.RoomType != nil {
		s = append(s, "RoomType: "+fmt.Sprintf("%#v", this.RoomType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRoomtype(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RoomTypeServiceClient is the client API for RoomTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RoomTypeServiceClient interface {
	GetRoomType(ctx context.Context, in *GetRoomTypeRequest, opts ...grpc.CallOption) (*GetRoomTypeResponse, error)
	// this method returns room types with quantity of each room typetaken into account
	ListRoomTypesByTrip(ctx context.Context, in *ListRoomTypesByTripRequest, opts ...grpc.CallOption) (RoomTypeService_ListRoomTypesByTripClient, error)
	ListRoomsOfReservation(ctx context.Context, in *ListRoomsOfReservationRequest, opts ...grpc.CallOption) (RoomTypeService_ListRoomsOfReservationClient, error)
}

type roomTypeServiceClient struct {
	cc *grpc.ClientConn
}

func NewRoomTypeServiceClient(cc *grpc.ClientConn) RoomTypeServiceClient {
	return &roomTypeServiceClient{cc}
}

func (c *roomTypeServiceClient) GetRoomType(ctx context.Context, in *GetRoomTypeRequest, opts ...grpc.CallOption) (*GetRoomTypeResponse, error) {
	out := new(GetRoomTypeResponse)
	err := c.cc.Invoke(ctx, "/roomtype.RoomTypeService/GetRoomType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomTypeServiceClient) ListRoomTypesByTrip(ctx context.Context, in *ListRoomTypesByTripRequest, opts ...grpc.CallOption) (RoomTypeService_ListRoomTypesByTripClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RoomTypeService_serviceDesc.Streams[0], "/roomtype.RoomTypeService/ListRoomTypesByTrip", opts...)
	if err != nil {
		return nil, err
	}
	x := &roomTypeServiceListRoomTypesByTripClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RoomTypeService_ListRoomTypesByTripClient interface {
	Recv() (*ListRoomTypesByTripResponse, error)
	grpc.ClientStream
}

type roomTypeServiceListRoomTypesByTripClient struct {
	grpc.ClientStream
}

func (x *roomTypeServiceListRoomTypesByTripClient) Recv() (*ListRoomTypesByTripResponse, error) {
	m := new(ListRoomTypesByTripResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *roomTypeServiceClient) ListRoomsOfReservation(ctx context.Context, in *ListRoomsOfReservationRequest, opts ...grpc.CallOption) (RoomTypeService_ListRoomsOfReservationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RoomTypeService_serviceDesc.Streams[1], "/roomtype.RoomTypeService/ListRoomsOfReservation", opts...)
	if err != nil {
		return nil, err
	}
	x := &roomTypeServiceListRoomsOfReservationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RoomTypeService_ListRoomsOfReservationClient interface {
	Recv() (*ListRoomsOfReservationResponse, error)
	grpc.ClientStream
}

type roomTypeServiceListRoomsOfReservationClient struct {
	grpc.ClientStream
}

func (x *roomTypeServiceListRoomsOfReservationClient) Recv() (*ListRoomsOfReservationResponse, error) {
	m := new(ListRoomsOfReservationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RoomTypeServiceServer is the server API for RoomTypeService service.
type RoomTypeServiceServer interface {
	GetRoomType(context.Context, *GetRoomTypeRequest) (*GetRoomTypeResponse, error)
	// this method returns room types with quantity of each room typetaken into account
	ListRoomTypesByTrip(*ListRoomTypesByTripRequest, RoomTypeService_ListRoomTypesByTripServer) error
	ListRoomsOfReservation(*ListRoomsOfReservationRequest, RoomTypeService_ListRoomsOfReservationServer) error
}

// UnimplementedRoomTypeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRoomTypeServiceServer struct {
}

func (*UnimplementedRoomTypeServiceServer) GetRoomType(ctx context.Context, req *GetRoomTypeRequest) (*GetRoomTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomType not implemented")
}
func (*UnimplementedRoomTypeServiceServer) ListRoomTypesByTrip(req *ListRoomTypesByTripRequest, srv RoomTypeService_ListRoomTypesByTripServer) error {
	return status.Errorf(codes.Unimplemented, "method ListRoomTypesByTrip not implemented")
}
func (*UnimplementedRoomTypeServiceServer) ListRoomsOfReservation(req *ListRoomsOfReservationRequest, srv RoomTypeService_ListRoomsOfReservationServer) error {
	return status.Errorf(codes.Unimplemented, "method ListRoomsOfReservation not implemented")
}

func RegisterRoomTypeServiceServer(s *grpc.Server, srv RoomTypeServiceServer) {
	s.RegisterService(&_RoomTypeService_serviceDesc, srv)
}

func _RoomTypeService_GetRoomType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomTypeServiceServer).GetRoomType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roomtype.RoomTypeService/GetRoomType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomTypeServiceServer).GetRoomType(ctx, req.(*GetRoomTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomTypeService_ListRoomTypesByTrip_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRoomTypesByTripRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoomTypeServiceServer).ListRoomTypesByTrip(m, &roomTypeServiceListRoomTypesByTripServer{stream})
}

type RoomTypeService_ListRoomTypesByTripServer interface {
	Send(*ListRoomTypesByTripResponse) error
	grpc.ServerStream
}

type roomTypeServiceListRoomTypesByTripServer struct {
	grpc.ServerStream
}

func (x *roomTypeServiceListRoomTypesByTripServer) Send(m *ListRoomTypesByTripResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RoomTypeService_ListRoomsOfReservation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRoomsOfReservationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoomTypeServiceServer).ListRoomsOfReservation(m, &roomTypeServiceListRoomsOfReservationServer{stream})
}

type RoomTypeService_ListRoomsOfReservationServer interface {
	Send(*ListRoomsOfReservationResponse) error
	grpc.ServerStream
}

type roomTypeServiceListRoomsOfReservationServer struct {
	grpc.ServerStream
}

func (x *roomTypeServiceListRoomsOfReservationServer) Send(m *ListRoomsOfReservationResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _RoomTypeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "roomtype.RoomTypeService",
	HandlerType: (*RoomTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoomType",
			Handler:    _RoomTypeService_GetRoomType_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListRoomTypesByTrip",
			Handler:       _RoomTypeService_ListRoomTypesByTrip_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListRoomsOfReservation",
			Handler:       _RoomTypeService_ListRoomsOfReservation_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "roomtype.proto",
}

func (m *ListRoomTypesByTripRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRoomTypesByTripRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRoomTypesByTripRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintRoomtype(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.Limit != 0 {
		i = encodeVarintRoomtype(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.TripId != 0 {
		i = encodeVarintRoomtype(dAtA, i, uint64(m.TripId))
		i--
		dAtA[i] = 0x78
	}
	if m.Id != nil {
		{
			size := m.Id.Size()
			i -= size
			if _, err := m.Id.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListRoomTypesByTripRequest_HotelId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRoomTypesByTripRequest_HotelId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintRoomtype(dAtA, i, uint64(m.HotelId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *ListRoomTypesByTripRequest_LiveaboardId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRoomTypesByTripRequest_LiveaboardId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintRoomtype(dAtA, i, uint64(m.LiveaboardId))
	i--
	dAtA[i] = 0x50
	return len(dAtA) - i, nil
}
func (m *ListRoomTypesByTripResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRoomTypesByTripResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRoomTypesByTripResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoomType != nil {
		{
			size, err := m.RoomType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoomtype(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListRoomsOfReservationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRoomsOfReservationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRoomsOfReservationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReservationId != 0 {
		i = encodeVarintRoomtype(dAtA, i, uint64(m.ReservationId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListRoomsOfReservationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRoomsOfReservationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRoomsOfReservationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Room != nil {
		{
			size, err := m.Room.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoomtype(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRoomTypeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoomTypeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRoomTypeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoomTypeId != 0 {
		i = encodeVarintRoomtype(dAtA, i, uint64(m.RoomTypeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRoomTypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoomTypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRoomTypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoomType != nil {
		{
			size, err := m.RoomType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoomtype(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRoomtype(dAtA []byte, offset int, v uint64) int {
	offset -= sovRoomtype(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ListRoomTypesByTripRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += m.Id.Size()
	}
	if m.TripId != 0 {
		n += 1 + sovRoomtype(uint64(m.TripId))
	}
	if m.Limit != 0 {
		n += 2 + sovRoomtype(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 2 + sovRoomtype(uint64(m.Offset))
	}
	return n
}

func (m *ListRoomTypesByTripRequest_HotelId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovRoomtype(uint64(m.HotelId))
	return n
}
func (m *ListRoomTypesByTripRequest_LiveaboardId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovRoomtype(uint64(m.LiveaboardId))
	return n
}
func (m *ListRoomTypesByTripResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomType != nil {
		l = m.RoomType.Size()
		n += 1 + l + sovRoomtype(uint64(l))
	}
	return n
}

func (m *ListRoomsOfReservationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReservationId != 0 {
		n += 1 + sovRoomtype(uint64(m.ReservationId))
	}
	return n
}

func (m *ListRoomsOfReservationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Room != nil {
		l = m.Room.Size()
		n += 1 + l + sovRoomtype(uint64(l))
	}
	return n
}

func (m *GetRoomTypeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomTypeId != 0 {
		n += 1 + sovRoomtype(uint64(m.RoomTypeId))
	}
	return n
}

func (m *GetRoomTypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomType != nil {
		l = m.RoomType.Size()
		n += 1 + l + sovRoomtype(uint64(l))
	}
	return n
}

func sovRoomtype(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRoomtype(x uint64) (n int) {
	return sovRoomtype(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ListRoomTypesByTripRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListRoomTypesByTripRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`TripId:` + fmt.Sprintf("%v", this.TripId) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListRoomTypesByTripRequest_HotelId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListRoomTypesByTripRequest_HotelId{`,
		`HotelId:` + fmt.Sprintf("%v", this.HotelId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListRoomTypesByTripRequest_LiveaboardId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListRoomTypesByTripRequest_LiveaboardId{`,
		`LiveaboardId:` + fmt.Sprintf("%v", this.LiveaboardId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListRoomTypesByTripResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListRoomTypesByTripResponse{`,
		`RoomType:` + strings.Replace(fmt.Sprintf("%v", this.RoomType), "RoomType", "RoomType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListRoomsOfReservationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListRoomsOfReservationRequest{`,
		`ReservationId:` + fmt.Sprintf("%v", this.ReservationId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListRoomsOfReservationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListRoomsOfReservationResponse{`,
		`Room:` + strings.Replace(fmt.Sprintf("%v", this.Room), "ReservationRoom", "ReservationRoom", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRoomTypeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRoomTypeRequest{`,
		`RoomTypeId:` + fmt.Sprintf("%v", this.RoomTypeId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRoomTypeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRoomTypeResponse{`,
		`RoomType:` + strings.Replace(fmt.Sprintf("%v", this.RoomType), "RoomType", "RoomType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRoomtype(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ListRoomTypesByTripRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomtype
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRoomTypesByTripRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRoomTypesByTripRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotelId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &ListRoomTypesByTripRequest_HotelId{v}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveaboardId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &ListRoomTypesByTripRequest_LiveaboardId{v}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TripId", wireType)
			}
			m.TripId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TripId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoomtype(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoomtype
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRoomTypesByTripResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomtype
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRoomTypesByTripResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRoomTypesByTripResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoomtype
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoomtype
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoomType == nil {
				m.RoomType = &RoomType{}
			}
			if err := m.RoomType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomtype(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoomtype
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRoomsOfReservationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomtype
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRoomsOfReservationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRoomsOfReservationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservationId", wireType)
			}
			m.ReservationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReservationId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoomtype(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoomtype
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRoomsOfReservationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomtype
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRoomsOfReservationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRoomsOfReservationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoomtype
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoomtype
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Room == nil {
				m.Room = &ReservationRoom{}
			}
			if err := m.Room.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomtype(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoomtype
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoomTypeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomtype
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoomTypeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoomTypeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomTypeId", wireType)
			}
			m.RoomTypeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomTypeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoomtype(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoomtype
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoomTypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomtype
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoomTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoomTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoomtype
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoomtype
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoomType == nil {
				m.RoomType = &RoomType{}
			}
			if err := m.RoomType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomtype(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoomtype
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoomtype(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoomtype
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoomtype
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoomtype
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRoomtype
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRoomtype
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRoomtype
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRoomtype        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoomtype          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRoomtype = fmt.Errorf("proto: unexpected end of group")
)
