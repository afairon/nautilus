// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: agency.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Agency struct {
	Name        string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PhoneNumber string   `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Address     *Address `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *Agency) Reset()      { *m = Agency{} }
func (*Agency) ProtoMessage() {}
func (*Agency) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{0}
}
func (m *Agency) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Agency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Agency.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Agency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Agency.Merge(m, src)
}
func (m *Agency) XXX_Size() int {
	return m.Size()
}
func (m *Agency) XXX_DiscardUnknown() {
	xxx_messageInfo_Agency.DiscardUnknown(m)
}

var xxx_messageInfo_Agency proto.InternalMessageInfo

func (m *Agency) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Agency) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *Agency) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type DiveMaster struct {
	FirstName string `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Level     Level  `protobuf:"varint,3,opt,name=level,proto3,enum=common.Level" json:"level,omitempty"`
	CardFront string `protobuf:"bytes,4,opt,name=card_front,json=cardFront,proto3" json:"card_front,omitempty"`
	CardBack  string `protobuf:"bytes,5,opt,name=card_back,json=cardBack,proto3" json:"card_back,omitempty"`
}

func (m *DiveMaster) Reset()      { *m = DiveMaster{} }
func (*DiveMaster) ProtoMessage() {}
func (*DiveMaster) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{1}
}
func (m *DiveMaster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiveMaster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiveMaster.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiveMaster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiveMaster.Merge(m, src)
}
func (m *DiveMaster) XXX_Size() int {
	return m.Size()
}
func (m *DiveMaster) XXX_DiscardUnknown() {
	xxx_messageInfo_DiveMaster.DiscardUnknown(m)
}

var xxx_messageInfo_DiveMaster proto.InternalMessageInfo

func (m *DiveMaster) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *DiveMaster) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *DiveMaster) GetLevel() Level {
	if m != nil {
		return m.Level
	}
	return INSTRUCTOR
}

func (m *DiveMaster) GetCardFront() string {
	if m != nil {
		return m.CardFront
	}
	return ""
}

func (m *DiveMaster) GetCardBack() string {
	if m != nil {
		return m.CardBack
	}
	return ""
}

func init() {
	proto.RegisterType((*Agency)(nil), "agency.Agency")
	proto.RegisterType((*DiveMaster)(nil), "agency.DiveMaster")
}

func init() { proto.RegisterFile("agency.proto", fileDescriptor_614a4be5fd9deed0) }

var fileDescriptor_614a4be5fd9deed0 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0xd0, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0xc6, 0x71, 0x1b, 0xda, 0x42, 0xdd, 0x02, 0x92, 0xa7, 0x08, 0xc4, 0x53, 0x29, 0x4b, 0x59,
	0x8a, 0x54, 0x36, 0xb6, 0x56, 0x88, 0x09, 0x3a, 0x64, 0x64, 0x89, 0x9c, 0xc4, 0x85, 0xd2, 0xc4,
	0x8e, 0x9c, 0x50, 0x89, 0x8d, 0x23, 0x70, 0x0c, 0xb8, 0x09, 0x63, 0xc6, 0x8e, 0xc4, 0x59, 0x18,
	0x7b, 0x04, 0x64, 0x9b, 0x48, 0x6c, 0xf6, 0xef, 0x1b, 0xfe, 0xd2, 0x23, 0x7d, 0xf6, 0xc8, 0x45,
	0xf4, 0x3a, 0xce, 0x94, 0x2c, 0x24, 0xed, 0xb8, 0xdf, 0x71, 0x3f, 0x92, 0x69, 0x2a, 0x85, 0xd3,
	0xe1, 0x33, 0xe9, 0x4c, 0xad, 0x53, 0x4a, 0x5a, 0x82, 0xa5, 0xdc, 0xc3, 0x03, 0x3c, 0xea, 0xfa,
	0xf6, 0x4d, 0xcf, 0x48, 0x3f, 0x7b, 0x92, 0x82, 0x07, 0xe2, 0x25, 0x0d, 0xb9, 0xf2, 0x76, 0xec,
	0xd6, 0xb3, 0x36, 0xb7, 0x44, 0x2f, 0xc8, 0x1e, 0x8b, 0x63, 0xc5, 0xf3, 0xdc, 0xdb, 0x1d, 0xe0,
	0x51, 0x6f, 0x72, 0x34, 0xfe, 0x0b, 0x4c, 0x1d, 0xfb, 0xcd, 0x3e, 0xfc, 0xc4, 0x84, 0xdc, 0x2c,
	0xd7, 0xfc, 0x9e, 0xe5, 0x05, 0x57, 0xf4, 0x94, 0x90, 0xc5, 0x52, 0xe5, 0x45, 0xf0, 0x2f, 0xdb,
	0xb5, 0x32, 0x37, 0xed, 0x13, 0xd2, 0x4d, 0x58, 0xb3, 0xba, 0xf0, 0xbe, 0x01, 0x3b, 0x9e, 0x93,
	0x76, 0xc2, 0xd7, 0x3c, 0xb1, 0xcd, 0xc3, 0xc9, 0x41, 0xd3, 0xbc, 0x33, 0xe8, 0xbb, 0xcd, 0x04,
	0x22, 0xa6, 0xe2, 0x60, 0xa1, 0xa4, 0x28, 0xbc, 0x96, 0x0b, 0x18, 0xb9, 0x35, 0x60, 0x02, 0x76,
	0x0e, 0x59, 0xb4, 0xf2, 0xda, 0x2e, 0x60, 0x60, 0xc6, 0xa2, 0xd5, 0xec, 0xba, 0xac, 0x00, 0x6d,
	0x2a, 0x40, 0xdb, 0x0a, 0xf0, 0x9b, 0x06, 0xfc, 0xa1, 0x01, 0x7f, 0x69, 0xc0, 0xa5, 0x06, 0xfc,
	0xad, 0x01, 0xff, 0x68, 0x40, 0x5b, 0x0d, 0xf8, 0xbd, 0x06, 0x54, 0xd6, 0x80, 0x36, 0x35, 0xa0,
	0x87, 0xd6, 0xf8, 0x32, 0x0b, 0xc3, 0x8e, 0x3d, 0xed, 0xd5, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xb4, 0x03, 0x17, 0x47, 0x80, 0x01, 0x00, 0x00,
}

func (this *Agency) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Agency)
	if !ok {
		that2, ok := that.(Agency)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	if !this.Address.Equal(that1.Address) {
		return false
	}
	return true
}
func (this *DiveMaster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DiveMaster)
	if !ok {
		that2, ok := that.(DiveMaster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.CardFront != that1.CardFront {
		return false
	}
	if this.CardBack != that1.CardBack {
		return false
	}
	return true
}
func (this *Agency) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.Agency{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	if this.Address != nil {
		s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DiveMaster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.DiveMaster{")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "CardFront: "+fmt.Sprintf("%#v", this.CardFront)+",\n")
	s = append(s, "CardBack: "+fmt.Sprintf("%#v", this.CardBack)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAgency(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Agency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Agency) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Agency) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DiveMaster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiveMaster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiveMaster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CardBack) > 0 {
		i -= len(m.CardBack)
		copy(dAtA[i:], m.CardBack)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.CardBack)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CardFront) > 0 {
		i -= len(m.CardFront)
		copy(dAtA[i:], m.CardFront)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.CardFront)))
		i--
		dAtA[i] = 0x22
	}
	if m.Level != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x18
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAgency(dAtA []byte, offset int, v uint64) int {
	offset -= sovAgency(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Agency) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *DiveMaster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovAgency(uint64(m.Level))
	}
	l = len(m.CardFront)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.CardBack)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func sovAgency(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAgency(x uint64) (n int) {
	return sovAgency(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Agency) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Agency{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`Address:` + strings.Replace(fmt.Sprintf("%v", this.Address), "Address", "Address", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DiveMaster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DiveMaster{`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`CardFront:` + fmt.Sprintf("%v", this.CardFront) + `,`,
		`CardBack:` + fmt.Sprintf("%v", this.CardBack) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAgency(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Agency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Agency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Agency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiveMaster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiveMaster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiveMaster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= Level(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardFront", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardFront = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardBack", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardBack = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAgency(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAgency
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAgency
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAgency
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAgency        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAgency          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAgency = fmt.Errorf("proto: unexpected end of group")
)
