// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: agency.proto

package pb

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DiveMaster struct {
	FirstName  string    `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName   string    `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Level      LevelType `protobuf:"varint,3,opt,name=level,proto3,enum=model.LevelType" json:"level,omitempty"`
	FrontImage *File     `protobuf:"bytes,4,opt,name=front_image,json=frontImage,proto3" json:"front_image,omitempty"`
	BackImage  *File     `protobuf:"bytes,5,opt,name=back_image,json=backImage,proto3" json:"back_image,omitempty"`
}

func (m *DiveMaster) Reset()      { *m = DiveMaster{} }
func (*DiveMaster) ProtoMessage() {}
func (*DiveMaster) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{0}
}
func (m *DiveMaster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiveMaster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiveMaster.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiveMaster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiveMaster.Merge(m, src)
}
func (m *DiveMaster) XXX_Size() int {
	return m.Size()
}
func (m *DiveMaster) XXX_DiscardUnknown() {
	xxx_messageInfo_DiveMaster.DiscardUnknown(m)
}

var xxx_messageInfo_DiveMaster proto.InternalMessageInfo

func (m *DiveMaster) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *DiveMaster) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *DiveMaster) GetLevel() LevelType {
	if m != nil {
		return m.Level
	}
	return INSTRUCTOR
}

func (m *DiveMaster) GetFrontImage() *File {
	if m != nil {
		return m.FrontImage
	}
	return nil
}

func (m *DiveMaster) GetBackImage() *File {
	if m != nil {
		return m.BackImage
	}
	return nil
}

type DiveMasterFirstAndLastName struct {
	FirstName string `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
}

func (m *DiveMasterFirstAndLastName) Reset()      { *m = DiveMasterFirstAndLastName{} }
func (*DiveMasterFirstAndLastName) ProtoMessage() {}
func (*DiveMasterFirstAndLastName) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{1}
}
func (m *DiveMasterFirstAndLastName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiveMasterFirstAndLastName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiveMasterFirstAndLastName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiveMasterFirstAndLastName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiveMasterFirstAndLastName.Merge(m, src)
}
func (m *DiveMasterFirstAndLastName) XXX_Size() int {
	return m.Size()
}
func (m *DiveMasterFirstAndLastName) XXX_DiscardUnknown() {
	xxx_messageInfo_DiveMasterFirstAndLastName.DiscardUnknown(m)
}

var xxx_messageInfo_DiveMasterFirstAndLastName proto.InternalMessageInfo

func (m *DiveMasterFirstAndLastName) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *DiveMasterFirstAndLastName) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

type Staff struct {
	FirstName string     `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string     `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Position  string     `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	Gender    GenderType `protobuf:"varint,4,opt,name=gender,proto3,enum=model.GenderType" json:"gender,omitempty"`
}

func (m *Staff) Reset()      { *m = Staff{} }
func (*Staff) ProtoMessage() {}
func (*Staff) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{2}
}
func (m *Staff) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Staff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Staff.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Staff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Staff.Merge(m, src)
}
func (m *Staff) XXX_Size() int {
	return m.Size()
}
func (m *Staff) XXX_DiscardUnknown() {
	xxx_messageInfo_Staff.DiscardUnknown(m)
}

var xxx_messageInfo_Staff proto.InternalMessageInfo

func (m *Staff) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Staff) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Staff) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *Staff) GetGender() GenderType {
	if m != nil {
		return m.Gender
	}
	return FEMALE
}

type DivingBoat struct {
	Name          string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BoatImages    []*File  `protobuf:"bytes,2,rep,name=boat_images,json=boatImages,proto3" json:"boat_images,omitempty"`
	Description   string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	TotalCapacity uint32   `protobuf:"varint,4,opt,name=total_capacity,json=totalCapacity,proto3" json:"total_capacity,omitempty"`
	DiverCapacity uint32   `protobuf:"varint,5,opt,name=diver_capacity,json=diverCapacity,proto3" json:"diver_capacity,omitempty"`
	StaffCapacity uint32   `protobuf:"varint,6,opt,name=staff_capacity,json=staffCapacity,proto3" json:"staff_capacity,omitempty"`
	Address       *Address `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *DivingBoat) Reset()      { *m = DivingBoat{} }
func (*DivingBoat) ProtoMessage() {}
func (*DivingBoat) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{3}
}
func (m *DivingBoat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DivingBoat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DivingBoat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DivingBoat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DivingBoat.Merge(m, src)
}
func (m *DivingBoat) XXX_Size() int {
	return m.Size()
}
func (m *DivingBoat) XXX_DiscardUnknown() {
	xxx_messageInfo_DivingBoat.DiscardUnknown(m)
}

var xxx_messageInfo_DivingBoat proto.InternalMessageInfo

func (m *DivingBoat) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DivingBoat) GetBoatImages() []*File {
	if m != nil {
		return m.BoatImages
	}
	return nil
}

func (m *DivingBoat) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *DivingBoat) GetTotalCapacity() uint32 {
	if m != nil {
		return m.TotalCapacity
	}
	return 0
}

func (m *DivingBoat) GetDiverCapacity() uint32 {
	if m != nil {
		return m.DiverCapacity
	}
	return 0
}

func (m *DivingBoat) GetStaffCapacity() uint32 {
	if m != nil {
		return m.StaffCapacity
	}
	return 0
}

func (m *DivingBoat) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type Amenity struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Amenity) Reset()      { *m = Amenity{} }
func (*Amenity) ProtoMessage() {}
func (*Amenity) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{4}
}
func (m *Amenity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Amenity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Amenity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Amenity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Amenity.Merge(m, src)
}
func (m *Amenity) XXX_Size() int {
	return m.Size()
}
func (m *Amenity) XXX_DiscardUnknown() {
	xxx_messageInfo_Amenity.DiscardUnknown(m)
}

var xxx_messageInfo_Amenity proto.InternalMessageInfo

func (m *Amenity) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Amenity) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type RoomType struct {
	Name        string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string     `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	MaxGuest    uint32     `protobuf:"varint,3,opt,name=max_guest,json=maxGuest,proto3" json:"max_guest,omitempty"`
	Price       float32    `protobuf:"fixed32,4,opt,name=price,proto3" json:"price,omitempty"`
	RoomImages  []*File    `protobuf:"bytes,5,rep,name=room_images,json=roomImages,proto3" json:"room_images,omitempty"`
	Amenities   []*Amenity `protobuf:"bytes,6,rep,name=amenities,proto3" json:"amenities,omitempty"`
	Quantity    uint32     `protobuf:"varint,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (m *RoomType) Reset()      { *m = RoomType{} }
func (*RoomType) ProtoMessage() {}
func (*RoomType) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{5}
}
func (m *RoomType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoomType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomType.Merge(m, src)
}
func (m *RoomType) XXX_Size() int {
	return m.Size()
}
func (m *RoomType) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomType.DiscardUnknown(m)
}

var xxx_messageInfo_RoomType proto.InternalMessageInfo

func (m *RoomType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RoomType) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RoomType) GetMaxGuest() uint32 {
	if m != nil {
		return m.MaxGuest
	}
	return 0
}

func (m *RoomType) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *RoomType) GetRoomImages() []*File {
	if m != nil {
		return m.RoomImages
	}
	return nil
}

func (m *RoomType) GetAmenities() []*Amenity {
	if m != nil {
		return m.Amenities
	}
	return nil
}

func (m *RoomType) GetQuantity() uint32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

type HotelAndBoatId struct {
	HotelId uint64 `protobuf:"varint,1,opt,name=hotel_id,json=hotelId,proto3" json:"hotel_id,omitempty"`
	BoatId  uint64 `protobuf:"varint,2,opt,name=boat_id,json=boatId,proto3" json:"boat_id,omitempty"`
}

func (m *HotelAndBoatId) Reset()      { *m = HotelAndBoatId{} }
func (*HotelAndBoatId) ProtoMessage() {}
func (*HotelAndBoatId) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{6}
}
func (m *HotelAndBoatId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HotelAndBoatId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HotelAndBoatId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HotelAndBoatId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HotelAndBoatId.Merge(m, src)
}
func (m *HotelAndBoatId) XXX_Size() int {
	return m.Size()
}
func (m *HotelAndBoatId) XXX_DiscardUnknown() {
	xxx_messageInfo_HotelAndBoatId.DiscardUnknown(m)
}

var xxx_messageInfo_HotelAndBoatId proto.InternalMessageInfo

func (m *HotelAndBoatId) GetHotelId() uint64 {
	if m != nil {
		return m.HotelId
	}
	return 0
}

func (m *HotelAndBoatId) GetBoatId() uint64 {
	if m != nil {
		return m.BoatId
	}
	return 0
}

type TripTemplate struct {
	Name        string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Images      []*File  `protobuf:"bytes,5,rep,name=images,proto3" json:"images,omitempty"`
	TripType    TripType `protobuf:"varint,6,opt,name=trip_type,json=tripType,proto3,enum=model.TripType" json:"trip_type,omitempty"`
	// Types that are valid to be assigned to ResidenceId:
	//	*TripTemplate_HotelAndBoatId
	//	*TripTemplate_LiveaboardId
	ResidenceId isTripTemplate_ResidenceId `protobuf_oneof:"residence_id"`
	Address     *Address                   `protobuf:"bytes,20,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *TripTemplate) Reset()      { *m = TripTemplate{} }
func (*TripTemplate) ProtoMessage() {}
func (*TripTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{7}
}
func (m *TripTemplate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TripTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TripTemplate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TripTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TripTemplate.Merge(m, src)
}
func (m *TripTemplate) XXX_Size() int {
	return m.Size()
}
func (m *TripTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_TripTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_TripTemplate proto.InternalMessageInfo

type isTripTemplate_ResidenceId interface {
	isTripTemplate_ResidenceId()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TripTemplate_HotelAndBoatId struct {
	HotelAndBoatId *HotelAndBoatId `protobuf:"bytes,8,opt,name=hotel_and_boat_id,json=hotelAndBoatId,proto3,oneof" json:"hotel_and_boat_id,omitempty"`
}
type TripTemplate_LiveaboardId struct {
	LiveaboardId uint64 `protobuf:"varint,9,opt,name=liveaboard_id,json=liveaboardId,proto3,oneof" json:"liveaboard_id,omitempty"`
}

func (*TripTemplate_HotelAndBoatId) isTripTemplate_ResidenceId() {}
func (*TripTemplate_LiveaboardId) isTripTemplate_ResidenceId()   {}

func (m *TripTemplate) GetResidenceId() isTripTemplate_ResidenceId {
	if m != nil {
		return m.ResidenceId
	}
	return nil
}

func (m *TripTemplate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TripTemplate) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TripTemplate) GetImages() []*File {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *TripTemplate) GetTripType() TripType {
	if m != nil {
		return m.TripType
	}
	return ONSHORE
}

func (m *TripTemplate) GetHotelAndBoatId() *HotelAndBoatId {
	if x, ok := m.GetResidenceId().(*TripTemplate_HotelAndBoatId); ok {
		return x.HotelAndBoatId
	}
	return nil
}

func (m *TripTemplate) GetLiveaboardId() uint64 {
	if x, ok := m.GetResidenceId().(*TripTemplate_LiveaboardId); ok {
		return x.LiveaboardId
	}
	return 0
}

func (m *TripTemplate) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TripTemplate) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TripTemplate_HotelAndBoatId)(nil),
		(*TripTemplate_LiveaboardId)(nil),
	}
}

type Trip struct {
	From                *time.Time `protobuf:"bytes,1,opt,name=from,proto3,stdtime" json:"from,omitempty"`
	To                  *time.Time `protobuf:"bytes,2,opt,name=to,proto3,stdtime" json:"to,omitempty"`
	MaxCapacity         uint32     `protobuf:"varint,3,opt,name=max_capacity,json=maxCapacity,proto3" json:"max_capacity,omitempty"`
	Price               float32    `protobuf:"fixed32,4,opt,name=price,proto3" json:"price,omitempty"`
	DiveMasterIds       []uint64   `protobuf:"varint,5,rep,packed,name=dive_master_ids,json=diveMasterIds,proto3" json:"dive_master_ids,omitempty"`
	LastReservationDate *time.Time `protobuf:"bytes,6,opt,name=last_reservation_date,json=lastReservationDate,proto3,stdtime" json:"last_reservation_date,omitempty"`
}

func (m *Trip) Reset()      { *m = Trip{} }
func (*Trip) ProtoMessage() {}
func (*Trip) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{8}
}
func (m *Trip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Trip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Trip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Trip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trip.Merge(m, src)
}
func (m *Trip) XXX_Size() int {
	return m.Size()
}
func (m *Trip) XXX_DiscardUnknown() {
	xxx_messageInfo_Trip.DiscardUnknown(m)
}

var xxx_messageInfo_Trip proto.InternalMessageInfo

func (m *Trip) GetFrom() *time.Time {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Trip) GetTo() *time.Time {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Trip) GetMaxCapacity() uint32 {
	if m != nil {
		return m.MaxCapacity
	}
	return 0
}

func (m *Trip) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Trip) GetDiveMasterIds() []uint64 {
	if m != nil {
		return m.DiveMasterIds
	}
	return nil
}

func (m *Trip) GetLastReservationDate() *time.Time {
	if m != nil {
		return m.LastReservationDate
	}
	return nil
}

type Hotel struct {
	HotelName string `protobuf:"bytes,1,opt,name=hotel_name,json=hotelName,proto3" json:"hotel_name,omitempty"`
	Star      uint32 `protobuf:"varint,2,opt,name=star,proto3" json:"star,omitempty"`
	// optional images when creating a new hotel
	Images           []*File     `protobuf:"bytes,4,rep,name=images,proto3" json:"images,omitempty"`
	RoomTypes        []*RoomType `protobuf:"bytes,5,rep,name=room_types,json=roomTypes,proto3" json:"room_types,omitempty"`
	HotelDescription string      `protobuf:"bytes,6,opt,name=hotel_description,json=hotelDescription,proto3" json:"hotel_description,omitempty"`
	Phone            string      `protobuf:"bytes,7,opt,name=phone,proto3" json:"phone,omitempty"`
	Address          *Address    `protobuf:"bytes,8,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *Hotel) Reset()      { *m = Hotel{} }
func (*Hotel) ProtoMessage() {}
func (*Hotel) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{9}
}
func (m *Hotel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hotel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hotel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hotel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hotel.Merge(m, src)
}
func (m *Hotel) XXX_Size() int {
	return m.Size()
}
func (m *Hotel) XXX_DiscardUnknown() {
	xxx_messageInfo_Hotel.DiscardUnknown(m)
}

var xxx_messageInfo_Hotel proto.InternalMessageInfo

func (m *Hotel) GetHotelName() string {
	if m != nil {
		return m.HotelName
	}
	return ""
}

func (m *Hotel) GetStar() uint32 {
	if m != nil {
		return m.Star
	}
	return 0
}

func (m *Hotel) GetImages() []*File {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *Hotel) GetRoomTypes() []*RoomType {
	if m != nil {
		return m.RoomTypes
	}
	return nil
}

func (m *Hotel) GetHotelDescription() string {
	if m != nil {
		return m.HotelDescription
	}
	return ""
}

func (m *Hotel) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Hotel) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type Liveaboard struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Length      uint32 `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	Width       uint32 `protobuf:"varint,4,opt,name=width,proto3" json:"width,omitempty"`
	// optional images when creating a new liveaboard
	Images        []*File     `protobuf:"bytes,6,rep,name=images,proto3" json:"images,omitempty"`
	RoomTypes     []*RoomType `protobuf:"bytes,7,rep,name=room_types,json=roomTypes,proto3" json:"room_types,omitempty"`
	TotalCapacity uint32      `protobuf:"varint,8,opt,name=total_capacity,json=totalCapacity,proto3" json:"total_capacity,omitempty"`
	DiverRooms    uint32      `protobuf:"varint,9,opt,name=diver_rooms,json=diverRooms,proto3" json:"diver_rooms,omitempty"`
	StaffRooms    uint32      `protobuf:"varint,10,opt,name=staff_rooms,json=staffRooms,proto3" json:"staff_rooms,omitempty"`
	Address       *Address    `protobuf:"bytes,11,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *Liveaboard) Reset()      { *m = Liveaboard{} }
func (*Liveaboard) ProtoMessage() {}
func (*Liveaboard) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{10}
}
func (m *Liveaboard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Liveaboard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Liveaboard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Liveaboard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Liveaboard.Merge(m, src)
}
func (m *Liveaboard) XXX_Size() int {
	return m.Size()
}
func (m *Liveaboard) XXX_DiscardUnknown() {
	xxx_messageInfo_Liveaboard.DiscardUnknown(m)
}

var xxx_messageInfo_Liveaboard proto.InternalMessageInfo

func (m *Liveaboard) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Liveaboard) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Liveaboard) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *Liveaboard) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Liveaboard) GetImages() []*File {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *Liveaboard) GetRoomTypes() []*RoomType {
	if m != nil {
		return m.RoomTypes
	}
	return nil
}

func (m *Liveaboard) GetTotalCapacity() uint32 {
	if m != nil {
		return m.TotalCapacity
	}
	return 0
}

func (m *Liveaboard) GetDiverRooms() uint32 {
	if m != nil {
		return m.DiverRooms
	}
	return 0
}

func (m *Liveaboard) GetStaffRooms() uint32 {
	if m != nil {
		return m.StaffRooms
	}
	return 0
}

func (m *Liveaboard) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type AddDiveMasterRequest struct {
	DiveMaster *DiveMaster `protobuf:"bytes,1,opt,name=dive_master,json=diveMaster,proto3" json:"dive_master,omitempty"`
}

func (m *AddDiveMasterRequest) Reset()      { *m = AddDiveMasterRequest{} }
func (*AddDiveMasterRequest) ProtoMessage() {}
func (*AddDiveMasterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{11}
}
func (m *AddDiveMasterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddDiveMasterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddDiveMasterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddDiveMasterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddDiveMasterRequest.Merge(m, src)
}
func (m *AddDiveMasterRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddDiveMasterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddDiveMasterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddDiveMasterRequest proto.InternalMessageInfo

func (m *AddDiveMasterRequest) GetDiveMaster() *DiveMaster {
	if m != nil {
		return m.DiveMaster
	}
	return nil
}

type AddStaffRequest struct {
	Staff *Staff `protobuf:"bytes,1,opt,name=staff,proto3" json:"staff,omitempty"`
}

func (m *AddStaffRequest) Reset()      { *m = AddStaffRequest{} }
func (*AddStaffRequest) ProtoMessage() {}
func (*AddStaffRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{12}
}
func (m *AddStaffRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddStaffRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddStaffRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddStaffRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddStaffRequest.Merge(m, src)
}
func (m *AddStaffRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddStaffRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddStaffRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddStaffRequest proto.InternalMessageInfo

func (m *AddStaffRequest) GetStaff() *Staff {
	if m != nil {
		return m.Staff
	}
	return nil
}

type AddTripTemplateRequest struct {
	TripTemplate *TripTemplate `protobuf:"bytes,1,opt,name=trip_template,json=tripTemplate,proto3" json:"trip_template,omitempty"`
	AgencyId     uint64        `protobuf:"varint,2,opt,name=agency_id,json=agencyId,proto3" json:"agency_id,omitempty"`
}

func (m *AddTripTemplateRequest) Reset()      { *m = AddTripTemplateRequest{} }
func (*AddTripTemplateRequest) ProtoMessage() {}
func (*AddTripTemplateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{13}
}
func (m *AddTripTemplateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddTripTemplateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddTripTemplateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddTripTemplateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddTripTemplateRequest.Merge(m, src)
}
func (m *AddTripTemplateRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddTripTemplateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddTripTemplateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddTripTemplateRequest proto.InternalMessageInfo

func (m *AddTripTemplateRequest) GetTripTemplate() *TripTemplate {
	if m != nil {
		return m.TripTemplate
	}
	return nil
}

func (m *AddTripTemplateRequest) GetAgencyId() uint64 {
	if m != nil {
		return m.AgencyId
	}
	return 0
}

type AddTripRequest struct {
	Trip         *Trip         `protobuf:"bytes,1,opt,name=trip,proto3" json:"trip,omitempty"`
	TripTemplate *TripTemplate `protobuf:"bytes,2,opt,name=trip_template,json=tripTemplate,proto3" json:"trip_template,omitempty"`
}

func (m *AddTripRequest) Reset()      { *m = AddTripRequest{} }
func (*AddTripRequest) ProtoMessage() {}
func (*AddTripRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{14}
}
func (m *AddTripRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddTripRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddTripRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddTripRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddTripRequest.Merge(m, src)
}
func (m *AddTripRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddTripRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddTripRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddTripRequest proto.InternalMessageInfo

func (m *AddTripRequest) GetTrip() *Trip {
	if m != nil {
		return m.Trip
	}
	return nil
}

func (m *AddTripRequest) GetTripTemplate() *TripTemplate {
	if m != nil {
		return m.TripTemplate
	}
	return nil
}

type AddDivingBoatRequest struct {
	DivingBoat *DivingBoat `protobuf:"bytes,1,opt,name=diving_boat,json=divingBoat,proto3" json:"diving_boat,omitempty"`
}

func (m *AddDivingBoatRequest) Reset()      { *m = AddDivingBoatRequest{} }
func (*AddDivingBoatRequest) ProtoMessage() {}
func (*AddDivingBoatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{15}
}
func (m *AddDivingBoatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddDivingBoatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddDivingBoatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddDivingBoatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddDivingBoatRequest.Merge(m, src)
}
func (m *AddDivingBoatRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddDivingBoatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddDivingBoatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddDivingBoatRequest proto.InternalMessageInfo

func (m *AddDivingBoatRequest) GetDivingBoat() *DivingBoat {
	if m != nil {
		return m.DivingBoat
	}
	return nil
}

type AddHotelRequest struct {
	Hotel *Hotel `protobuf:"bytes,1,opt,name=hotel,proto3" json:"hotel,omitempty"`
}

func (m *AddHotelRequest) Reset()      { *m = AddHotelRequest{} }
func (*AddHotelRequest) ProtoMessage() {}
func (*AddHotelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{16}
}
func (m *AddHotelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddHotelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddHotelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddHotelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddHotelRequest.Merge(m, src)
}
func (m *AddHotelRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddHotelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddHotelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddHotelRequest proto.InternalMessageInfo

func (m *AddHotelRequest) GetHotel() *Hotel {
	if m != nil {
		return m.Hotel
	}
	return nil
}

type AddLiveaboardRequest struct {
	Liveaboard *Liveaboard `protobuf:"bytes,1,opt,name=liveaboard,proto3" json:"liveaboard,omitempty"`
}

func (m *AddLiveaboardRequest) Reset()      { *m = AddLiveaboardRequest{} }
func (*AddLiveaboardRequest) ProtoMessage() {}
func (*AddLiveaboardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{17}
}
func (m *AddLiveaboardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddLiveaboardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddLiveaboardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddLiveaboardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddLiveaboardRequest.Merge(m, src)
}
func (m *AddLiveaboardRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddLiveaboardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddLiveaboardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddLiveaboardRequest proto.InternalMessageInfo

func (m *AddLiveaboardRequest) GetLiveaboard() *Liveaboard {
	if m != nil {
		return m.Liveaboard
	}
	return nil
}

// ListBoatsRequest
type ListBoatsRequest struct {
	Limit  uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *ListBoatsRequest) Reset()      { *m = ListBoatsRequest{} }
func (*ListBoatsRequest) ProtoMessage() {}
func (*ListBoatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{18}
}
func (m *ListBoatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBoatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBoatsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBoatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBoatsRequest.Merge(m, src)
}
func (m *ListBoatsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListBoatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBoatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListBoatsRequest proto.InternalMessageInfo

func (m *ListBoatsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListBoatsRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// ListBoatsResponse
type ListBoatsResponse struct {
	Boat *ListBoatsResponse_Boat `protobuf:"bytes,1,opt,name=boat,proto3" json:"boat,omitempty"`
}

func (m *ListBoatsResponse) Reset()      { *m = ListBoatsResponse{} }
func (*ListBoatsResponse) ProtoMessage() {}
func (*ListBoatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{19}
}
func (m *ListBoatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBoatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBoatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBoatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBoatsResponse.Merge(m, src)
}
func (m *ListBoatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListBoatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBoatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListBoatsResponse proto.InternalMessageInfo

func (m *ListBoatsResponse) GetBoat() *ListBoatsResponse_Boat {
	if m != nil {
		return m.Boat
	}
	return nil
}

type ListBoatsResponse_Boat struct {
	Id            uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string     `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Images        []*File    `protobuf:"bytes,20,rep,name=images,proto3" json:"images,omitempty"`
	TotalCapacity uint32     `protobuf:"varint,21,opt,name=total_capacity,json=totalCapacity,proto3" json:"total_capacity,omitempty"`
	DiverCapacity uint32     `protobuf:"varint,22,opt,name=diver_capacity,json=diverCapacity,proto3" json:"diver_capacity,omitempty"`
	StaffCapacity uint32     `protobuf:"varint,23,opt,name=staff_capacity,json=staffCapacity,proto3" json:"staff_capacity,omitempty"`
	CreatedAt     *time.Time `protobuf:"bytes,30,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt     *time.Time `protobuf:"bytes,40,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
}

func (m *ListBoatsResponse_Boat) Reset()      { *m = ListBoatsResponse_Boat{} }
func (*ListBoatsResponse_Boat) ProtoMessage() {}
func (*ListBoatsResponse_Boat) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{19, 0}
}
func (m *ListBoatsResponse_Boat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBoatsResponse_Boat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBoatsResponse_Boat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBoatsResponse_Boat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBoatsResponse_Boat.Merge(m, src)
}
func (m *ListBoatsResponse_Boat) XXX_Size() int {
	return m.Size()
}
func (m *ListBoatsResponse_Boat) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBoatsResponse_Boat.DiscardUnknown(m)
}

var xxx_messageInfo_ListBoatsResponse_Boat proto.InternalMessageInfo

func (m *ListBoatsResponse_Boat) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ListBoatsResponse_Boat) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListBoatsResponse_Boat) GetImages() []*File {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *ListBoatsResponse_Boat) GetTotalCapacity() uint32 {
	if m != nil {
		return m.TotalCapacity
	}
	return 0
}

func (m *ListBoatsResponse_Boat) GetDiverCapacity() uint32 {
	if m != nil {
		return m.DiverCapacity
	}
	return 0
}

func (m *ListBoatsResponse_Boat) GetStaffCapacity() uint32 {
	if m != nil {
		return m.StaffCapacity
	}
	return 0
}

func (m *ListBoatsResponse_Boat) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ListBoatsResponse_Boat) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

// ListDiveMastersRequest
type ListDiveMastersRequest struct {
	Limit  uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *ListDiveMastersRequest) Reset()      { *m = ListDiveMastersRequest{} }
func (*ListDiveMastersRequest) ProtoMessage() {}
func (*ListDiveMastersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{20}
}
func (m *ListDiveMastersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDiveMastersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDiveMastersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDiveMastersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDiveMastersRequest.Merge(m, src)
}
func (m *ListDiveMastersRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListDiveMastersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDiveMastersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDiveMastersRequest proto.InternalMessageInfo

func (m *ListDiveMastersRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListDiveMastersRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// ListDiveMastersResponse
type ListDiveMastersResponse struct {
	DiveMaster *ListDiveMastersResponse_DiveMaster `protobuf:"bytes,1,opt,name=dive_master,json=diveMaster,proto3" json:"dive_master,omitempty"`
}

func (m *ListDiveMastersResponse) Reset()      { *m = ListDiveMastersResponse{} }
func (*ListDiveMastersResponse) ProtoMessage() {}
func (*ListDiveMastersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{21}
}
func (m *ListDiveMastersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDiveMastersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDiveMastersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDiveMastersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDiveMastersResponse.Merge(m, src)
}
func (m *ListDiveMastersResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListDiveMastersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDiveMastersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDiveMastersResponse proto.InternalMessageInfo

func (m *ListDiveMastersResponse) GetDiveMaster() *ListDiveMastersResponse_DiveMaster {
	if m != nil {
		return m.DiveMaster
	}
	return nil
}

type ListDiveMastersResponse_DiveMaster struct {
	Id        uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName string     `protobuf:"bytes,10,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string     `protobuf:"bytes,20,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Level     LevelType  `protobuf:"varint,30,opt,name=level,proto3,enum=model.LevelType" json:"level,omitempty"`
	Documents []*File    `protobuf:"bytes,40,rep,name=documents,proto3" json:"documents,omitempty"`
	CreatedAt *time.Time `protobuf:"bytes,50,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt *time.Time `protobuf:"bytes,60,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
}

func (m *ListDiveMastersResponse_DiveMaster) Reset()      { *m = ListDiveMastersResponse_DiveMaster{} }
func (*ListDiveMastersResponse_DiveMaster) ProtoMessage() {}
func (*ListDiveMastersResponse_DiveMaster) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{21, 0}
}
func (m *ListDiveMastersResponse_DiveMaster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDiveMastersResponse_DiveMaster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDiveMastersResponse_DiveMaster.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDiveMastersResponse_DiveMaster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDiveMastersResponse_DiveMaster.Merge(m, src)
}
func (m *ListDiveMastersResponse_DiveMaster) XXX_Size() int {
	return m.Size()
}
func (m *ListDiveMastersResponse_DiveMaster) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDiveMastersResponse_DiveMaster.DiscardUnknown(m)
}

var xxx_messageInfo_ListDiveMastersResponse_DiveMaster proto.InternalMessageInfo

func (m *ListDiveMastersResponse_DiveMaster) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ListDiveMastersResponse_DiveMaster) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *ListDiveMastersResponse_DiveMaster) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *ListDiveMastersResponse_DiveMaster) GetLevel() LevelType {
	if m != nil {
		return m.Level
	}
	return INSTRUCTOR
}

func (m *ListDiveMastersResponse_DiveMaster) GetDocuments() []*File {
	if m != nil {
		return m.Documents
	}
	return nil
}

func (m *ListDiveMastersResponse_DiveMaster) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ListDiveMastersResponse_DiveMaster) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

// ListHotelsRequest
type ListHotelsRequest struct {
	Limit  uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *ListHotelsRequest) Reset()      { *m = ListHotelsRequest{} }
func (*ListHotelsRequest) ProtoMessage() {}
func (*ListHotelsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{22}
}
func (m *ListHotelsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListHotelsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListHotelsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListHotelsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListHotelsRequest.Merge(m, src)
}
func (m *ListHotelsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListHotelsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListHotelsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListHotelsRequest proto.InternalMessageInfo

func (m *ListHotelsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListHotelsRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// ListHotelsResponse
type ListHotelsResponse struct {
	Hotel *ListHotelsResponse_Hotel `protobuf:"bytes,1,opt,name=hotel,proto3" json:"hotel,omitempty"`
}

func (m *ListHotelsResponse) Reset()      { *m = ListHotelsResponse{} }
func (*ListHotelsResponse) ProtoMessage() {}
func (*ListHotelsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{23}
}
func (m *ListHotelsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListHotelsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListHotelsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListHotelsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListHotelsResponse.Merge(m, src)
}
func (m *ListHotelsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListHotelsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListHotelsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListHotelsResponse proto.InternalMessageInfo

func (m *ListHotelsResponse) GetHotel() *ListHotelsResponse_Hotel {
	if m != nil {
		return m.Hotel
	}
	return nil
}

type ListHotelsResponse_Hotel struct {
	Id          uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string     `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Description string     `protobuf:"bytes,20,opt,name=description,proto3" json:"description,omitempty"`
	Stars       uint32     `protobuf:"varint,30,opt,name=stars,proto3" json:"stars,omitempty"`
	Phone       string     `protobuf:"bytes,40,opt,name=phone,proto3" json:"phone,omitempty"`
	Address     *Address   `protobuf:"bytes,50,opt,name=address,proto3" json:"address,omitempty"`
	Images      []*File    `protobuf:"bytes,60,rep,name=images,proto3" json:"images,omitempty"`
	CreatedAt   *time.Time `protobuf:"bytes,70,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt   *time.Time `protobuf:"bytes,80,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
}

func (m *ListHotelsResponse_Hotel) Reset()      { *m = ListHotelsResponse_Hotel{} }
func (*ListHotelsResponse_Hotel) ProtoMessage() {}
func (*ListHotelsResponse_Hotel) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{23, 0}
}
func (m *ListHotelsResponse_Hotel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListHotelsResponse_Hotel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListHotelsResponse_Hotel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListHotelsResponse_Hotel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListHotelsResponse_Hotel.Merge(m, src)
}
func (m *ListHotelsResponse_Hotel) XXX_Size() int {
	return m.Size()
}
func (m *ListHotelsResponse_Hotel) XXX_DiscardUnknown() {
	xxx_messageInfo_ListHotelsResponse_Hotel.DiscardUnknown(m)
}

var xxx_messageInfo_ListHotelsResponse_Hotel proto.InternalMessageInfo

func (m *ListHotelsResponse_Hotel) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ListHotelsResponse_Hotel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListHotelsResponse_Hotel) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ListHotelsResponse_Hotel) GetStars() uint32 {
	if m != nil {
		return m.Stars
	}
	return 0
}

func (m *ListHotelsResponse_Hotel) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *ListHotelsResponse_Hotel) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *ListHotelsResponse_Hotel) GetImages() []*File {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *ListHotelsResponse_Hotel) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ListHotelsResponse_Hotel) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

// ListLiveaboardsRequest
type ListLiveaboardsRequest struct {
	Limit  uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *ListLiveaboardsRequest) Reset()      { *m = ListLiveaboardsRequest{} }
func (*ListLiveaboardsRequest) ProtoMessage() {}
func (*ListLiveaboardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{24}
}
func (m *ListLiveaboardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListLiveaboardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListLiveaboardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListLiveaboardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListLiveaboardsRequest.Merge(m, src)
}
func (m *ListLiveaboardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListLiveaboardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListLiveaboardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListLiveaboardsRequest proto.InternalMessageInfo

func (m *ListLiveaboardsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListLiveaboardsRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// ListLiveaboardsResponse
type ListLiveaboardsResponse struct {
	Liveaboard *ListLiveaboardsResponse_Liveaboard `protobuf:"bytes,1,opt,name=liveaboard,proto3" json:"liveaboard,omitempty"`
}

func (m *ListLiveaboardsResponse) Reset()      { *m = ListLiveaboardsResponse{} }
func (*ListLiveaboardsResponse) ProtoMessage() {}
func (*ListLiveaboardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{25}
}
func (m *ListLiveaboardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListLiveaboardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListLiveaboardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListLiveaboardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListLiveaboardsResponse.Merge(m, src)
}
func (m *ListLiveaboardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListLiveaboardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListLiveaboardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListLiveaboardsResponse proto.InternalMessageInfo

func (m *ListLiveaboardsResponse) GetLiveaboard() *ListLiveaboardsResponse_Liveaboard {
	if m != nil {
		return m.Liveaboard
	}
	return nil
}

type ListLiveaboardsResponse_Liveaboard struct {
	Id            uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string     `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Description   string     `protobuf:"bytes,20,opt,name=description,proto3" json:"description,omitempty"`
	Length        float32    `protobuf:"fixed32,30,opt,name=length,proto3" json:"length,omitempty"`
	Width         float32    `protobuf:"fixed32,40,opt,name=width,proto3" json:"width,omitempty"`
	Images        []*File    `protobuf:"bytes,50,rep,name=images,proto3" json:"images,omitempty"`
	TotalCapacity uint32     `protobuf:"varint,51,opt,name=total_capacity,json=totalCapacity,proto3" json:"total_capacity,omitempty"`
	DiverRooms    uint32     `protobuf:"varint,52,opt,name=diver_rooms,json=diverRooms,proto3" json:"diver_rooms,omitempty"`
	StaffRooms    uint32     `protobuf:"varint,53,opt,name=staff_rooms,json=staffRooms,proto3" json:"staff_rooms,omitempty"`
	Address       *Address   `protobuf:"bytes,54,opt,name=address,proto3" json:"address,omitempty"`
	CreatedAt     *time.Time `protobuf:"bytes,60,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt     *time.Time `protobuf:"bytes,70,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
}

func (m *ListLiveaboardsResponse_Liveaboard) Reset()      { *m = ListLiveaboardsResponse_Liveaboard{} }
func (*ListLiveaboardsResponse_Liveaboard) ProtoMessage() {}
func (*ListLiveaboardsResponse_Liveaboard) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{25, 0}
}
func (m *ListLiveaboardsResponse_Liveaboard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListLiveaboardsResponse_Liveaboard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListLiveaboardsResponse_Liveaboard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListLiveaboardsResponse_Liveaboard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListLiveaboardsResponse_Liveaboard.Merge(m, src)
}
func (m *ListLiveaboardsResponse_Liveaboard) XXX_Size() int {
	return m.Size()
}
func (m *ListLiveaboardsResponse_Liveaboard) XXX_DiscardUnknown() {
	xxx_messageInfo_ListLiveaboardsResponse_Liveaboard.DiscardUnknown(m)
}

var xxx_messageInfo_ListLiveaboardsResponse_Liveaboard proto.InternalMessageInfo

func (m *ListLiveaboardsResponse_Liveaboard) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ListLiveaboardsResponse_Liveaboard) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListLiveaboardsResponse_Liveaboard) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ListLiveaboardsResponse_Liveaboard) GetLength() float32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *ListLiveaboardsResponse_Liveaboard) GetWidth() float32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *ListLiveaboardsResponse_Liveaboard) GetImages() []*File {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *ListLiveaboardsResponse_Liveaboard) GetTotalCapacity() uint32 {
	if m != nil {
		return m.TotalCapacity
	}
	return 0
}

func (m *ListLiveaboardsResponse_Liveaboard) GetDiverRooms() uint32 {
	if m != nil {
		return m.DiverRooms
	}
	return 0
}

func (m *ListLiveaboardsResponse_Liveaboard) GetStaffRooms() uint32 {
	if m != nil {
		return m.StaffRooms
	}
	return 0
}

func (m *ListLiveaboardsResponse_Liveaboard) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *ListLiveaboardsResponse_Liveaboard) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ListLiveaboardsResponse_Liveaboard) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

// ListStaffsRequest
type ListStaffsRequest struct {
	Limit  uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *ListStaffsRequest) Reset()      { *m = ListStaffsRequest{} }
func (*ListStaffsRequest) ProtoMessage() {}
func (*ListStaffsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{26}
}
func (m *ListStaffsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListStaffsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListStaffsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListStaffsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListStaffsRequest.Merge(m, src)
}
func (m *ListStaffsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListStaffsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListStaffsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListStaffsRequest proto.InternalMessageInfo

func (m *ListStaffsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListStaffsRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// ListStaffsResponse
type ListStaffsResponse struct {
	Staff *ListStaffsResponse_Staff `protobuf:"bytes,1,opt,name=staff,proto3" json:"staff,omitempty"`
}

func (m *ListStaffsResponse) Reset()      { *m = ListStaffsResponse{} }
func (*ListStaffsResponse) ProtoMessage() {}
func (*ListStaffsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{27}
}
func (m *ListStaffsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListStaffsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListStaffsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListStaffsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListStaffsResponse.Merge(m, src)
}
func (m *ListStaffsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListStaffsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListStaffsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListStaffsResponse proto.InternalMessageInfo

func (m *ListStaffsResponse) GetStaff() *ListStaffsResponse_Staff {
	if m != nil {
		return m.Staff
	}
	return nil
}

type ListStaffsResponse_Staff struct {
	Id        uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName string     `protobuf:"bytes,10,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string     `protobuf:"bytes,20,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Position  string     `protobuf:"bytes,30,opt,name=position,proto3" json:"position,omitempty"`
	Gender    GenderType `protobuf:"varint,40,opt,name=gender,proto3,enum=model.GenderType" json:"gender,omitempty"`
	CreatedAt *time.Time `protobuf:"bytes,50,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt *time.Time `protobuf:"bytes,60,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
}

func (m *ListStaffsResponse_Staff) Reset()      { *m = ListStaffsResponse_Staff{} }
func (*ListStaffsResponse_Staff) ProtoMessage() {}
func (*ListStaffsResponse_Staff) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{27, 0}
}
func (m *ListStaffsResponse_Staff) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListStaffsResponse_Staff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListStaffsResponse_Staff.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListStaffsResponse_Staff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListStaffsResponse_Staff.Merge(m, src)
}
func (m *ListStaffsResponse_Staff) XXX_Size() int {
	return m.Size()
}
func (m *ListStaffsResponse_Staff) XXX_DiscardUnknown() {
	xxx_messageInfo_ListStaffsResponse_Staff.DiscardUnknown(m)
}

var xxx_messageInfo_ListStaffsResponse_Staff proto.InternalMessageInfo

func (m *ListStaffsResponse_Staff) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ListStaffsResponse_Staff) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *ListStaffsResponse_Staff) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *ListStaffsResponse_Staff) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *ListStaffsResponse_Staff) GetGender() GenderType {
	if m != nil {
		return m.Gender
	}
	return FEMALE
}

func (m *ListStaffsResponse_Staff) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ListStaffsResponse_Staff) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

// ListTripTemplatesRequest
type ListTripTemplatesRequest struct {
	Limit  uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *ListTripTemplatesRequest) Reset()      { *m = ListTripTemplatesRequest{} }
func (*ListTripTemplatesRequest) ProtoMessage() {}
func (*ListTripTemplatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{28}
}
func (m *ListTripTemplatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTripTemplatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTripTemplatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTripTemplatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTripTemplatesRequest.Merge(m, src)
}
func (m *ListTripTemplatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListTripTemplatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTripTemplatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTripTemplatesRequest proto.InternalMessageInfo

func (m *ListTripTemplatesRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListTripTemplatesRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// ListTripTemplatesResponse
type ListTripTemplatesResponse struct {
	Template *ListTripTemplatesResponse_TripTemplate `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
}

func (m *ListTripTemplatesResponse) Reset()      { *m = ListTripTemplatesResponse{} }
func (*ListTripTemplatesResponse) ProtoMessage() {}
func (*ListTripTemplatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{29}
}
func (m *ListTripTemplatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTripTemplatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTripTemplatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTripTemplatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTripTemplatesResponse.Merge(m, src)
}
func (m *ListTripTemplatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTripTemplatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTripTemplatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTripTemplatesResponse proto.InternalMessageInfo

func (m *ListTripTemplatesResponse) GetTemplate() *ListTripTemplatesResponse_TripTemplate {
	if m != nil {
		return m.Template
	}
	return nil
}

type ListTripTemplatesResponse_TripTemplate struct {
	Id           uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string     `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Description  string     `protobuf:"bytes,20,opt,name=description,proto3" json:"description,omitempty"`
	TripType     TripType   `protobuf:"varint,30,opt,name=trip_type,json=tripType,proto3,enum=model.TripType" json:"trip_type,omitempty"`
	HotelId      uint64     `protobuf:"varint,40,opt,name=hotel_id,json=hotelId,proto3" json:"hotel_id,omitempty"`
	BoatId       uint64     `protobuf:"varint,50,opt,name=boat_id,json=boatId,proto3" json:"boat_id,omitempty"`
	LiveaboardId uint64     `protobuf:"varint,60,opt,name=liveaboard_id,json=liveaboardId,proto3" json:"liveaboard_id,omitempty"`
	Images       []*File    `protobuf:"bytes,70,rep,name=images,proto3" json:"images,omitempty"`
	CreatedAt    *time.Time `protobuf:"bytes,80,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt    *time.Time `protobuf:"bytes,90,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
}

func (m *ListTripTemplatesResponse_TripTemplate) Reset() {
	*m = ListTripTemplatesResponse_TripTemplate{}
}
func (*ListTripTemplatesResponse_TripTemplate) ProtoMessage() {}
func (*ListTripTemplatesResponse_TripTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{29, 0}
}
func (m *ListTripTemplatesResponse_TripTemplate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTripTemplatesResponse_TripTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTripTemplatesResponse_TripTemplate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTripTemplatesResponse_TripTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTripTemplatesResponse_TripTemplate.Merge(m, src)
}
func (m *ListTripTemplatesResponse_TripTemplate) XXX_Size() int {
	return m.Size()
}
func (m *ListTripTemplatesResponse_TripTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTripTemplatesResponse_TripTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_ListTripTemplatesResponse_TripTemplate proto.InternalMessageInfo

func (m *ListTripTemplatesResponse_TripTemplate) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ListTripTemplatesResponse_TripTemplate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListTripTemplatesResponse_TripTemplate) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ListTripTemplatesResponse_TripTemplate) GetTripType() TripType {
	if m != nil {
		return m.TripType
	}
	return ONSHORE
}

func (m *ListTripTemplatesResponse_TripTemplate) GetHotelId() uint64 {
	if m != nil {
		return m.HotelId
	}
	return 0
}

func (m *ListTripTemplatesResponse_TripTemplate) GetBoatId() uint64 {
	if m != nil {
		return m.BoatId
	}
	return 0
}

func (m *ListTripTemplatesResponse_TripTemplate) GetLiveaboardId() uint64 {
	if m != nil {
		return m.LiveaboardId
	}
	return 0
}

func (m *ListTripTemplatesResponse_TripTemplate) GetImages() []*File {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *ListTripTemplatesResponse_TripTemplate) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ListTripTemplatesResponse_TripTemplate) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

// ListTripsRequest
type ListTripsRequest struct {
	Limit  uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *ListTripsRequest) Reset()      { *m = ListTripsRequest{} }
func (*ListTripsRequest) ProtoMessage() {}
func (*ListTripsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{30}
}
func (m *ListTripsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTripsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTripsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTripsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTripsRequest.Merge(m, src)
}
func (m *ListTripsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListTripsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTripsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTripsRequest proto.InternalMessageInfo

func (m *ListTripsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListTripsRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// ListTripsResponse
type ListTripsResponse struct {
	Trip *ListTripsResponse_Trip `protobuf:"bytes,1,opt,name=trip,proto3" json:"trip,omitempty"`
}

func (m *ListTripsResponse) Reset()      { *m = ListTripsResponse{} }
func (*ListTripsResponse) ProtoMessage() {}
func (*ListTripsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{31}
}
func (m *ListTripsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTripsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTripsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTripsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTripsResponse.Merge(m, src)
}
func (m *ListTripsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTripsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTripsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTripsResponse proto.InternalMessageInfo

func (m *ListTripsResponse) GetTrip() *ListTripsResponse_Trip {
	if m != nil {
		return m.Trip
	}
	return nil
}

type ListTripsResponse_Trip struct {
	Id                  uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TripTemplateId      uint64     `protobuf:"varint,20,opt,name=trip_template_id,json=tripTemplateId,proto3" json:"trip_template_id,omitempty"`
	MaxGuest            uint32     `protobuf:"varint,30,opt,name=max_guest,json=maxGuest,proto3" json:"max_guest,omitempty"`
	Price               float32    `protobuf:"fixed32,40,opt,name=price,proto3" json:"price,omitempty"`
	FromDate            *time.Time `protobuf:"bytes,50,opt,name=from_date,json=fromDate,proto3,stdtime" json:"from_date,omitempty"`
	ToDate              *time.Time `protobuf:"bytes,60,opt,name=to_date,json=toDate,proto3,stdtime" json:"to_date,omitempty"`
	LastReservationDate *time.Time `protobuf:"bytes,70,opt,name=last_reservation_date,json=lastReservationDate,proto3,stdtime" json:"last_reservation_date,omitempty"`
	CreatedAt           *time.Time `protobuf:"bytes,80,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt           *time.Time `protobuf:"bytes,90,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
}

func (m *ListTripsResponse_Trip) Reset()      { *m = ListTripsResponse_Trip{} }
func (*ListTripsResponse_Trip) ProtoMessage() {}
func (*ListTripsResponse_Trip) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{31, 0}
}
func (m *ListTripsResponse_Trip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTripsResponse_Trip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTripsResponse_Trip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTripsResponse_Trip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTripsResponse_Trip.Merge(m, src)
}
func (m *ListTripsResponse_Trip) XXX_Size() int {
	return m.Size()
}
func (m *ListTripsResponse_Trip) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTripsResponse_Trip.DiscardUnknown(m)
}

var xxx_messageInfo_ListTripsResponse_Trip proto.InternalMessageInfo

func (m *ListTripsResponse_Trip) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ListTripsResponse_Trip) GetTripTemplateId() uint64 {
	if m != nil {
		return m.TripTemplateId
	}
	return 0
}

func (m *ListTripsResponse_Trip) GetMaxGuest() uint32 {
	if m != nil {
		return m.MaxGuest
	}
	return 0
}

func (m *ListTripsResponse_Trip) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *ListTripsResponse_Trip) GetFromDate() *time.Time {
	if m != nil {
		return m.FromDate
	}
	return nil
}

func (m *ListTripsResponse_Trip) GetToDate() *time.Time {
	if m != nil {
		return m.ToDate
	}
	return nil
}

func (m *ListTripsResponse_Trip) GetLastReservationDate() *time.Time {
	if m != nil {
		return m.LastReservationDate
	}
	return nil
}

func (m *ListTripsResponse_Trip) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ListTripsResponse_Trip) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type SearchTripsOptions struct {
	// allow either country or city for location filtering
	//
	// Types that are valid to be assigned to LocationFilter:
	//	*SearchTripsOptions_Country
	//	*SearchTripsOptions_City
	//	*SearchTripsOptions_Region
	LocationFilter isSearchTripsOptions_LocationFilter `protobuf_oneof:"location_filter"`
	Divers         uint32                              `protobuf:"varint,10,opt,name=divers,proto3" json:"divers,omitempty"`
	TripType       TripType                            `protobuf:"varint,15,opt,name=trip_type,json=tripType,proto3,enum=model.TripType" json:"trip_type,omitempty"`
	StartDate      *time.Time                          `protobuf:"bytes,20,opt,name=start_date,json=startDate,proto3,stdtime" json:"start_date,omitempty"`
	EndDate        *time.Time                          `protobuf:"bytes,30,opt,name=end_date,json=endDate,proto3,stdtime" json:"end_date,omitempty"`
}

func (m *SearchTripsOptions) Reset()      { *m = SearchTripsOptions{} }
func (*SearchTripsOptions) ProtoMessage() {}
func (*SearchTripsOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{32}
}
func (m *SearchTripsOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchTripsOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchTripsOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchTripsOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchTripsOptions.Merge(m, src)
}
func (m *SearchTripsOptions) XXX_Size() int {
	return m.Size()
}
func (m *SearchTripsOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchTripsOptions.DiscardUnknown(m)
}

var xxx_messageInfo_SearchTripsOptions proto.InternalMessageInfo

type isSearchTripsOptions_LocationFilter interface {
	isSearchTripsOptions_LocationFilter()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SearchTripsOptions_Country struct {
	Country string `protobuf:"bytes,1,opt,name=country,proto3,oneof" json:"country,omitempty"`
}
type SearchTripsOptions_City struct {
	City string `protobuf:"bytes,2,opt,name=city,proto3,oneof" json:"city,omitempty"`
}
type SearchTripsOptions_Region struct {
	Region string `protobuf:"bytes,3,opt,name=region,proto3,oneof" json:"region,omitempty"`
}

func (*SearchTripsOptions_Country) isSearchTripsOptions_LocationFilter() {}
func (*SearchTripsOptions_City) isSearchTripsOptions_LocationFilter()    {}
func (*SearchTripsOptions_Region) isSearchTripsOptions_LocationFilter()  {}

func (m *SearchTripsOptions) GetLocationFilter() isSearchTripsOptions_LocationFilter {
	if m != nil {
		return m.LocationFilter
	}
	return nil
}

func (m *SearchTripsOptions) GetCountry() string {
	if x, ok := m.GetLocationFilter().(*SearchTripsOptions_Country); ok {
		return x.Country
	}
	return ""
}

func (m *SearchTripsOptions) GetCity() string {
	if x, ok := m.GetLocationFilter().(*SearchTripsOptions_City); ok {
		return x.City
	}
	return ""
}

func (m *SearchTripsOptions) GetRegion() string {
	if x, ok := m.GetLocationFilter().(*SearchTripsOptions_Region); ok {
		return x.Region
	}
	return ""
}

func (m *SearchTripsOptions) GetDivers() uint32 {
	if m != nil {
		return m.Divers
	}
	return 0
}

func (m *SearchTripsOptions) GetTripType() TripType {
	if m != nil {
		return m.TripType
	}
	return ONSHORE
}

func (m *SearchTripsOptions) GetStartDate() *time.Time {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *SearchTripsOptions) GetEndDate() *time.Time {
	if m != nil {
		return m.EndDate
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SearchTripsOptions) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SearchTripsOptions_Country)(nil),
		(*SearchTripsOptions_City)(nil),
		(*SearchTripsOptions_Region)(nil),
	}
}

type SearchTripsRequest struct {
	SearchTripsOptions *SearchTripsOptions `protobuf:"bytes,1,opt,name=search_trips_options,json=searchTripsOptions,proto3" json:"search_trips_options,omitempty"`
	Limit              uint64              `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset             uint64              `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *SearchTripsRequest) Reset()      { *m = SearchTripsRequest{} }
func (*SearchTripsRequest) ProtoMessage() {}
func (*SearchTripsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{33}
}
func (m *SearchTripsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchTripsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchTripsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchTripsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchTripsRequest.Merge(m, src)
}
func (m *SearchTripsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SearchTripsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchTripsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchTripsRequest proto.InternalMessageInfo

func (m *SearchTripsRequest) GetSearchTripsOptions() *SearchTripsOptions {
	if m != nil {
		return m.SearchTripsOptions
	}
	return nil
}

func (m *SearchTripsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchTripsRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type SearchTripsResponse struct {
	Trip *SearchTripsResponse_Trip `protobuf:"bytes,1,opt,name=trip,proto3" json:"trip,omitempty"`
}

func (m *SearchTripsResponse) Reset()      { *m = SearchTripsResponse{} }
func (*SearchTripsResponse) ProtoMessage() {}
func (*SearchTripsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{34}
}
func (m *SearchTripsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchTripsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchTripsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchTripsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchTripsResponse.Merge(m, src)
}
func (m *SearchTripsResponse) XXX_Size() int {
	return m.Size()
}
func (m *SearchTripsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchTripsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SearchTripsResponse proto.InternalMessageInfo

func (m *SearchTripsResponse) GetTrip() *SearchTripsResponse_Trip {
	if m != nil {
		return m.Trip
	}
	return nil
}

type SearchTripsResponse_Trip struct {
	Id                  uint64                            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TripTemplateId      uint64                            `protobuf:"varint,20,opt,name=trip_template_id,json=tripTemplateId,proto3" json:"trip_template_id,omitempty"`
	MaxGuest            uint32                            `protobuf:"varint,30,opt,name=max_guest,json=maxGuest,proto3" json:"max_guest,omitempty"`
	Price               float32                           `protobuf:"fixed32,40,opt,name=price,proto3" json:"price,omitempty"`
	DiveMasters         []*DiveMaster                     `protobuf:"bytes,50,rep,name=dive_masters,json=diveMasters,proto3" json:"dive_masters,omitempty"`
	FromDate            *time.Time                        `protobuf:"bytes,60,opt,name=from_date,json=fromDate,proto3,stdtime" json:"from_date,omitempty"`
	ToDate              *time.Time                        `protobuf:"bytes,70,opt,name=to_date,json=toDate,proto3,stdtime" json:"to_date,omitempty"`
	LastReservationDate *time.Time                        `protobuf:"bytes,80,opt,name=last_reservation_date,json=lastReservationDate,proto3,stdtime" json:"last_reservation_date,omitempty"`
	CreatedAt           *time.Time                        `protobuf:"bytes,90,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt           *time.Time                        `protobuf:"bytes,100,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	TripTemplate        *SearchTripsResponse_TripTemplate `protobuf:"bytes,110,opt,name=trip_template,json=tripTemplate,proto3" json:"trip_template,omitempty"`
}

func (m *SearchTripsResponse_Trip) Reset()      { *m = SearchTripsResponse_Trip{} }
func (*SearchTripsResponse_Trip) ProtoMessage() {}
func (*SearchTripsResponse_Trip) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{34, 0}
}
func (m *SearchTripsResponse_Trip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchTripsResponse_Trip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchTripsResponse_Trip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchTripsResponse_Trip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchTripsResponse_Trip.Merge(m, src)
}
func (m *SearchTripsResponse_Trip) XXX_Size() int {
	return m.Size()
}
func (m *SearchTripsResponse_Trip) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchTripsResponse_Trip.DiscardUnknown(m)
}

var xxx_messageInfo_SearchTripsResponse_Trip proto.InternalMessageInfo

func (m *SearchTripsResponse_Trip) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SearchTripsResponse_Trip) GetTripTemplateId() uint64 {
	if m != nil {
		return m.TripTemplateId
	}
	return 0
}

func (m *SearchTripsResponse_Trip) GetMaxGuest() uint32 {
	if m != nil {
		return m.MaxGuest
	}
	return 0
}

func (m *SearchTripsResponse_Trip) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *SearchTripsResponse_Trip) GetDiveMasters() []*DiveMaster {
	if m != nil {
		return m.DiveMasters
	}
	return nil
}

func (m *SearchTripsResponse_Trip) GetFromDate() *time.Time {
	if m != nil {
		return m.FromDate
	}
	return nil
}

func (m *SearchTripsResponse_Trip) GetToDate() *time.Time {
	if m != nil {
		return m.ToDate
	}
	return nil
}

func (m *SearchTripsResponse_Trip) GetLastReservationDate() *time.Time {
	if m != nil {
		return m.LastReservationDate
	}
	return nil
}

func (m *SearchTripsResponse_Trip) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *SearchTripsResponse_Trip) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *SearchTripsResponse_Trip) GetTripTemplate() *SearchTripsResponse_TripTemplate {
	if m != nil {
		return m.TripTemplate
	}
	return nil
}

type SearchTripsResponse_TripTemplate struct {
	Id           uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string     `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Description  string     `protobuf:"bytes,20,opt,name=description,proto3" json:"description,omitempty"`
	TripType     TripType   `protobuf:"varint,30,opt,name=trip_type,json=tripType,proto3,enum=model.TripType" json:"trip_type,omitempty"`
	HotelId      uint64     `protobuf:"varint,40,opt,name=hotel_id,json=hotelId,proto3" json:"hotel_id,omitempty"`
	BoatId       uint64     `protobuf:"varint,50,opt,name=boat_id,json=boatId,proto3" json:"boat_id,omitempty"`
	LiveaboardId uint64     `protobuf:"varint,60,opt,name=liveaboard_id,json=liveaboardId,proto3" json:"liveaboard_id,omitempty"`
	Images       []*File    `protobuf:"bytes,70,rep,name=images,proto3" json:"images,omitempty"`
	Address      *Address   `protobuf:"bytes,80,opt,name=address,proto3" json:"address,omitempty"`
	CreatedAt    *time.Time `protobuf:"bytes,90,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt    *time.Time `protobuf:"bytes,100,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
}

func (m *SearchTripsResponse_TripTemplate) Reset()      { *m = SearchTripsResponse_TripTemplate{} }
func (*SearchTripsResponse_TripTemplate) ProtoMessage() {}
func (*SearchTripsResponse_TripTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{34, 1}
}
func (m *SearchTripsResponse_TripTemplate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchTripsResponse_TripTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchTripsResponse_TripTemplate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchTripsResponse_TripTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchTripsResponse_TripTemplate.Merge(m, src)
}
func (m *SearchTripsResponse_TripTemplate) XXX_Size() int {
	return m.Size()
}
func (m *SearchTripsResponse_TripTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchTripsResponse_TripTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_SearchTripsResponse_TripTemplate proto.InternalMessageInfo

func (m *SearchTripsResponse_TripTemplate) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SearchTripsResponse_TripTemplate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SearchTripsResponse_TripTemplate) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SearchTripsResponse_TripTemplate) GetTripType() TripType {
	if m != nil {
		return m.TripType
	}
	return ONSHORE
}

func (m *SearchTripsResponse_TripTemplate) GetHotelId() uint64 {
	if m != nil {
		return m.HotelId
	}
	return 0
}

func (m *SearchTripsResponse_TripTemplate) GetBoatId() uint64 {
	if m != nil {
		return m.BoatId
	}
	return 0
}

func (m *SearchTripsResponse_TripTemplate) GetLiveaboardId() uint64 {
	if m != nil {
		return m.LiveaboardId
	}
	return 0
}

func (m *SearchTripsResponse_TripTemplate) GetImages() []*File {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *SearchTripsResponse_TripTemplate) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *SearchTripsResponse_TripTemplate) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *SearchTripsResponse_TripTemplate) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func init() {
	proto.RegisterType((*DiveMaster)(nil), "agency.DiveMaster")
	proto.RegisterType((*DiveMasterFirstAndLastName)(nil), "agency.DiveMasterFirstAndLastName")
	proto.RegisterType((*Staff)(nil), "agency.Staff")
	proto.RegisterType((*DivingBoat)(nil), "agency.DivingBoat")
	proto.RegisterType((*Amenity)(nil), "agency.Amenity")
	proto.RegisterType((*RoomType)(nil), "agency.RoomType")
	proto.RegisterType((*HotelAndBoatId)(nil), "agency.HotelAndBoatId")
	proto.RegisterType((*TripTemplate)(nil), "agency.TripTemplate")
	proto.RegisterType((*Trip)(nil), "agency.Trip")
	proto.RegisterType((*Hotel)(nil), "agency.Hotel")
	proto.RegisterType((*Liveaboard)(nil), "agency.Liveaboard")
	proto.RegisterType((*AddDiveMasterRequest)(nil), "agency.AddDiveMasterRequest")
	proto.RegisterType((*AddStaffRequest)(nil), "agency.AddStaffRequest")
	proto.RegisterType((*AddTripTemplateRequest)(nil), "agency.AddTripTemplateRequest")
	proto.RegisterType((*AddTripRequest)(nil), "agency.AddTripRequest")
	proto.RegisterType((*AddDivingBoatRequest)(nil), "agency.AddDivingBoatRequest")
	proto.RegisterType((*AddHotelRequest)(nil), "agency.AddHotelRequest")
	proto.RegisterType((*AddLiveaboardRequest)(nil), "agency.AddLiveaboardRequest")
	proto.RegisterType((*ListBoatsRequest)(nil), "agency.ListBoatsRequest")
	proto.RegisterType((*ListBoatsResponse)(nil), "agency.ListBoatsResponse")
	proto.RegisterType((*ListBoatsResponse_Boat)(nil), "agency.ListBoatsResponse.Boat")
	proto.RegisterType((*ListDiveMastersRequest)(nil), "agency.ListDiveMastersRequest")
	proto.RegisterType((*ListDiveMastersResponse)(nil), "agency.ListDiveMastersResponse")
	proto.RegisterType((*ListDiveMastersResponse_DiveMaster)(nil), "agency.ListDiveMastersResponse.DiveMaster")
	proto.RegisterType((*ListHotelsRequest)(nil), "agency.ListHotelsRequest")
	proto.RegisterType((*ListHotelsResponse)(nil), "agency.ListHotelsResponse")
	proto.RegisterType((*ListHotelsResponse_Hotel)(nil), "agency.ListHotelsResponse.Hotel")
	proto.RegisterType((*ListLiveaboardsRequest)(nil), "agency.ListLiveaboardsRequest")
	proto.RegisterType((*ListLiveaboardsResponse)(nil), "agency.ListLiveaboardsResponse")
	proto.RegisterType((*ListLiveaboardsResponse_Liveaboard)(nil), "agency.ListLiveaboardsResponse.Liveaboard")
	proto.RegisterType((*ListStaffsRequest)(nil), "agency.ListStaffsRequest")
	proto.RegisterType((*ListStaffsResponse)(nil), "agency.ListStaffsResponse")
	proto.RegisterType((*ListStaffsResponse_Staff)(nil), "agency.ListStaffsResponse.Staff")
	proto.RegisterType((*ListTripTemplatesRequest)(nil), "agency.ListTripTemplatesRequest")
	proto.RegisterType((*ListTripTemplatesResponse)(nil), "agency.ListTripTemplatesResponse")
	proto.RegisterType((*ListTripTemplatesResponse_TripTemplate)(nil), "agency.ListTripTemplatesResponse.TripTemplate")
	proto.RegisterType((*ListTripsRequest)(nil), "agency.ListTripsRequest")
	proto.RegisterType((*ListTripsResponse)(nil), "agency.ListTripsResponse")
	proto.RegisterType((*ListTripsResponse_Trip)(nil), "agency.ListTripsResponse.Trip")
	proto.RegisterType((*SearchTripsOptions)(nil), "agency.SearchTripsOptions")
	proto.RegisterType((*SearchTripsRequest)(nil), "agency.SearchTripsRequest")
	proto.RegisterType((*SearchTripsResponse)(nil), "agency.SearchTripsResponse")
	proto.RegisterType((*SearchTripsResponse_Trip)(nil), "agency.SearchTripsResponse.Trip")
	proto.RegisterType((*SearchTripsResponse_TripTemplate)(nil), "agency.SearchTripsResponse.TripTemplate")
}

func init() { proto.RegisterFile("agency.proto", fileDescriptor_614a4be5fd9deed0) }

var fileDescriptor_614a4be5fd9deed0 = []byte{
	// 2307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0xcd, 0x6f, 0x1b, 0xc7,
	0x15, 0xe7, 0x2e, 0x29, 0x7e, 0x3c, 0x8a, 0x94, 0x3d, 0x61, 0x64, 0x9a, 0x6e, 0xd7, 0x0a, 0x83,
	0x04, 0x4c, 0x9a, 0xd0, 0x02, 0xed, 0x18, 0x70, 0xeb, 0xc2, 0xa5, 0x22, 0x2b, 0x52, 0xa2, 0xb4,
	0xc6, 0x5a, 0x87, 0xc2, 0x17, 0x62, 0xc5, 0x1d, 0x52, 0x8b, 0x72, 0x77, 0x99, 0xdd, 0x91, 0x6a,
	0xdd, 0x8a, 0x1e, 0x7b, 0x89, 0x4f, 0x05, 0x0a, 0xf4, 0x54, 0xa0, 0x40, 0x0f, 0xed, 0xb9, 0x40,
	0x81, 0x1e, 0x5b, 0x04, 0x69, 0x0f, 0x3e, 0xa6, 0xa7, 0xd6, 0xf2, 0xa5, 0x40, 0x73, 0xc8, 0x3f,
	0x50, 0xa0, 0x98, 0x8f, 0xe5, 0xce, 0x90, 0xcb, 0x0f, 0x51, 0x02, 0x92, 0x43, 0x6f, 0x3b, 0x33,
	0x6f, 0x1e, 0xdf, 0xbc, 0x8f, 0xdf, 0xbc, 0xf9, 0x11, 0x56, 0xad, 0x3e, 0xf6, 0xba, 0xa7, 0xcd,
	0x61, 0xe0, 0x13, 0x1f, 0x65, 0xf9, 0xa8, 0x56, 0x74, 0x7d, 0x1b, 0x0f, 0xf8, 0x64, 0xed, 0x46,
	0xdf, 0xf7, 0xfb, 0x03, 0x7c, 0x8b, 0x8d, 0x0e, 0x8f, 0x7b, 0xb7, 0xb0, 0x3b, 0x24, 0x62, 0x47,
	0xed, 0xe6, 0xf8, 0x22, 0x71, 0x5c, 0x1c, 0x12, 0xcb, 0x1d, 0x0a, 0x81, 0x77, 0xfb, 0x0e, 0x39,
	0x3a, 0x3e, 0x6c, 0x76, 0x7d, 0xf7, 0x56, 0xdf, 0xef, 0xfb, 0xb1, 0x24, 0x1d, 0xb1, 0x01, 0xfb,
	0xe2, 0xe2, 0xf5, 0xcf, 0x35, 0x80, 0x6d, 0xe7, 0x04, 0x7f, 0x6c, 0x85, 0x04, 0x07, 0xe8, 0xdb,
	0x00, 0x3d, 0x27, 0x08, 0x49, 0xc7, 0xb3, 0x5c, 0x5c, 0xd5, 0x36, 0xb4, 0x46, 0xc1, 0x2c, 0xb0,
	0x99, 0x1f, 0x5a, 0x2e, 0x46, 0x37, 0xa0, 0x30, 0xb0, 0xa2, 0x55, 0x9d, 0xad, 0xe6, 0xe9, 0x04,
	0x5b, 0x7c, 0x13, 0x56, 0x06, 0xf8, 0x04, 0x0f, 0xaa, 0xe9, 0x0d, 0xad, 0x51, 0x6e, 0x5d, 0x69,
	0xf2, 0x43, 0xed, 0xd3, 0xb9, 0x83, 0xd3, 0x21, 0x36, 0xf9, 0x32, 0x7a, 0x07, 0x8a, 0xbd, 0xc0,
	0xf7, 0x48, 0xc7, 0x71, 0xad, 0x3e, 0xae, 0x66, 0x36, 0xb4, 0x46, 0xb1, 0x55, 0x14, 0xd2, 0x3b,
	0xce, 0x00, 0x9b, 0xc0, 0xd6, 0xf7, 0xe8, 0x32, 0x7a, 0x1b, 0xe0, 0xd0, 0xea, 0xfe, 0x44, 0x08,
	0xaf, 0x4c, 0x0a, 0x17, 0xe8, 0x32, 0x93, 0xad, 0xff, 0x18, 0x6a, 0xf1, 0x59, 0x76, 0xa8, 0xd5,
	0x6d, 0xcf, 0xde, 0x8f, 0xec, 0xbb, 0xc0, 0xd9, 0xea, 0xbf, 0xd0, 0x60, 0xe5, 0x31, 0xb1, 0x7a,
	0xbd, 0x0b, 0x79, 0xa8, 0x06, 0xf9, 0xa1, 0x1f, 0x3a, 0xc4, 0xf1, 0x3d, 0xe6, 0xa4, 0x82, 0x39,
	0x1a, 0xa3, 0xb7, 0x20, 0xdb, 0xc7, 0x9e, 0x8d, 0x03, 0xe6, 0x90, 0x72, 0xeb, 0xaa, 0x38, 0xe3,
	0x07, 0x6c, 0x92, 0xf9, 0x4f, 0x08, 0xd4, 0x3f, 0xd5, 0x59, 0xcc, 0x1c, 0xaf, 0xbf, 0xe5, 0x5b,
	0x04, 0x21, 0xc8, 0x48, 0xb6, 0xb0, 0x6f, 0xea, 0xe3, 0x43, 0xdf, 0x12, 0x2e, 0x0e, 0xab, 0xfa,
	0x46, 0x7a, 0xc2, 0xc7, 0x74, 0x9d, 0xb9, 0x2d, 0x44, 0x1b, 0x50, 0xb4, 0x71, 0xd8, 0x0d, 0x9c,
	0xa1, 0x64, 0x9a, 0x3c, 0x85, 0xde, 0x80, 0x32, 0xf1, 0x89, 0x35, 0xe8, 0x74, 0xad, 0xa1, 0xd5,
	0x75, 0xc8, 0x29, 0xb3, 0xb2, 0x64, 0x96, 0xd8, 0xec, 0xfb, 0x62, 0x92, 0x8a, 0xd9, 0xce, 0x09,
	0x0e, 0x62, 0xb1, 0x15, 0x2e, 0xc6, 0x66, 0x65, 0xb1, 0x90, 0x3a, 0x33, 0x16, 0xcb, 0x72, 0x31,
	0x36, 0x3b, 0x12, 0x6b, 0x40, 0xce, 0xb2, 0xed, 0x00, 0x87, 0x61, 0x35, 0xc7, 0xe2, 0x5e, 0x16,
	0x07, 0x68, 0xf3, 0x59, 0x33, 0x5a, 0xae, 0x3f, 0x80, 0x5c, 0xdb, 0xc5, 0x1e, 0xdd, 0x94, 0xe4,
	0x8d, 0xb1, 0xf3, 0xe9, 0x13, 0xe7, 0xab, 0x7f, 0xa9, 0x41, 0xde, 0xf4, 0x7d, 0x97, 0xfa, 0x79,
	0x39, 0x15, 0x34, 0xf2, 0xae, 0xf5, 0xb4, 0xd3, 0x3f, 0xc6, 0x21, 0x61, 0x2e, 0x2c, 0x99, 0x79,
	0xd7, 0x7a, 0xfa, 0x01, 0x1d, 0xa3, 0x0a, 0xac, 0x0c, 0x03, 0xa7, 0xcb, 0xb3, 0x5d, 0x37, 0xf9,
	0x80, 0x46, 0x29, 0xf0, 0x7d, 0x37, 0x8a, 0xd2, 0x4a, 0x42, 0x94, 0xe8, 0xba, 0x88, 0xd2, 0xbb,
	0x50, 0xb0, 0xd8, 0x21, 0x1d, 0x1c, 0x56, 0xb3, 0x4c, 0x76, 0xad, 0x29, 0xe0, 0x44, 0x9c, 0xde,
	0x8c, 0x25, 0x68, 0xb2, 0x7d, 0x72, 0x6c, 0x79, 0x84, 0xba, 0x37, 0xc7, 0xcd, 0x89, 0xc6, 0xf5,
	0x6d, 0x28, 0xef, 0xfa, 0x04, 0x0f, 0xda, 0x9e, 0x4d, 0x53, 0x68, 0xcf, 0x46, 0xd7, 0x21, 0x7f,
	0x44, 0x67, 0x3a, 0x8e, 0xcd, 0xce, 0x9d, 0x31, 0x73, 0x6c, 0xbc, 0x67, 0xa3, 0x6b, 0x90, 0xe3,
	0xb9, 0x64, 0xb3, 0x63, 0x67, 0xcc, 0x2c, 0x4b, 0x1d, 0xbb, 0xfe, 0x67, 0x1d, 0x56, 0x0f, 0x02,
	0x67, 0x78, 0x80, 0xdd, 0xe1, 0xc0, 0x22, 0xcb, 0x3a, 0xee, 0x75, 0xc8, 0x4e, 0x77, 0x80, 0x58,
	0x42, 0xef, 0x40, 0x81, 0x04, 0xce, 0xb0, 0x43, 0x4e, 0x87, 0x98, 0x65, 0x4b, 0xb9, 0xb5, 0x26,
	0xe4, 0x98, 0x09, 0xb4, 0x3e, 0xf2, 0x44, 0x7c, 0xa1, 0xf7, 0xe1, 0x2a, 0x3f, 0x8d, 0xe5, 0xd9,
	0x9d, 0xc8, 0xf8, 0x3c, 0xcb, 0xa1, 0xf5, 0xc8, 0x65, 0xaa, 0x03, 0x76, 0x53, 0x66, 0xf9, 0x48,
	0x75, 0xc9, 0x1b, 0x50, 0x1a, 0x38, 0x27, 0xd8, 0x3a, 0xf4, 0xad, 0xc0, 0xa6, 0x0a, 0x0a, 0xf4,
	0xf4, 0xbb, 0x29, 0x73, 0x35, 0x9e, 0xde, 0xb3, 0xe5, 0x2c, 0xad, 0xcc, 0xcc, 0xd2, 0xad, 0x32,
	0xac, 0x06, 0x38, 0x74, 0x6c, 0xec, 0x75, 0x71, 0xc7, 0xb1, 0xeb, 0xbf, 0xd5, 0x21, 0x43, 0x8d,
	0x47, 0x77, 0x20, 0xd3, 0x0b, 0x7c, 0x97, 0xf9, 0xad, 0xd8, 0xaa, 0x35, 0x39, 0xc6, 0x37, 0x23,
	0xe4, 0x6e, 0x1e, 0x44, 0x18, 0xbf, 0x95, 0x79, 0xf6, 0xcf, 0x9b, 0x9a, 0xc9, 0xa4, 0xd1, 0x26,
	0xe8, 0xc4, 0x67, 0x0e, 0x5d, 0x64, 0x8f, 0x4e, 0x7c, 0xf4, 0x1a, 0xac, 0xd2, 0x14, 0x1d, 0x55,
	0x1d, 0xcf, 0xd2, 0xa2, 0x6b, 0x3d, 0x1d, 0xd5, 0x5c, 0x72, 0xa2, 0xbe, 0x09, 0x6b, 0xb4, 0x82,
	0x3b, 0x2e, 0x43, 0xd6, 0x8e, 0x63, 0xf3, 0x58, 0x65, 0x78, 0x61, 0x73, 0xbc, 0xdd, 0xb3, 0x43,
	0x74, 0x00, 0xaf, 0x32, 0xf4, 0x0b, 0x70, 0x88, 0x83, 0x13, 0x8b, 0x86, 0xb7, 0x63, 0x5b, 0x84,
	0x47, 0x6c, 0x11, 0x2b, 0x5f, 0xa1, 0xdb, 0xcd, 0x78, 0xf7, 0xb6, 0x45, 0x70, 0xfd, 0xbf, 0x1a,
	0xac, 0xb0, 0x68, 0x51, 0xf0, 0xe5, 0x71, 0x95, 0xc1, 0x97, 0xcd, 0x30, 0x7c, 0x45, 0x90, 0x09,
	0x89, 0x15, 0x30, 0x9f, 0x94, 0x4c, 0xf6, 0x2d, 0x65, 0x57, 0x66, 0x7a, 0x76, 0xdd, 0x02, 0x56,
	0x68, 0x2c, 0xbb, 0xa2, 0x34, 0xbc, 0x12, 0x25, 0x4a, 0x84, 0x0b, 0x66, 0x21, 0x10, 0x5f, 0x21,
	0xfa, 0x4e, 0x94, 0x60, 0x72, 0x6e, 0x67, 0x99, 0x3d, 0x57, 0xd8, 0xc2, 0xb6, 0x94, 0xe0, 0xd4,
	0xa7, 0x47, 0xbe, 0x87, 0x59, 0x19, 0x16, 0x4c, 0x3e, 0x90, 0xf3, 0x26, 0x3f, 0x1b, 0xdd, 0xfe,
	0xa1, 0x03, 0xec, 0x8f, 0x52, 0x6e, 0xc9, 0x2a, 0x5b, 0x87, 0xec, 0x00, 0x7b, 0x7d, 0x72, 0x24,
	0xa2, 0x2e, 0x46, 0xd4, 0xb8, 0x9f, 0x3a, 0x36, 0x39, 0x12, 0x80, 0xce, 0x07, 0x92, 0xd7, 0xb2,
	0x8b, 0x7a, 0x2d, 0x37, 0xdf, 0x6b, 0x93, 0xb7, 0x48, 0x3e, 0xe9, 0x16, 0xb9, 0x09, 0x45, 0x7e,
	0x8b, 0xd0, 0x9d, 0x21, 0x2b, 0xbb, 0x92, 0x09, 0x6c, 0x8a, 0x6a, 0x0d, 0xa9, 0x00, 0xbf, 0x3f,
	0xb8, 0x00, 0x70, 0x01, 0x36, 0xc5, 0x05, 0x24, 0xdf, 0x16, 0x67, 0xfb, 0xf6, 0x23, 0xa8, 0xb4,
	0x6d, 0x3b, 0xee, 0x1a, 0x4c, 0xfc, 0x09, 0x03, 0xec, 0xdb, 0xdc, 0x06, 0x91, 0xf1, 0xa2, 0x32,
	0x51, 0x74, 0x38, 0x49, 0x1e, 0xe2, 0x0a, 0xa8, 0xdf, 0x85, 0xb5, 0xb6, 0x6d, 0xb3, 0x3e, 0x21,
	0xd2, 0xf3, 0x3a, 0xac, 0x30, 0xbb, 0x84, 0x86, 0x52, 0xa4, 0x81, 0x0b, 0xf1, 0xb5, 0xfa, 0x10,
	0xd6, 0xdb, 0xb6, 0x2d, 0x43, 0x69, 0xb4, 0xfd, 0x1e, 0x94, 0x38, 0xec, 0x89, 0x79, 0xa1, 0xa6,
	0x12, 0xa9, 0x51, 0xf6, 0xac, 0x12, 0x19, 0x8c, 0x6f, 0x40, 0x81, 0x0b, 0xc5, 0xc0, 0x9d, 0xe7,
	0x13, 0x7b, 0x76, 0xdd, 0x85, 0xb2, 0xf8, 0xc5, 0xe8, 0x97, 0x36, 0x20, 0x43, 0xb7, 0x8b, 0x1f,
	0x58, 0x95, 0x7f, 0xc0, 0x64, 0x2b, 0x93, 0xb6, 0xe8, 0x8b, 0xda, 0x12, 0x7b, 0x59, 0xf4, 0x2c,
	0xaa, 0x97, 0x1d, 0xaf, 0xcf, 0x40, 0x3a, 0xc1, 0xcb, 0x91, 0x3c, 0xd8, 0xa3, 0x6f, 0xe1, 0x65,
	0x06, 0x08, 0x92, 0x97, 0x59, 0xd5, 0x8d, 0x7b, 0x99, 0x0b, 0xf1, 0xb5, 0xfa, 0x87, 0xcc, 0x88,
	0xb8, 0x90, 0xa2, 0xcd, 0x2d, 0x80, 0x18, 0xd0, 0xc7, 0x6d, 0x90, 0xc4, 0x25, 0xa9, 0xfa, 0x0f,
	0xe0, 0xca, 0xbe, 0x13, 0x12, 0x6a, 0x4f, 0x18, 0xe9, 0xa9, 0xc0, 0xca, 0xc0, 0x71, 0x1d, 0x22,
	0xee, 0x4f, 0x3e, 0xa0, 0x75, 0xe7, 0xf7, 0x7a, 0x21, 0x26, 0xd1, 0xe5, 0xc9, 0x47, 0xf5, 0x67,
	0x69, 0xb8, 0x2a, 0xa9, 0x08, 0x87, 0xbe, 0x17, 0x62, 0xd4, 0x82, 0x8c, 0xe4, 0x09, 0x23, 0xb6,
	0x62, 0x4c, 0xb0, 0xc9, 0xbc, 0xc2, 0x64, 0x6b, 0x7f, 0xd5, 0x21, 0xc3, 0x1a, 0xc1, 0x32, 0xe8,
	0xa3, 0xdb, 0x5b, 0x77, 0x62, 0xa0, 0x00, 0x09, 0x28, 0xe2, 0xc2, 0xae, 0x4c, 0x2f, 0xec, 0xc9,
	0x3a, 0x7d, 0x75, 0xb1, 0x6e, 0x6f, 0x7d, 0xb1, 0x6e, 0xef, 0x5a, 0x52, 0xb7, 0xf7, 0x00, 0xa0,
	0x1b, 0x60, 0x8b, 0x60, 0xbb, 0x63, 0x91, 0xaa, 0xb1, 0xe0, 0x85, 0x51, 0x10, 0x7b, 0xda, 0x84,
	0x2a, 0x38, 0x1e, 0xda, 0x91, 0x82, 0xc6, 0xa2, 0x0a, 0xc4, 0x9e, 0x36, 0xa9, 0xef, 0xc0, 0x3a,
	0x75, 0x74, 0x5c, 0xdc, 0x4b, 0x86, 0xf6, 0x97, 0x69, 0xb8, 0x36, 0xa1, 0x48, 0x04, 0xf8, 0xa3,
	0x24, 0x5c, 0x79, 0x5b, 0x8e, 0x73, 0xc2, 0xae, 0x29, 0x78, 0x53, 0xfb, 0x83, 0xae, 0x3c, 0xde,
	0xc6, 0xe3, 0xaf, 0x3e, 0x55, 0x60, 0xe6, 0x53, 0xa5, 0x32, 0xed, 0x31, 0x67, 0xcc, 0x7e, 0xcc,
	0xbd, 0x05, 0x05, 0xdb, 0xef, 0x1e, 0xbb, 0xd8, 0x23, 0x61, 0xb5, 0x31, 0x99, 0x52, 0xf1, 0xea,
	0x58, 0x80, 0x5b, 0x17, 0x0d, 0xf0, 0xfd, 0xf3, 0x07, 0xb8, 0xcd, 0x4b, 0x8e, 0xa1, 0xc2, 0x92,
	0xb1, 0xfd, 0x55, 0x1a, 0x90, 0xac, 0x43, 0x84, 0xf5, 0xae, 0x0a, 0x40, 0x1b, 0x72, 0x40, 0x55,
	0x51, 0x05, 0x93, 0x6a, 0x9f, 0xeb, 0x51, 0x6b, 0xb3, 0x48, 0xf1, 0x8e, 0xdd, 0xf2, 0x95, 0xc9,
	0x5b, 0xbe, 0xc2, 0xae, 0x9b, 0x20, 0x64, 0x61, 0x2b, 0x99, 0x7c, 0x10, 0x37, 0x20, 0x8d, 0x29,
	0x0d, 0x48, 0x6b, 0xe6, 0x25, 0x29, 0x81, 0xc6, 0xfd, 0xe9, 0xa0, 0xa1, 0x86, 0x77, 0xe7, 0xa2,
	0xe1, 0x7d, 0xb4, 0x74, 0xfd, 0xc6, 0x90, 0xbd, 0x64, 0x8c, 0x7f, 0x93, 0xe1, 0xf5, 0xab, 0x28,
	0x12, 0x81, 0xfe, 0x30, 0xe1, 0xb2, 0x50, 0xca, 0x37, 0x61, 0xd3, 0x94, 0x4b, 0xa4, 0xf6, 0xa7,
	0xb4, 0xd2, 0xd7, 0x5d, 0x4e, 0x06, 0xc4, 0x7d, 0x9e, 0xc1, 0x3a, 0xf8, 0x89, 0x3e, 0xaf, 0xc1,
	0x1b, 0xfb, 0xf1, 0x3e, 0xaf, 0x75, 0x9e, 0xeb, 0xe0, 0xf6, 0x02, 0x6d, 0xdb, 0x9d, 0x79, 0x6d,
	0xdb, 0x7b, 0xb3, 0xda, 0xb6, 0xbb, 0xb3, 0x33, 0x52, 0x4d, 0xb6, 0xfb, 0x17, 0x4d, 0xb6, 0x9d,
	0xa5, 0xb1, 0x84, 0xf5, 0x71, 0x4b, 0xe6, 0xd9, 0x7f, 0x74, 0x8e, 0x25, 0x91, 0x8e, 0x18, 0x4b,
	0xe4, 0x96, 0x51, 0xc1, 0x12, 0x55, 0x54, 0xe9, 0x22, 0x6b, 0xbf, 0xd6, 0x23, 0x8e, 0xea, 0x32,
	0x2f, 0x02, 0x99, 0xb3, 0x32, 0xa6, 0x72, 0x56, 0x8d, 0x39, 0x9c, 0xd5, 0x37, 0x00, 0xfc, 0x77,
	0xa1, 0x4a, 0x3d, 0x28, 0x77, 0xa9, 0x4b, 0xc6, 0xed, 0xcb, 0x34, 0x5c, 0x4f, 0x50, 0x35, 0x42,
	0x88, 0xfc, 0x58, 0xb7, 0xde, 0x94, 0x23, 0x98, 0xb8, 0x49, 0xed, 0x9d, 0x47, 0xfb, 0x6b, 0x3f,
	0x4f, 0x8f, 0x31, 0x2c, 0x97, 0x83, 0x11, 0x0a, 0x99, 0x62, 0xcc, 0x23, 0x53, 0x64, 0x6a, 0xa8,
	0x31, 0x95, 0x1a, 0x6a, 0xc9, 0xd4, 0x10, 0x7a, 0x7d, 0x9c, 0x3b, 0xb9, 0xcf, 0x96, 0x55, 0xe6,
	0x24, 0x06, 0x9f, 0x9d, 0x45, 0xaf, 0x95, 0x47, 0x17, 0x4d, 0x9c, 0x27, 0xe7, 0x4f, 0x1c, 0xd1,
	0xeb, 0x53, 0xcf, 0x2c, 0x99, 0x30, 0x9f, 0x66, 0x38, 0x58, 0x08, 0x15, 0x71, 0xaf, 0x2f, 0xbd,
	0xb8, 0x8c, 0xf1, 0x24, 0x51, 0x93, 0x83, 0xbf, 0xc1, 0x6a, 0x7f, 0x49, 0x0b, 0xca, 0x68, 0x3c,
	0x11, 0x1a, 0x70, 0x45, 0x79, 0x9c, 0x51, 0x9f, 0x57, 0xd8, 0x6a, 0x59, 0x7e, 0x89, 0xed, 0xd9,
	0x2a, 0x4f, 0x69, 0x4c, 0xe3, 0x29, 0x1b, 0x32, 0xfd, 0xf3, 0x7d, 0x28, 0xf4, 0x02, 0xdf, 0xe5,
	0x54, 0xce, 0xa2, 0xb5, 0x9b, 0xa7, 0x5b, 0xb6, 0x69, 0xd2, 0xde, 0x83, 0x1c, 0xf1, 0xf9, 0xe6,
	0x45, 0xeb, 0x36, 0x4b, 0x7c, 0xb6, 0x75, 0x2a, 0xa1, 0xb4, 0x73, 0x01, 0x42, 0xe9, 0x1b, 0x90,
	0x53, 0x7f, 0xd4, 0x01, 0x3d, 0xc6, 0x56, 0xd0, 0x3d, 0x62, 0xa1, 0xfe, 0x11, 0xab, 0xcb, 0x10,
	0xd5, 0x20, 0xd7, 0xf5, 0x8f, 0x3d, 0x12, 0x9c, 0x72, 0x76, 0x67, 0x37, 0x65, 0x46, 0x13, 0xa8,
	0x02, 0x19, 0x76, 0xf7, 0xea, 0x62, 0x81, 0x8d, 0x50, 0x15, 0xb2, 0x01, 0xee, 0x8f, 0x58, 0xfb,
	0xdd, 0x94, 0x29, 0xc6, 0x34, 0x19, 0xd9, 0xdd, 0x1b, 0xf1, 0x23, 0x62, 0xa4, 0x16, 0xff, 0xda,
	0xbc, 0xe2, 0x7f, 0x00, 0xf4, 0x82, 0x0e, 0x08, 0xf7, 0x7a, 0x65, 0xd1, 0x93, 0xb2, 0x3d, 0xcc,
	0xd7, 0xdf, 0x83, 0x3c, 0xf6, 0x6c, 0xbe, 0x7d, 0xd1, 0x47, 0x5d, 0x0e, 0x7b, 0x36, 0xdd, 0xbc,
	0x75, 0x15, 0xd6, 0x06, 0x7e, 0x97, 0x87, 0xbd, 0xe7, 0x0c, 0x08, 0x0e, 0xea, 0xcf, 0x34, 0xc5,
	0x73, 0x51, 0x41, 0xee, 0x43, 0x25, 0x64, 0xb3, 0x1d, 0x6a, 0x7a, 0xd8, 0xf1, 0xb9, 0x47, 0x47,
	0x94, 0x6a, 0x44, 0xbb, 0x4c, 0xf8, 0xdc, 0x44, 0xe1, 0x64, 0x1c, 0x46, 0xe5, 0xad, 0x27, 0x97,
	0x77, 0x5a, 0x29, 0xef, 0xcf, 0xf2, 0xf0, 0x8a, 0x62, 0x92, 0x28, 0xf0, 0x3b, 0x4a, 0x81, 0x6f,
	0x24, 0xd8, 0x90, 0x54, 0xe2, 0x7f, 0xcb, 0x7c, 0x1d, 0x25, 0xfe, 0x1e, 0xac, 0x4a, 0xef, 0xd2,
	0xa8, 0x1d, 0x4c, 0x22, 0xbc, 0x8a, 0xf1, 0x03, 0x34, 0x54, 0x91, 0xe1, 0xfe, 0x45, 0x90, 0x61,
	0xe7, 0xb2, 0x90, 0xe1, 0xd1, 0xe5, 0x21, 0xc3, 0x93, 0x8b, 0x22, 0x83, 0x7d, 0x6e, 0x64, 0x40,
	0x1f, 0x8f, 0xb3, 0x6c, 0x1e, 0xd3, 0xd1, 0x98, 0x97, 0x3d, 0xc9, 0xcc, 0x5b, 0xed, 0xf7, 0xff,
	0xef, 0x20, 0xa4, 0x57, 0xc5, 0xa3, 0xf3, 0xbc, 0x2a, 0xbe, 0x86, 0xe8, 0xb7, 0xfe, 0x9e, 0x87,
	0x52, 0x9b, 0x05, 0xfa, 0x31, 0x0e, 0x4e, 0x68, 0x61, 0x3e, 0x84, 0x92, 0x42, 0x50, 0xa3, 0x6f,
	0x8d, 0xfe, 0xf3, 0x4b, 0xe0, 0xad, 0x6b, 0xeb, 0x13, 0xbf, 0xf6, 0xd0, 0x1d, 0x92, 0x53, 0x0a,
	0xc3, 0x11, 0x35, 0x8d, 0xae, 0x49, 0x1a, 0x64, 0xb2, 0x7a, 0xea, 0xe6, 0x3d, 0xc6, 0xb8, 0x2a,
	0x69, 0x64, 0x48, 0x3a, 0x12, 0x88, 0xeb, 0xa9, 0xaa, 0xee, 0x41, 0x4e, 0xec, 0x40, 0xeb, 0x63,
	0x2a, 0xe6, 0x6d, 0x1d, 0x79, 0x22, 0xfa, 0xe3, 0x7b, 0xcc, 0x13, 0x2a, 0xb7, 0x3c, 0xc7, 0x13,
	0x9c, 0x74, 0x91, 0x3d, 0x21, 0x13, 0xca, 0x73, 0x6c, 0x90, 0x1e, 0xed, 0xb2, 0x0d, 0x13, 0xd4,
	0xf2, 0x54, 0x35, 0x5b, 0x50, 0x18, 0x51, 0xba, 0xa8, 0x9a, 0xc0, 0xf2, 0xf2, 0xed, 0xd7, 0xa7,
	0xf2, 0xbf, 0x9b, 0x1a, 0x3a, 0x80, 0xb5, 0x31, 0xba, 0x10, 0x19, 0x53, 0x79, 0x44, 0xae, 0xef,
	0xe6, 0x1c, 0x9e, 0x71, 0x53, 0x43, 0x0f, 0x01, 0x62, 0xce, 0x0a, 0x5d, 0x4f, 0xe2, 0xb1, 0xb8,
	0xae, 0xda, 0x74, 0x8a, 0x2b, 0x36, 0x4e, 0x22, 0x43, 0x54, 0xe3, 0x26, 0x39, 0x1a, 0xd5, 0xb8,
	0x04, 0x16, 0x25, 0x36, 0x8e, 0x3f, 0x82, 0x55, 0xe3, 0x94, 0x77, 0xb8, 0x6a, 0x9c, 0xfa, 0x66,
	0xde, 0xd4, 0xd0, 0x93, 0xb8, 0x1b, 0x1f, 0xbd, 0xc4, 0xd0, 0xc6, 0x8c, 0x47, 0x1a, 0x57, 0xfa,
	0xda, 0xdc, 0x67, 0xdc, 0xa6, 0x16, 0x45, 0x96, 0xe1, 0xb3, 0x1a, 0x59, 0xb9, 0x5d, 0x51, 0x23,
	0xab, 0x80, 0xf9, 0xa6, 0x86, 0x76, 0xa1, 0x28, 0xa1, 0x3c, 0xaa, 0x25, 0x42, 0x3f, 0xd7, 0x73,
	0x63, 0xc6, 0xb5, 0xb0, 0xa9, 0x6d, 0x7d, 0xf7, 0xf9, 0x0b, 0x23, 0xf5, 0xc5, 0x0b, 0x23, 0xf5,
	0xd5, 0x0b, 0x43, 0xfb, 0xd9, 0x99, 0xa1, 0xfd, 0xee, 0xcc, 0xd0, 0x3e, 0x3b, 0x33, 0xb4, 0xe7,
	0x67, 0x86, 0xf6, 0xaf, 0x33, 0x43, 0xfb, 0xf7, 0x99, 0x91, 0xfa, 0xea, 0xcc, 0xd0, 0x9e, 0xbd,
	0x34, 0x52, 0xcf, 0x5f, 0x1a, 0xa9, 0x2f, 0x5e, 0x1a, 0xa9, 0x27, 0x99, 0xe6, 0xad, 0xe1, 0xe1,
	0x61, 0x96, 0xe5, 0xec, 0xed, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x13, 0x64, 0xe5, 0xb2,
	0x24, 0x00, 0x00,
}

func (this *DiveMaster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DiveMaster)
	if !ok {
		that2, ok := that.(DiveMaster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if !this.FrontImage.Equal(that1.FrontImage) {
		return false
	}
	if !this.BackImage.Equal(that1.BackImage) {
		return false
	}
	return true
}
func (this *DiveMasterFirstAndLastName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DiveMasterFirstAndLastName)
	if !ok {
		that2, ok := that.(DiveMasterFirstAndLastName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	return true
}
func (this *Staff) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Staff)
	if !ok {
		that2, ok := that.(Staff)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if this.Position != that1.Position {
		return false
	}
	if this.Gender != that1.Gender {
		return false
	}
	return true
}
func (this *DivingBoat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DivingBoat)
	if !ok {
		that2, ok := that.(DivingBoat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.BoatImages) != len(that1.BoatImages) {
		return false
	}
	for i := range this.BoatImages {
		if !this.BoatImages[i].Equal(that1.BoatImages[i]) {
			return false
		}
	}
	if this.Description != that1.Description {
		return false
	}
	if this.TotalCapacity != that1.TotalCapacity {
		return false
	}
	if this.DiverCapacity != that1.DiverCapacity {
		return false
	}
	if this.StaffCapacity != that1.StaffCapacity {
		return false
	}
	if !this.Address.Equal(that1.Address) {
		return false
	}
	return true
}
func (this *Amenity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Amenity)
	if !ok {
		that2, ok := that.(Amenity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *RoomType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoomType)
	if !ok {
		that2, ok := that.(RoomType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.MaxGuest != that1.MaxGuest {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if len(this.RoomImages) != len(that1.RoomImages) {
		return false
	}
	for i := range this.RoomImages {
		if !this.RoomImages[i].Equal(that1.RoomImages[i]) {
			return false
		}
	}
	if len(this.Amenities) != len(that1.Amenities) {
		return false
	}
	for i := range this.Amenities {
		if !this.Amenities[i].Equal(that1.Amenities[i]) {
			return false
		}
	}
	if this.Quantity != that1.Quantity {
		return false
	}
	return true
}
func (this *HotelAndBoatId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HotelAndBoatId)
	if !ok {
		that2, ok := that.(HotelAndBoatId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HotelId != that1.HotelId {
		return false
	}
	if this.BoatId != that1.BoatId {
		return false
	}
	return true
}
func (this *TripTemplate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TripTemplate)
	if !ok {
		that2, ok := that.(TripTemplate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Images) != len(that1.Images) {
		return false
	}
	for i := range this.Images {
		if !this.Images[i].Equal(that1.Images[i]) {
			return false
		}
	}
	if this.TripType != that1.TripType {
		return false
	}
	if that1.ResidenceId == nil {
		if this.ResidenceId != nil {
			return false
		}
	} else if this.ResidenceId == nil {
		return false
	} else if !this.ResidenceId.Equal(that1.ResidenceId) {
		return false
	}
	if !this.Address.Equal(that1.Address) {
		return false
	}
	return true
}
func (this *TripTemplate_HotelAndBoatId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TripTemplate_HotelAndBoatId)
	if !ok {
		that2, ok := that.(TripTemplate_HotelAndBoatId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HotelAndBoatId.Equal(that1.HotelAndBoatId) {
		return false
	}
	return true
}
func (this *TripTemplate_LiveaboardId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TripTemplate_LiveaboardId)
	if !ok {
		that2, ok := that.(TripTemplate_LiveaboardId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LiveaboardId != that1.LiveaboardId {
		return false
	}
	return true
}
func (this *Trip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Trip)
	if !ok {
		that2, ok := that.(Trip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.From == nil {
		if this.From != nil {
			return false
		}
	} else if !this.From.Equal(*that1.From) {
		return false
	}
	if that1.To == nil {
		if this.To != nil {
			return false
		}
	} else if !this.To.Equal(*that1.To) {
		return false
	}
	if this.MaxCapacity != that1.MaxCapacity {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if len(this.DiveMasterIds) != len(that1.DiveMasterIds) {
		return false
	}
	for i := range this.DiveMasterIds {
		if this.DiveMasterIds[i] != that1.DiveMasterIds[i] {
			return false
		}
	}
	if that1.LastReservationDate == nil {
		if this.LastReservationDate != nil {
			return false
		}
	} else if !this.LastReservationDate.Equal(*that1.LastReservationDate) {
		return false
	}
	return true
}
func (this *Hotel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Hotel)
	if !ok {
		that2, ok := that.(Hotel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HotelName != that1.HotelName {
		return false
	}
	if this.Star != that1.Star {
		return false
	}
	if len(this.Images) != len(that1.Images) {
		return false
	}
	for i := range this.Images {
		if !this.Images[i].Equal(that1.Images[i]) {
			return false
		}
	}
	if len(this.RoomTypes) != len(that1.RoomTypes) {
		return false
	}
	for i := range this.RoomTypes {
		if !this.RoomTypes[i].Equal(that1.RoomTypes[i]) {
			return false
		}
	}
	if this.HotelDescription != that1.HotelDescription {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if !this.Address.Equal(that1.Address) {
		return false
	}
	return true
}
func (this *Liveaboard) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Liveaboard)
	if !ok {
		that2, ok := that.(Liveaboard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Length != that1.Length {
		return false
	}
	if this.Width != that1.Width {
		return false
	}
	if len(this.Images) != len(that1.Images) {
		return false
	}
	for i := range this.Images {
		if !this.Images[i].Equal(that1.Images[i]) {
			return false
		}
	}
	if len(this.RoomTypes) != len(that1.RoomTypes) {
		return false
	}
	for i := range this.RoomTypes {
		if !this.RoomTypes[i].Equal(that1.RoomTypes[i]) {
			return false
		}
	}
	if this.TotalCapacity != that1.TotalCapacity {
		return false
	}
	if this.DiverRooms != that1.DiverRooms {
		return false
	}
	if this.StaffRooms != that1.StaffRooms {
		return false
	}
	if !this.Address.Equal(that1.Address) {
		return false
	}
	return true
}
func (this *AddDiveMasterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddDiveMasterRequest)
	if !ok {
		that2, ok := that.(AddDiveMasterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DiveMaster.Equal(that1.DiveMaster) {
		return false
	}
	return true
}
func (this *AddStaffRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddStaffRequest)
	if !ok {
		that2, ok := that.(AddStaffRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Staff.Equal(that1.Staff) {
		return false
	}
	return true
}
func (this *AddTripTemplateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddTripTemplateRequest)
	if !ok {
		that2, ok := that.(AddTripTemplateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TripTemplate.Equal(that1.TripTemplate) {
		return false
	}
	if this.AgencyId != that1.AgencyId {
		return false
	}
	return true
}
func (this *AddTripRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddTripRequest)
	if !ok {
		that2, ok := that.(AddTripRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Trip.Equal(that1.Trip) {
		return false
	}
	if !this.TripTemplate.Equal(that1.TripTemplate) {
		return false
	}
	return true
}
func (this *AddDivingBoatRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddDivingBoatRequest)
	if !ok {
		that2, ok := that.(AddDivingBoatRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DivingBoat.Equal(that1.DivingBoat) {
		return false
	}
	return true
}
func (this *AddHotelRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddHotelRequest)
	if !ok {
		that2, ok := that.(AddHotelRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Hotel.Equal(that1.Hotel) {
		return false
	}
	return true
}
func (this *AddLiveaboardRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddLiveaboardRequest)
	if !ok {
		that2, ok := that.(AddLiveaboardRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Liveaboard.Equal(that1.Liveaboard) {
		return false
	}
	return true
}
func (this *ListBoatsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListBoatsRequest)
	if !ok {
		that2, ok := that.(ListBoatsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	return true
}
func (this *ListBoatsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListBoatsResponse)
	if !ok {
		that2, ok := that.(ListBoatsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Boat.Equal(that1.Boat) {
		return false
	}
	return true
}
func (this *ListBoatsResponse_Boat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListBoatsResponse_Boat)
	if !ok {
		that2, ok := that.(ListBoatsResponse_Boat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Images) != len(that1.Images) {
		return false
	}
	for i := range this.Images {
		if !this.Images[i].Equal(that1.Images[i]) {
			return false
		}
	}
	if this.TotalCapacity != that1.TotalCapacity {
		return false
	}
	if this.DiverCapacity != that1.DiverCapacity {
		return false
	}
	if this.StaffCapacity != that1.StaffCapacity {
		return false
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return false
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return false
	}
	if that1.UpdatedAt == nil {
		if this.UpdatedAt != nil {
			return false
		}
	} else if !this.UpdatedAt.Equal(*that1.UpdatedAt) {
		return false
	}
	return true
}
func (this *ListDiveMastersRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListDiveMastersRequest)
	if !ok {
		that2, ok := that.(ListDiveMastersRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	return true
}
func (this *ListDiveMastersResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListDiveMastersResponse)
	if !ok {
		that2, ok := that.(ListDiveMastersResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DiveMaster.Equal(that1.DiveMaster) {
		return false
	}
	return true
}
func (this *ListDiveMastersResponse_DiveMaster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListDiveMastersResponse_DiveMaster)
	if !ok {
		that2, ok := that.(ListDiveMastersResponse_DiveMaster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if len(this.Documents) != len(that1.Documents) {
		return false
	}
	for i := range this.Documents {
		if !this.Documents[i].Equal(that1.Documents[i]) {
			return false
		}
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return false
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return false
	}
	if that1.UpdatedAt == nil {
		if this.UpdatedAt != nil {
			return false
		}
	} else if !this.UpdatedAt.Equal(*that1.UpdatedAt) {
		return false
	}
	return true
}
func (this *ListHotelsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListHotelsRequest)
	if !ok {
		that2, ok := that.(ListHotelsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	return true
}
func (this *ListHotelsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListHotelsResponse)
	if !ok {
		that2, ok := that.(ListHotelsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Hotel.Equal(that1.Hotel) {
		return false
	}
	return true
}
func (this *ListHotelsResponse_Hotel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListHotelsResponse_Hotel)
	if !ok {
		that2, ok := that.(ListHotelsResponse_Hotel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Stars != that1.Stars {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if !this.Address.Equal(that1.Address) {
		return false
	}
	if len(this.Images) != len(that1.Images) {
		return false
	}
	for i := range this.Images {
		if !this.Images[i].Equal(that1.Images[i]) {
			return false
		}
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return false
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return false
	}
	if that1.UpdatedAt == nil {
		if this.UpdatedAt != nil {
			return false
		}
	} else if !this.UpdatedAt.Equal(*that1.UpdatedAt) {
		return false
	}
	return true
}
func (this *ListLiveaboardsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListLiveaboardsRequest)
	if !ok {
		that2, ok := that.(ListLiveaboardsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	return true
}
func (this *ListLiveaboardsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListLiveaboardsResponse)
	if !ok {
		that2, ok := that.(ListLiveaboardsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Liveaboard.Equal(that1.Liveaboard) {
		return false
	}
	return true
}
func (this *ListLiveaboardsResponse_Liveaboard) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListLiveaboardsResponse_Liveaboard)
	if !ok {
		that2, ok := that.(ListLiveaboardsResponse_Liveaboard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Length != that1.Length {
		return false
	}
	if this.Width != that1.Width {
		return false
	}
	if len(this.Images) != len(that1.Images) {
		return false
	}
	for i := range this.Images {
		if !this.Images[i].Equal(that1.Images[i]) {
			return false
		}
	}
	if this.TotalCapacity != that1.TotalCapacity {
		return false
	}
	if this.DiverRooms != that1.DiverRooms {
		return false
	}
	if this.StaffRooms != that1.StaffRooms {
		return false
	}
	if !this.Address.Equal(that1.Address) {
		return false
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return false
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return false
	}
	if that1.UpdatedAt == nil {
		if this.UpdatedAt != nil {
			return false
		}
	} else if !this.UpdatedAt.Equal(*that1.UpdatedAt) {
		return false
	}
	return true
}
func (this *ListStaffsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListStaffsRequest)
	if !ok {
		that2, ok := that.(ListStaffsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	return true
}
func (this *ListStaffsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListStaffsResponse)
	if !ok {
		that2, ok := that.(ListStaffsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Staff.Equal(that1.Staff) {
		return false
	}
	return true
}
func (this *ListStaffsResponse_Staff) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListStaffsResponse_Staff)
	if !ok {
		that2, ok := that.(ListStaffsResponse_Staff)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if this.Position != that1.Position {
		return false
	}
	if this.Gender != that1.Gender {
		return false
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return false
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return false
	}
	if that1.UpdatedAt == nil {
		if this.UpdatedAt != nil {
			return false
		}
	} else if !this.UpdatedAt.Equal(*that1.UpdatedAt) {
		return false
	}
	return true
}
func (this *ListTripTemplatesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTripTemplatesRequest)
	if !ok {
		that2, ok := that.(ListTripTemplatesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	return true
}
func (this *ListTripTemplatesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTripTemplatesResponse)
	if !ok {
		that2, ok := that.(ListTripTemplatesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Template.Equal(that1.Template) {
		return false
	}
	return true
}
func (this *ListTripTemplatesResponse_TripTemplate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTripTemplatesResponse_TripTemplate)
	if !ok {
		that2, ok := that.(ListTripTemplatesResponse_TripTemplate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.TripType != that1.TripType {
		return false
	}
	if this.HotelId != that1.HotelId {
		return false
	}
	if this.BoatId != that1.BoatId {
		return false
	}
	if this.LiveaboardId != that1.LiveaboardId {
		return false
	}
	if len(this.Images) != len(that1.Images) {
		return false
	}
	for i := range this.Images {
		if !this.Images[i].Equal(that1.Images[i]) {
			return false
		}
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return false
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return false
	}
	if that1.UpdatedAt == nil {
		if this.UpdatedAt != nil {
			return false
		}
	} else if !this.UpdatedAt.Equal(*that1.UpdatedAt) {
		return false
	}
	return true
}
func (this *ListTripsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTripsRequest)
	if !ok {
		that2, ok := that.(ListTripsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	return true
}
func (this *ListTripsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTripsResponse)
	if !ok {
		that2, ok := that.(ListTripsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Trip.Equal(that1.Trip) {
		return false
	}
	return true
}
func (this *ListTripsResponse_Trip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTripsResponse_Trip)
	if !ok {
		that2, ok := that.(ListTripsResponse_Trip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.TripTemplateId != that1.TripTemplateId {
		return false
	}
	if this.MaxGuest != that1.MaxGuest {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if that1.FromDate == nil {
		if this.FromDate != nil {
			return false
		}
	} else if !this.FromDate.Equal(*that1.FromDate) {
		return false
	}
	if that1.ToDate == nil {
		if this.ToDate != nil {
			return false
		}
	} else if !this.ToDate.Equal(*that1.ToDate) {
		return false
	}
	if that1.LastReservationDate == nil {
		if this.LastReservationDate != nil {
			return false
		}
	} else if !this.LastReservationDate.Equal(*that1.LastReservationDate) {
		return false
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return false
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return false
	}
	if that1.UpdatedAt == nil {
		if this.UpdatedAt != nil {
			return false
		}
	} else if !this.UpdatedAt.Equal(*that1.UpdatedAt) {
		return false
	}
	return true
}
func (this *SearchTripsOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchTripsOptions)
	if !ok {
		that2, ok := that.(SearchTripsOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.LocationFilter == nil {
		if this.LocationFilter != nil {
			return false
		}
	} else if this.LocationFilter == nil {
		return false
	} else if !this.LocationFilter.Equal(that1.LocationFilter) {
		return false
	}
	if this.Divers != that1.Divers {
		return false
	}
	if this.TripType != that1.TripType {
		return false
	}
	if that1.StartDate == nil {
		if this.StartDate != nil {
			return false
		}
	} else if !this.StartDate.Equal(*that1.StartDate) {
		return false
	}
	if that1.EndDate == nil {
		if this.EndDate != nil {
			return false
		}
	} else if !this.EndDate.Equal(*that1.EndDate) {
		return false
	}
	return true
}
func (this *SearchTripsOptions_Country) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchTripsOptions_Country)
	if !ok {
		that2, ok := that.(SearchTripsOptions_Country)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	return true
}
func (this *SearchTripsOptions_City) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchTripsOptions_City)
	if !ok {
		that2, ok := that.(SearchTripsOptions_City)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.City != that1.City {
		return false
	}
	return true
}
func (this *SearchTripsOptions_Region) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchTripsOptions_Region)
	if !ok {
		that2, ok := that.(SearchTripsOptions_Region)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	return true
}
func (this *SearchTripsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchTripsRequest)
	if !ok {
		that2, ok := that.(SearchTripsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SearchTripsOptions.Equal(that1.SearchTripsOptions) {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	return true
}
func (this *SearchTripsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchTripsResponse)
	if !ok {
		that2, ok := that.(SearchTripsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Trip.Equal(that1.Trip) {
		return false
	}
	return true
}
func (this *SearchTripsResponse_Trip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchTripsResponse_Trip)
	if !ok {
		that2, ok := that.(SearchTripsResponse_Trip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.TripTemplateId != that1.TripTemplateId {
		return false
	}
	if this.MaxGuest != that1.MaxGuest {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if len(this.DiveMasters) != len(that1.DiveMasters) {
		return false
	}
	for i := range this.DiveMasters {
		if !this.DiveMasters[i].Equal(that1.DiveMasters[i]) {
			return false
		}
	}
	if that1.FromDate == nil {
		if this.FromDate != nil {
			return false
		}
	} else if !this.FromDate.Equal(*that1.FromDate) {
		return false
	}
	if that1.ToDate == nil {
		if this.ToDate != nil {
			return false
		}
	} else if !this.ToDate.Equal(*that1.ToDate) {
		return false
	}
	if that1.LastReservationDate == nil {
		if this.LastReservationDate != nil {
			return false
		}
	} else if !this.LastReservationDate.Equal(*that1.LastReservationDate) {
		return false
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return false
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return false
	}
	if that1.UpdatedAt == nil {
		if this.UpdatedAt != nil {
			return false
		}
	} else if !this.UpdatedAt.Equal(*that1.UpdatedAt) {
		return false
	}
	if !this.TripTemplate.Equal(that1.TripTemplate) {
		return false
	}
	return true
}
func (this *SearchTripsResponse_TripTemplate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchTripsResponse_TripTemplate)
	if !ok {
		that2, ok := that.(SearchTripsResponse_TripTemplate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.TripType != that1.TripType {
		return false
	}
	if this.HotelId != that1.HotelId {
		return false
	}
	if this.BoatId != that1.BoatId {
		return false
	}
	if this.LiveaboardId != that1.LiveaboardId {
		return false
	}
	if len(this.Images) != len(that1.Images) {
		return false
	}
	for i := range this.Images {
		if !this.Images[i].Equal(that1.Images[i]) {
			return false
		}
	}
	if !this.Address.Equal(that1.Address) {
		return false
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return false
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return false
	}
	if that1.UpdatedAt == nil {
		if this.UpdatedAt != nil {
			return false
		}
	} else if !this.UpdatedAt.Equal(*that1.UpdatedAt) {
		return false
	}
	return true
}
func (this *DiveMaster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.DiveMaster{")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	if this.FrontImage != nil {
		s = append(s, "FrontImage: "+fmt.Sprintf("%#v", this.FrontImage)+",\n")
	}
	if this.BackImage != nil {
		s = append(s, "BackImage: "+fmt.Sprintf("%#v", this.BackImage)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DiveMasterFirstAndLastName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.DiveMasterFirstAndLastName{")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Staff) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.Staff{")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "Position: "+fmt.Sprintf("%#v", this.Position)+",\n")
	s = append(s, "Gender: "+fmt.Sprintf("%#v", this.Gender)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DivingBoat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.DivingBoat{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.BoatImages != nil {
		s = append(s, "BoatImages: "+fmt.Sprintf("%#v", this.BoatImages)+",\n")
	}
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "TotalCapacity: "+fmt.Sprintf("%#v", this.TotalCapacity)+",\n")
	s = append(s, "DiverCapacity: "+fmt.Sprintf("%#v", this.DiverCapacity)+",\n")
	s = append(s, "StaffCapacity: "+fmt.Sprintf("%#v", this.StaffCapacity)+",\n")
	if this.Address != nil {
		s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Amenity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.Amenity{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RoomType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.RoomType{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "MaxGuest: "+fmt.Sprintf("%#v", this.MaxGuest)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	if this.RoomImages != nil {
		s = append(s, "RoomImages: "+fmt.Sprintf("%#v", this.RoomImages)+",\n")
	}
	if this.Amenities != nil {
		s = append(s, "Amenities: "+fmt.Sprintf("%#v", this.Amenities)+",\n")
	}
	s = append(s, "Quantity: "+fmt.Sprintf("%#v", this.Quantity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HotelAndBoatId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.HotelAndBoatId{")
	s = append(s, "HotelId: "+fmt.Sprintf("%#v", this.HotelId)+",\n")
	s = append(s, "BoatId: "+fmt.Sprintf("%#v", this.BoatId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TripTemplate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.TripTemplate{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	if this.Images != nil {
		s = append(s, "Images: "+fmt.Sprintf("%#v", this.Images)+",\n")
	}
	s = append(s, "TripType: "+fmt.Sprintf("%#v", this.TripType)+",\n")
	if this.ResidenceId != nil {
		s = append(s, "ResidenceId: "+fmt.Sprintf("%#v", this.ResidenceId)+",\n")
	}
	if this.Address != nil {
		s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TripTemplate_HotelAndBoatId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.TripTemplate_HotelAndBoatId{` +
		`HotelAndBoatId:` + fmt.Sprintf("%#v", this.HotelAndBoatId) + `}`}, ", ")
	return s
}
func (this *TripTemplate_LiveaboardId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.TripTemplate_LiveaboardId{` +
		`LiveaboardId:` + fmt.Sprintf("%#v", this.LiveaboardId) + `}`}, ", ")
	return s
}
func (this *Trip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.Trip{")
	s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	s = append(s, "To: "+fmt.Sprintf("%#v", this.To)+",\n")
	s = append(s, "MaxCapacity: "+fmt.Sprintf("%#v", this.MaxCapacity)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	s = append(s, "DiveMasterIds: "+fmt.Sprintf("%#v", this.DiveMasterIds)+",\n")
	s = append(s, "LastReservationDate: "+fmt.Sprintf("%#v", this.LastReservationDate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Hotel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.Hotel{")
	s = append(s, "HotelName: "+fmt.Sprintf("%#v", this.HotelName)+",\n")
	s = append(s, "Star: "+fmt.Sprintf("%#v", this.Star)+",\n")
	if this.Images != nil {
		s = append(s, "Images: "+fmt.Sprintf("%#v", this.Images)+",\n")
	}
	if this.RoomTypes != nil {
		s = append(s, "RoomTypes: "+fmt.Sprintf("%#v", this.RoomTypes)+",\n")
	}
	s = append(s, "HotelDescription: "+fmt.Sprintf("%#v", this.HotelDescription)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	if this.Address != nil {
		s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Liveaboard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&pb.Liveaboard{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Length: "+fmt.Sprintf("%#v", this.Length)+",\n")
	s = append(s, "Width: "+fmt.Sprintf("%#v", this.Width)+",\n")
	if this.Images != nil {
		s = append(s, "Images: "+fmt.Sprintf("%#v", this.Images)+",\n")
	}
	if this.RoomTypes != nil {
		s = append(s, "RoomTypes: "+fmt.Sprintf("%#v", this.RoomTypes)+",\n")
	}
	s = append(s, "TotalCapacity: "+fmt.Sprintf("%#v", this.TotalCapacity)+",\n")
	s = append(s, "DiverRooms: "+fmt.Sprintf("%#v", this.DiverRooms)+",\n")
	s = append(s, "StaffRooms: "+fmt.Sprintf("%#v", this.StaffRooms)+",\n")
	if this.Address != nil {
		s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddDiveMasterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.AddDiveMasterRequest{")
	if this.DiveMaster != nil {
		s = append(s, "DiveMaster: "+fmt.Sprintf("%#v", this.DiveMaster)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddStaffRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.AddStaffRequest{")
	if this.Staff != nil {
		s = append(s, "Staff: "+fmt.Sprintf("%#v", this.Staff)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddTripTemplateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.AddTripTemplateRequest{")
	if this.TripTemplate != nil {
		s = append(s, "TripTemplate: "+fmt.Sprintf("%#v", this.TripTemplate)+",\n")
	}
	s = append(s, "AgencyId: "+fmt.Sprintf("%#v", this.AgencyId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddTripRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.AddTripRequest{")
	if this.Trip != nil {
		s = append(s, "Trip: "+fmt.Sprintf("%#v", this.Trip)+",\n")
	}
	if this.TripTemplate != nil {
		s = append(s, "TripTemplate: "+fmt.Sprintf("%#v", this.TripTemplate)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddDivingBoatRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.AddDivingBoatRequest{")
	if this.DivingBoat != nil {
		s = append(s, "DivingBoat: "+fmt.Sprintf("%#v", this.DivingBoat)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddHotelRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.AddHotelRequest{")
	if this.Hotel != nil {
		s = append(s, "Hotel: "+fmt.Sprintf("%#v", this.Hotel)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddLiveaboardRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.AddLiveaboardRequest{")
	if this.Liveaboard != nil {
		s = append(s, "Liveaboard: "+fmt.Sprintf("%#v", this.Liveaboard)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListBoatsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ListBoatsRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListBoatsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ListBoatsResponse{")
	if this.Boat != nil {
		s = append(s, "Boat: "+fmt.Sprintf("%#v", this.Boat)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListBoatsResponse_Boat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pb.ListBoatsResponse_Boat{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Images != nil {
		s = append(s, "Images: "+fmt.Sprintf("%#v", this.Images)+",\n")
	}
	s = append(s, "TotalCapacity: "+fmt.Sprintf("%#v", this.TotalCapacity)+",\n")
	s = append(s, "DiverCapacity: "+fmt.Sprintf("%#v", this.DiverCapacity)+",\n")
	s = append(s, "StaffCapacity: "+fmt.Sprintf("%#v", this.StaffCapacity)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListDiveMastersRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ListDiveMastersRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListDiveMastersResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ListDiveMastersResponse{")
	if this.DiveMaster != nil {
		s = append(s, "DiveMaster: "+fmt.Sprintf("%#v", this.DiveMaster)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListDiveMastersResponse_DiveMaster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.ListDiveMastersResponse_DiveMaster{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	if this.Documents != nil {
		s = append(s, "Documents: "+fmt.Sprintf("%#v", this.Documents)+",\n")
	}
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListHotelsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ListHotelsRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListHotelsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ListHotelsResponse{")
	if this.Hotel != nil {
		s = append(s, "Hotel: "+fmt.Sprintf("%#v", this.Hotel)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListHotelsResponse_Hotel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&pb.ListHotelsResponse_Hotel{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Stars: "+fmt.Sprintf("%#v", this.Stars)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	if this.Address != nil {
		s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	}
	if this.Images != nil {
		s = append(s, "Images: "+fmt.Sprintf("%#v", this.Images)+",\n")
	}
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListLiveaboardsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ListLiveaboardsRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListLiveaboardsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ListLiveaboardsResponse{")
	if this.Liveaboard != nil {
		s = append(s, "Liveaboard: "+fmt.Sprintf("%#v", this.Liveaboard)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListLiveaboardsResponse_Liveaboard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&pb.ListLiveaboardsResponse_Liveaboard{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Length: "+fmt.Sprintf("%#v", this.Length)+",\n")
	s = append(s, "Width: "+fmt.Sprintf("%#v", this.Width)+",\n")
	if this.Images != nil {
		s = append(s, "Images: "+fmt.Sprintf("%#v", this.Images)+",\n")
	}
	s = append(s, "TotalCapacity: "+fmt.Sprintf("%#v", this.TotalCapacity)+",\n")
	s = append(s, "DiverRooms: "+fmt.Sprintf("%#v", this.DiverRooms)+",\n")
	s = append(s, "StaffRooms: "+fmt.Sprintf("%#v", this.StaffRooms)+",\n")
	if this.Address != nil {
		s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	}
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListStaffsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ListStaffsRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListStaffsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ListStaffsResponse{")
	if this.Staff != nil {
		s = append(s, "Staff: "+fmt.Sprintf("%#v", this.Staff)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListStaffsResponse_Staff) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.ListStaffsResponse_Staff{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "Position: "+fmt.Sprintf("%#v", this.Position)+",\n")
	s = append(s, "Gender: "+fmt.Sprintf("%#v", this.Gender)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListTripTemplatesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ListTripTemplatesRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListTripTemplatesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ListTripTemplatesResponse{")
	if this.Template != nil {
		s = append(s, "Template: "+fmt.Sprintf("%#v", this.Template)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListTripTemplatesResponse_TripTemplate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&pb.ListTripTemplatesResponse_TripTemplate{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "TripType: "+fmt.Sprintf("%#v", this.TripType)+",\n")
	s = append(s, "HotelId: "+fmt.Sprintf("%#v", this.HotelId)+",\n")
	s = append(s, "BoatId: "+fmt.Sprintf("%#v", this.BoatId)+",\n")
	s = append(s, "LiveaboardId: "+fmt.Sprintf("%#v", this.LiveaboardId)+",\n")
	if this.Images != nil {
		s = append(s, "Images: "+fmt.Sprintf("%#v", this.Images)+",\n")
	}
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListTripsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ListTripsRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListTripsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ListTripsResponse{")
	if this.Trip != nil {
		s = append(s, "Trip: "+fmt.Sprintf("%#v", this.Trip)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListTripsResponse_Trip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&pb.ListTripsResponse_Trip{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "TripTemplateId: "+fmt.Sprintf("%#v", this.TripTemplateId)+",\n")
	s = append(s, "MaxGuest: "+fmt.Sprintf("%#v", this.MaxGuest)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	s = append(s, "FromDate: "+fmt.Sprintf("%#v", this.FromDate)+",\n")
	s = append(s, "ToDate: "+fmt.Sprintf("%#v", this.ToDate)+",\n")
	s = append(s, "LastReservationDate: "+fmt.Sprintf("%#v", this.LastReservationDate)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchTripsOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.SearchTripsOptions{")
	if this.LocationFilter != nil {
		s = append(s, "LocationFilter: "+fmt.Sprintf("%#v", this.LocationFilter)+",\n")
	}
	s = append(s, "Divers: "+fmt.Sprintf("%#v", this.Divers)+",\n")
	s = append(s, "TripType: "+fmt.Sprintf("%#v", this.TripType)+",\n")
	s = append(s, "StartDate: "+fmt.Sprintf("%#v", this.StartDate)+",\n")
	s = append(s, "EndDate: "+fmt.Sprintf("%#v", this.EndDate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchTripsOptions_Country) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.SearchTripsOptions_Country{` +
		`Country:` + fmt.Sprintf("%#v", this.Country) + `}`}, ", ")
	return s
}
func (this *SearchTripsOptions_City) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.SearchTripsOptions_City{` +
		`City:` + fmt.Sprintf("%#v", this.City) + `}`}, ", ")
	return s
}
func (this *SearchTripsOptions_Region) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.SearchTripsOptions_Region{` +
		`Region:` + fmt.Sprintf("%#v", this.Region) + `}`}, ", ")
	return s
}
func (this *SearchTripsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SearchTripsRequest{")
	if this.SearchTripsOptions != nil {
		s = append(s, "SearchTripsOptions: "+fmt.Sprintf("%#v", this.SearchTripsOptions)+",\n")
	}
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchTripsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SearchTripsResponse{")
	if this.Trip != nil {
		s = append(s, "Trip: "+fmt.Sprintf("%#v", this.Trip)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchTripsResponse_Trip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&pb.SearchTripsResponse_Trip{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "TripTemplateId: "+fmt.Sprintf("%#v", this.TripTemplateId)+",\n")
	s = append(s, "MaxGuest: "+fmt.Sprintf("%#v", this.MaxGuest)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	if this.DiveMasters != nil {
		s = append(s, "DiveMasters: "+fmt.Sprintf("%#v", this.DiveMasters)+",\n")
	}
	s = append(s, "FromDate: "+fmt.Sprintf("%#v", this.FromDate)+",\n")
	s = append(s, "ToDate: "+fmt.Sprintf("%#v", this.ToDate)+",\n")
	s = append(s, "LastReservationDate: "+fmt.Sprintf("%#v", this.LastReservationDate)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	if this.TripTemplate != nil {
		s = append(s, "TripTemplate: "+fmt.Sprintf("%#v", this.TripTemplate)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchTripsResponse_TripTemplate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&pb.SearchTripsResponse_TripTemplate{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "TripType: "+fmt.Sprintf("%#v", this.TripType)+",\n")
	s = append(s, "HotelId: "+fmt.Sprintf("%#v", this.HotelId)+",\n")
	s = append(s, "BoatId: "+fmt.Sprintf("%#v", this.BoatId)+",\n")
	s = append(s, "LiveaboardId: "+fmt.Sprintf("%#v", this.LiveaboardId)+",\n")
	if this.Images != nil {
		s = append(s, "Images: "+fmt.Sprintf("%#v", this.Images)+",\n")
	}
	if this.Address != nil {
		s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	}
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAgency(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AgencyServiceClient is the client API for AgencyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgencyServiceClient interface {
	AddDiveMaster(ctx context.Context, in *AddDiveMasterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddStaff(ctx context.Context, in *AddStaffRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddTripTemplate(ctx context.Context, in *AddTripTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddTrip(ctx context.Context, in *AddTripRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddDivingBoat(ctx context.Context, in *AddDivingBoatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddHotel(ctx context.Context, in *AddHotelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddLiveaboard(ctx context.Context, in *AddLiveaboardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListBoats(ctx context.Context, in *ListBoatsRequest, opts ...grpc.CallOption) (AgencyService_ListBoatsClient, error)
	ListDiveMasters(ctx context.Context, in *ListDiveMastersRequest, opts ...grpc.CallOption) (AgencyService_ListDiveMastersClient, error)
	ListHotels(ctx context.Context, in *ListHotelsRequest, opts ...grpc.CallOption) (AgencyService_ListHotelsClient, error)
	ListLiveaboards(ctx context.Context, in *ListLiveaboardsRequest, opts ...grpc.CallOption) (AgencyService_ListLiveaboardsClient, error)
	ListStaffs(ctx context.Context, in *ListStaffsRequest, opts ...grpc.CallOption) (AgencyService_ListStaffsClient, error)
	ListTripTemplates(ctx context.Context, in *ListTripTemplatesRequest, opts ...grpc.CallOption) (AgencyService_ListTripTemplatesClient, error)
	ListTrips(ctx context.Context, in *ListTripsRequest, opts ...grpc.CallOption) (AgencyService_ListTripsClient, error)
	SearchTrips(ctx context.Context, in *SearchTripsRequest, opts ...grpc.CallOption) (AgencyService_SearchTripsClient, error)
}

type agencyServiceClient struct {
	cc *grpc.ClientConn
}

func NewAgencyServiceClient(cc *grpc.ClientConn) AgencyServiceClient {
	return &agencyServiceClient{cc}
}

func (c *agencyServiceClient) AddDiveMaster(ctx context.Context, in *AddDiveMasterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/AddDiveMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyServiceClient) AddStaff(ctx context.Context, in *AddStaffRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/AddStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyServiceClient) AddTripTemplate(ctx context.Context, in *AddTripTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/AddTripTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyServiceClient) AddTrip(ctx context.Context, in *AddTripRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/AddTrip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyServiceClient) AddDivingBoat(ctx context.Context, in *AddDivingBoatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/AddDivingBoat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyServiceClient) AddHotel(ctx context.Context, in *AddHotelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/AddHotel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyServiceClient) AddLiveaboard(ctx context.Context, in *AddLiveaboardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/AddLiveaboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyServiceClient) ListBoats(ctx context.Context, in *ListBoatsRequest, opts ...grpc.CallOption) (AgencyService_ListBoatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgencyService_serviceDesc.Streams[0], "/agency.AgencyService/ListBoats", opts...)
	if err != nil {
		return nil, err
	}
	x := &agencyServiceListBoatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgencyService_ListBoatsClient interface {
	Recv() (*ListBoatsResponse, error)
	grpc.ClientStream
}

type agencyServiceListBoatsClient struct {
	grpc.ClientStream
}

func (x *agencyServiceListBoatsClient) Recv() (*ListBoatsResponse, error) {
	m := new(ListBoatsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agencyServiceClient) ListDiveMasters(ctx context.Context, in *ListDiveMastersRequest, opts ...grpc.CallOption) (AgencyService_ListDiveMastersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgencyService_serviceDesc.Streams[1], "/agency.AgencyService/ListDiveMasters", opts...)
	if err != nil {
		return nil, err
	}
	x := &agencyServiceListDiveMastersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgencyService_ListDiveMastersClient interface {
	Recv() (*ListDiveMastersResponse, error)
	grpc.ClientStream
}

type agencyServiceListDiveMastersClient struct {
	grpc.ClientStream
}

func (x *agencyServiceListDiveMastersClient) Recv() (*ListDiveMastersResponse, error) {
	m := new(ListDiveMastersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agencyServiceClient) ListHotels(ctx context.Context, in *ListHotelsRequest, opts ...grpc.CallOption) (AgencyService_ListHotelsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgencyService_serviceDesc.Streams[2], "/agency.AgencyService/ListHotels", opts...)
	if err != nil {
		return nil, err
	}
	x := &agencyServiceListHotelsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgencyService_ListHotelsClient interface {
	Recv() (*ListHotelsResponse, error)
	grpc.ClientStream
}

type agencyServiceListHotelsClient struct {
	grpc.ClientStream
}

func (x *agencyServiceListHotelsClient) Recv() (*ListHotelsResponse, error) {
	m := new(ListHotelsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agencyServiceClient) ListLiveaboards(ctx context.Context, in *ListLiveaboardsRequest, opts ...grpc.CallOption) (AgencyService_ListLiveaboardsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgencyService_serviceDesc.Streams[3], "/agency.AgencyService/ListLiveaboards", opts...)
	if err != nil {
		return nil, err
	}
	x := &agencyServiceListLiveaboardsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgencyService_ListLiveaboardsClient interface {
	Recv() (*ListLiveaboardsResponse, error)
	grpc.ClientStream
}

type agencyServiceListLiveaboardsClient struct {
	grpc.ClientStream
}

func (x *agencyServiceListLiveaboardsClient) Recv() (*ListLiveaboardsResponse, error) {
	m := new(ListLiveaboardsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agencyServiceClient) ListStaffs(ctx context.Context, in *ListStaffsRequest, opts ...grpc.CallOption) (AgencyService_ListStaffsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgencyService_serviceDesc.Streams[4], "/agency.AgencyService/ListStaffs", opts...)
	if err != nil {
		return nil, err
	}
	x := &agencyServiceListStaffsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgencyService_ListStaffsClient interface {
	Recv() (*ListStaffsResponse, error)
	grpc.ClientStream
}

type agencyServiceListStaffsClient struct {
	grpc.ClientStream
}

func (x *agencyServiceListStaffsClient) Recv() (*ListStaffsResponse, error) {
	m := new(ListStaffsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agencyServiceClient) ListTripTemplates(ctx context.Context, in *ListTripTemplatesRequest, opts ...grpc.CallOption) (AgencyService_ListTripTemplatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgencyService_serviceDesc.Streams[5], "/agency.AgencyService/ListTripTemplates", opts...)
	if err != nil {
		return nil, err
	}
	x := &agencyServiceListTripTemplatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgencyService_ListTripTemplatesClient interface {
	Recv() (*ListTripTemplatesResponse, error)
	grpc.ClientStream
}

type agencyServiceListTripTemplatesClient struct {
	grpc.ClientStream
}

func (x *agencyServiceListTripTemplatesClient) Recv() (*ListTripTemplatesResponse, error) {
	m := new(ListTripTemplatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agencyServiceClient) ListTrips(ctx context.Context, in *ListTripsRequest, opts ...grpc.CallOption) (AgencyService_ListTripsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgencyService_serviceDesc.Streams[6], "/agency.AgencyService/ListTrips", opts...)
	if err != nil {
		return nil, err
	}
	x := &agencyServiceListTripsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgencyService_ListTripsClient interface {
	Recv() (*ListTripsResponse, error)
	grpc.ClientStream
}

type agencyServiceListTripsClient struct {
	grpc.ClientStream
}

func (x *agencyServiceListTripsClient) Recv() (*ListTripsResponse, error) {
	m := new(ListTripsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agencyServiceClient) SearchTrips(ctx context.Context, in *SearchTripsRequest, opts ...grpc.CallOption) (AgencyService_SearchTripsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgencyService_serviceDesc.Streams[7], "/agency.AgencyService/SearchTrips", opts...)
	if err != nil {
		return nil, err
	}
	x := &agencyServiceSearchTripsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgencyService_SearchTripsClient interface {
	Recv() (*SearchTripsResponse, error)
	grpc.ClientStream
}

type agencyServiceSearchTripsClient struct {
	grpc.ClientStream
}

func (x *agencyServiceSearchTripsClient) Recv() (*SearchTripsResponse, error) {
	m := new(SearchTripsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgencyServiceServer is the server API for AgencyService service.
type AgencyServiceServer interface {
	AddDiveMaster(context.Context, *AddDiveMasterRequest) (*emptypb.Empty, error)
	AddStaff(context.Context, *AddStaffRequest) (*emptypb.Empty, error)
	AddTripTemplate(context.Context, *AddTripTemplateRequest) (*emptypb.Empty, error)
	AddTrip(context.Context, *AddTripRequest) (*emptypb.Empty, error)
	AddDivingBoat(context.Context, *AddDivingBoatRequest) (*emptypb.Empty, error)
	AddHotel(context.Context, *AddHotelRequest) (*emptypb.Empty, error)
	AddLiveaboard(context.Context, *AddLiveaboardRequest) (*emptypb.Empty, error)
	ListBoats(*ListBoatsRequest, AgencyService_ListBoatsServer) error
	ListDiveMasters(*ListDiveMastersRequest, AgencyService_ListDiveMastersServer) error
	ListHotels(*ListHotelsRequest, AgencyService_ListHotelsServer) error
	ListLiveaboards(*ListLiveaboardsRequest, AgencyService_ListLiveaboardsServer) error
	ListStaffs(*ListStaffsRequest, AgencyService_ListStaffsServer) error
	ListTripTemplates(*ListTripTemplatesRequest, AgencyService_ListTripTemplatesServer) error
	ListTrips(*ListTripsRequest, AgencyService_ListTripsServer) error
	SearchTrips(*SearchTripsRequest, AgencyService_SearchTripsServer) error
}

// UnimplementedAgencyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAgencyServiceServer struct {
}

func (*UnimplementedAgencyServiceServer) AddDiveMaster(ctx context.Context, req *AddDiveMasterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDiveMaster not implemented")
}
func (*UnimplementedAgencyServiceServer) AddStaff(ctx context.Context, req *AddStaffRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStaff not implemented")
}
func (*UnimplementedAgencyServiceServer) AddTripTemplate(ctx context.Context, req *AddTripTemplateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTripTemplate not implemented")
}
func (*UnimplementedAgencyServiceServer) AddTrip(ctx context.Context, req *AddTripRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTrip not implemented")
}
func (*UnimplementedAgencyServiceServer) AddDivingBoat(ctx context.Context, req *AddDivingBoatRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDivingBoat not implemented")
}
func (*UnimplementedAgencyServiceServer) AddHotel(ctx context.Context, req *AddHotelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHotel not implemented")
}
func (*UnimplementedAgencyServiceServer) AddLiveaboard(ctx context.Context, req *AddLiveaboardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLiveaboard not implemented")
}
func (*UnimplementedAgencyServiceServer) ListBoats(req *ListBoatsRequest, srv AgencyService_ListBoatsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListBoats not implemented")
}
func (*UnimplementedAgencyServiceServer) ListDiveMasters(req *ListDiveMastersRequest, srv AgencyService_ListDiveMastersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListDiveMasters not implemented")
}
func (*UnimplementedAgencyServiceServer) ListHotels(req *ListHotelsRequest, srv AgencyService_ListHotelsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListHotels not implemented")
}
func (*UnimplementedAgencyServiceServer) ListLiveaboards(req *ListLiveaboardsRequest, srv AgencyService_ListLiveaboardsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListLiveaboards not implemented")
}
func (*UnimplementedAgencyServiceServer) ListStaffs(req *ListStaffsRequest, srv AgencyService_ListStaffsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListStaffs not implemented")
}
func (*UnimplementedAgencyServiceServer) ListTripTemplates(req *ListTripTemplatesRequest, srv AgencyService_ListTripTemplatesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTripTemplates not implemented")
}
func (*UnimplementedAgencyServiceServer) ListTrips(req *ListTripsRequest, srv AgencyService_ListTripsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTrips not implemented")
}
func (*UnimplementedAgencyServiceServer) SearchTrips(req *SearchTripsRequest, srv AgencyService_SearchTripsServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchTrips not implemented")
}

func RegisterAgencyServiceServer(s *grpc.Server, srv AgencyServiceServer) {
	s.RegisterService(&_AgencyService_serviceDesc, srv)
}

func _AgencyService_AddDiveMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDiveMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).AddDiveMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/AddDiveMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).AddDiveMaster(ctx, req.(*AddDiveMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgencyService_AddStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).AddStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/AddStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).AddStaff(ctx, req.(*AddStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgencyService_AddTripTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTripTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).AddTripTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/AddTripTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).AddTripTemplate(ctx, req.(*AddTripTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgencyService_AddTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).AddTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/AddTrip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).AddTrip(ctx, req.(*AddTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgencyService_AddDivingBoat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDivingBoatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).AddDivingBoat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/AddDivingBoat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).AddDivingBoat(ctx, req.(*AddDivingBoatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgencyService_AddHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).AddHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/AddHotel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).AddHotel(ctx, req.(*AddHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgencyService_AddLiveaboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLiveaboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).AddLiveaboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/AddLiveaboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).AddLiveaboard(ctx, req.(*AddLiveaboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgencyService_ListBoats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListBoatsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgencyServiceServer).ListBoats(m, &agencyServiceListBoatsServer{stream})
}

type AgencyService_ListBoatsServer interface {
	Send(*ListBoatsResponse) error
	grpc.ServerStream
}

type agencyServiceListBoatsServer struct {
	grpc.ServerStream
}

func (x *agencyServiceListBoatsServer) Send(m *ListBoatsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgencyService_ListDiveMasters_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListDiveMastersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgencyServiceServer).ListDiveMasters(m, &agencyServiceListDiveMastersServer{stream})
}

type AgencyService_ListDiveMastersServer interface {
	Send(*ListDiveMastersResponse) error
	grpc.ServerStream
}

type agencyServiceListDiveMastersServer struct {
	grpc.ServerStream
}

func (x *agencyServiceListDiveMastersServer) Send(m *ListDiveMastersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgencyService_ListHotels_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListHotelsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgencyServiceServer).ListHotels(m, &agencyServiceListHotelsServer{stream})
}

type AgencyService_ListHotelsServer interface {
	Send(*ListHotelsResponse) error
	grpc.ServerStream
}

type agencyServiceListHotelsServer struct {
	grpc.ServerStream
}

func (x *agencyServiceListHotelsServer) Send(m *ListHotelsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgencyService_ListLiveaboards_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListLiveaboardsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgencyServiceServer).ListLiveaboards(m, &agencyServiceListLiveaboardsServer{stream})
}

type AgencyService_ListLiveaboardsServer interface {
	Send(*ListLiveaboardsResponse) error
	grpc.ServerStream
}

type agencyServiceListLiveaboardsServer struct {
	grpc.ServerStream
}

func (x *agencyServiceListLiveaboardsServer) Send(m *ListLiveaboardsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgencyService_ListStaffs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListStaffsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgencyServiceServer).ListStaffs(m, &agencyServiceListStaffsServer{stream})
}

type AgencyService_ListStaffsServer interface {
	Send(*ListStaffsResponse) error
	grpc.ServerStream
}

type agencyServiceListStaffsServer struct {
	grpc.ServerStream
}

func (x *agencyServiceListStaffsServer) Send(m *ListStaffsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgencyService_ListTripTemplates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTripTemplatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgencyServiceServer).ListTripTemplates(m, &agencyServiceListTripTemplatesServer{stream})
}

type AgencyService_ListTripTemplatesServer interface {
	Send(*ListTripTemplatesResponse) error
	grpc.ServerStream
}

type agencyServiceListTripTemplatesServer struct {
	grpc.ServerStream
}

func (x *agencyServiceListTripTemplatesServer) Send(m *ListTripTemplatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgencyService_ListTrips_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTripsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgencyServiceServer).ListTrips(m, &agencyServiceListTripsServer{stream})
}

type AgencyService_ListTripsServer interface {
	Send(*ListTripsResponse) error
	grpc.ServerStream
}

type agencyServiceListTripsServer struct {
	grpc.ServerStream
}

func (x *agencyServiceListTripsServer) Send(m *ListTripsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgencyService_SearchTrips_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchTripsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgencyServiceServer).SearchTrips(m, &agencyServiceSearchTripsServer{stream})
}

type AgencyService_SearchTripsServer interface {
	Send(*SearchTripsResponse) error
	grpc.ServerStream
}

type agencyServiceSearchTripsServer struct {
	grpc.ServerStream
}

func (x *agencyServiceSearchTripsServer) Send(m *SearchTripsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _AgencyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agency.AgencyService",
	HandlerType: (*AgencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDiveMaster",
			Handler:    _AgencyService_AddDiveMaster_Handler,
		},
		{
			MethodName: "AddStaff",
			Handler:    _AgencyService_AddStaff_Handler,
		},
		{
			MethodName: "AddTripTemplate",
			Handler:    _AgencyService_AddTripTemplate_Handler,
		},
		{
			MethodName: "AddTrip",
			Handler:    _AgencyService_AddTrip_Handler,
		},
		{
			MethodName: "AddDivingBoat",
			Handler:    _AgencyService_AddDivingBoat_Handler,
		},
		{
			MethodName: "AddHotel",
			Handler:    _AgencyService_AddHotel_Handler,
		},
		{
			MethodName: "AddLiveaboard",
			Handler:    _AgencyService_AddLiveaboard_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListBoats",
			Handler:       _AgencyService_ListBoats_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListDiveMasters",
			Handler:       _AgencyService_ListDiveMasters_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListHotels",
			Handler:       _AgencyService_ListHotels_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListLiveaboards",
			Handler:       _AgencyService_ListLiveaboards_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListStaffs",
			Handler:       _AgencyService_ListStaffs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListTripTemplates",
			Handler:       _AgencyService_ListTripTemplates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListTrips",
			Handler:       _AgencyService_ListTrips_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchTrips",
			Handler:       _AgencyService_SearchTrips_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "agency.proto",
}

func (m *DiveMaster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiveMaster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiveMaster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BackImage != nil {
		{
			size, err := m.BackImage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.FrontImage != nil {
		{
			size, err := m.FrontImage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Level != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x18
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DiveMasterFirstAndLastName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiveMasterFirstAndLastName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiveMasterFirstAndLastName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Staff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Staff) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Staff) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Gender != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Gender))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Position) > 0 {
		i -= len(m.Position)
		copy(dAtA[i:], m.Position)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Position)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DivingBoat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DivingBoat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DivingBoat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.StaffCapacity != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.StaffCapacity))
		i--
		dAtA[i] = 0x30
	}
	if m.DiverCapacity != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.DiverCapacity))
		i--
		dAtA[i] = 0x28
	}
	if m.TotalCapacity != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.TotalCapacity))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BoatImages) > 0 {
		for iNdEx := len(m.BoatImages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BoatImages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgency(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Amenity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Amenity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Amenity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoomType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoomType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Quantity != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Quantity))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Amenities) > 0 {
		for iNdEx := len(m.Amenities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amenities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgency(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.RoomImages) > 0 {
		for iNdEx := len(m.RoomImages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RoomImages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgency(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Price != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Price))))
		i--
		dAtA[i] = 0x25
	}
	if m.MaxGuest != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.MaxGuest))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HotelAndBoatId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HotelAndBoatId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HotelAndBoatId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BoatId != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.BoatId))
		i--
		dAtA[i] = 0x10
	}
	if m.HotelId != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.HotelId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TripTemplate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TripTemplate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TripTemplate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.ResidenceId != nil {
		{
			size := m.ResidenceId.Size()
			i -= size
			if _, err := m.ResidenceId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TripType != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.TripType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Images[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgency(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TripTemplate_HotelAndBoatId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TripTemplate_HotelAndBoatId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HotelAndBoatId != nil {
		{
			size, err := m.HotelAndBoatId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *TripTemplate_LiveaboardId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TripTemplate_LiveaboardId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintAgency(dAtA, i, uint64(m.LiveaboardId))
	i--
	dAtA[i] = 0x48
	return len(dAtA) - i, nil
}
func (m *Trip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Trip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Trip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastReservationDate != nil {
		n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastReservationDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastReservationDate):])
		if err6 != nil {
			return 0, err6
		}
		i -= n6
		i = encodeVarintAgency(dAtA, i, uint64(n6))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DiveMasterIds) > 0 {
		dAtA8 := make([]byte, len(m.DiveMasterIds)*10)
		var j7 int
		for _, num := range m.DiveMasterIds {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintAgency(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x2a
	}
	if m.Price != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Price))))
		i--
		dAtA[i] = 0x25
	}
	if m.MaxCapacity != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.MaxCapacity))
		i--
		dAtA[i] = 0x18
	}
	if m.To != nil {
		n9, err9 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.To, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.To):])
		if err9 != nil {
			return 0, err9
		}
		i -= n9
		i = encodeVarintAgency(dAtA, i, uint64(n9))
		i--
		dAtA[i] = 0x12
	}
	if m.From != nil {
		n10, err10 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.From, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.From):])
		if err10 != nil {
			return 0, err10
		}
		i -= n10
		i = encodeVarintAgency(dAtA, i, uint64(n10))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Hotel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hotel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Hotel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.HotelDescription) > 0 {
		i -= len(m.HotelDescription)
		copy(dAtA[i:], m.HotelDescription)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.HotelDescription)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RoomTypes) > 0 {
		for iNdEx := len(m.RoomTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RoomTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgency(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Images[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgency(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Star != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Star))
		i--
		dAtA[i] = 0x10
	}
	if len(m.HotelName) > 0 {
		i -= len(m.HotelName)
		copy(dAtA[i:], m.HotelName)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.HotelName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Liveaboard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Liveaboard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Liveaboard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.StaffRooms != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.StaffRooms))
		i--
		dAtA[i] = 0x50
	}
	if m.DiverRooms != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.DiverRooms))
		i--
		dAtA[i] = 0x48
	}
	if m.TotalCapacity != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.TotalCapacity))
		i--
		dAtA[i] = 0x40
	}
	if len(m.RoomTypes) > 0 {
		for iNdEx := len(m.RoomTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RoomTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgency(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Images[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgency(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Width != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x20
	}
	if m.Length != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddDiveMasterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddDiveMasterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddDiveMasterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DiveMaster != nil {
		{
			size, err := m.DiveMaster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddStaffRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddStaffRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddStaffRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Staff != nil {
		{
			size, err := m.Staff.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddTripTemplateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddTripTemplateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddTripTemplateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AgencyId != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.AgencyId))
		i--
		dAtA[i] = 0x10
	}
	if m.TripTemplate != nil {
		{
			size, err := m.TripTemplate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddTripRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddTripRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddTripRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TripTemplate != nil {
		{
			size, err := m.TripTemplate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Trip != nil {
		{
			size, err := m.Trip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddDivingBoatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddDivingBoatRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddDivingBoatRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DivingBoat != nil {
		{
			size, err := m.DivingBoat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddHotelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddHotelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddHotelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hotel != nil {
		{
			size, err := m.Hotel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddLiveaboardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddLiveaboardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddLiveaboardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Liveaboard != nil {
		{
			size, err := m.Liveaboard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListBoatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBoatsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBoatsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListBoatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBoatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBoatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Boat != nil {
		{
			size, err := m.Boat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListBoatsResponse_Boat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBoatsResponse_Boat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBoatsResponse_Boat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != nil {
		n22, err22 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err22 != nil {
			return 0, err22
		}
		i -= n22
		i = encodeVarintAgency(dAtA, i, uint64(n22))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	if m.CreatedAt != nil {
		n23, err23 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err23 != nil {
			return 0, err23
		}
		i -= n23
		i = encodeVarintAgency(dAtA, i, uint64(n23))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.StaffCapacity != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.StaffCapacity))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.DiverCapacity != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.DiverCapacity))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.TotalCapacity != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.TotalCapacity))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Images[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgency(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x52
	}
	if m.Id != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListDiveMastersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDiveMastersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDiveMastersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListDiveMastersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDiveMastersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDiveMastersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DiveMaster != nil {
		{
			size, err := m.DiveMaster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListDiveMastersResponse_DiveMaster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDiveMastersResponse_DiveMaster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDiveMastersResponse_DiveMaster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != nil {
		n25, err25 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err25 != nil {
			return 0, err25
		}
		i -= n25
		i = encodeVarintAgency(dAtA, i, uint64(n25))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	if m.CreatedAt != nil {
		n26, err26 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err26 != nil {
			return 0, err26
		}
		i -= n26
		i = encodeVarintAgency(dAtA, i, uint64(n26))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	if len(m.Documents) > 0 {
		for iNdEx := len(m.Documents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Documents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgency(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xc2
		}
	}
	if m.Level != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x52
	}
	if m.Id != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListHotelsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListHotelsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListHotelsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListHotelsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListHotelsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListHotelsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hotel != nil {
		{
			size, err := m.Hotel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListHotelsResponse_Hotel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListHotelsResponse_Hotel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListHotelsResponse_Hotel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != nil {
		n28, err28 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err28 != nil {
			return 0, err28
		}
		i -= n28
		i = encodeVarintAgency(dAtA, i, uint64(n28))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x82
	}
	if m.CreatedAt != nil {
		n29, err29 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err29 != nil {
			return 0, err29
		}
		i -= n29
		i = encodeVarintAgency(dAtA, i, uint64(n29))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Images[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgency(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xe2
		}
	}
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	if m.Stars != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Stars))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x52
	}
	if m.Id != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListLiveaboardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListLiveaboardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListLiveaboardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListLiveaboardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListLiveaboardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListLiveaboardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Liveaboard != nil {
		{
			size, err := m.Liveaboard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListLiveaboardsResponse_Liveaboard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListLiveaboardsResponse_Liveaboard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListLiveaboardsResponse_Liveaboard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != nil {
		n32, err32 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err32 != nil {
			return 0, err32
		}
		i -= n32
		i = encodeVarintAgency(dAtA, i, uint64(n32))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb2
	}
	if m.CreatedAt != nil {
		n33, err33 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err33 != nil {
			return 0, err33
		}
		i -= n33
		i = encodeVarintAgency(dAtA, i, uint64(n33))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if m.StaffRooms != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.StaffRooms))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	if m.DiverRooms != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.DiverRooms))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa0
	}
	if m.TotalCapacity != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.TotalCapacity))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Images[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgency(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0x92
		}
	}
	if m.Width != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Width))))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc5
	}
	if m.Length != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Length))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf5
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x52
	}
	if m.Id != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListStaffsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListStaffsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListStaffsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListStaffsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListStaffsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListStaffsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Staff != nil {
		{
			size, err := m.Staff.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListStaffsResponse_Staff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListStaffsResponse_Staff) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListStaffsResponse_Staff) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != nil {
		n36, err36 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err36 != nil {
			return 0, err36
		}
		i -= n36
		i = encodeVarintAgency(dAtA, i, uint64(n36))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	if m.CreatedAt != nil {
		n37, err37 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err37 != nil {
			return 0, err37
		}
		i -= n37
		i = encodeVarintAgency(dAtA, i, uint64(n37))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	if m.Gender != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Gender))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc0
	}
	if len(m.Position) > 0 {
		i -= len(m.Position)
		copy(dAtA[i:], m.Position)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Position)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x52
	}
	if m.Id != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListTripTemplatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTripTemplatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTripTemplatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListTripTemplatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTripTemplatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTripTemplatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Template != nil {
		{
			size, err := m.Template.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTripTemplatesResponse_TripTemplate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTripTemplatesResponse_TripTemplate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTripTemplatesResponse_TripTemplate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != nil {
		n39, err39 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err39 != nil {
			return 0, err39
		}
		i -= n39
		i = encodeVarintAgency(dAtA, i, uint64(n39))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xd2
	}
	if m.CreatedAt != nil {
		n40, err40 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err40 != nil {
			return 0, err40
		}
		i -= n40
		i = encodeVarintAgency(dAtA, i, uint64(n40))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x82
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Images[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgency(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4
			i--
			dAtA[i] = 0xb2
		}
	}
	if m.LiveaboardId != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.LiveaboardId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe0
	}
	if m.BoatId != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.BoatId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x90
	}
	if m.HotelId != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.HotelId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc0
	}
	if m.TripType != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.TripType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x52
	}
	if m.Id != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListTripsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTripsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTripsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListTripsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTripsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTripsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Trip != nil {
		{
			size, err := m.Trip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTripsResponse_Trip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTripsResponse_Trip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTripsResponse_Trip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != nil {
		n42, err42 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err42 != nil {
			return 0, err42
		}
		i -= n42
		i = encodeVarintAgency(dAtA, i, uint64(n42))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xd2
	}
	if m.CreatedAt != nil {
		n43, err43 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err43 != nil {
			return 0, err43
		}
		i -= n43
		i = encodeVarintAgency(dAtA, i, uint64(n43))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x82
	}
	if m.LastReservationDate != nil {
		n44, err44 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastReservationDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastReservationDate):])
		if err44 != nil {
			return 0, err44
		}
		i -= n44
		i = encodeVarintAgency(dAtA, i, uint64(n44))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb2
	}
	if m.ToDate != nil {
		n45, err45 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ToDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ToDate):])
		if err45 != nil {
			return 0, err45
		}
		i -= n45
		i = encodeVarintAgency(dAtA, i, uint64(n45))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	if m.FromDate != nil {
		n46, err46 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.FromDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.FromDate):])
		if err46 != nil {
			return 0, err46
		}
		i -= n46
		i = encodeVarintAgency(dAtA, i, uint64(n46))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	if m.Price != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Price))))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc5
	}
	if m.MaxGuest != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.MaxGuest))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.TripTemplateId != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.TripTemplateId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.Id != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SearchTripsOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchTripsOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchTripsOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndDate != nil {
		n47, err47 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.EndDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndDate):])
		if err47 != nil {
			return 0, err47
		}
		i -= n47
		i = encodeVarintAgency(dAtA, i, uint64(n47))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.StartDate != nil {
		n48, err48 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartDate):])
		if err48 != nil {
			return 0, err48
		}
		i -= n48
		i = encodeVarintAgency(dAtA, i, uint64(n48))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.TripType != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.TripType))
		i--
		dAtA[i] = 0x78
	}
	if m.Divers != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Divers))
		i--
		dAtA[i] = 0x50
	}
	if m.LocationFilter != nil {
		{
			size := m.LocationFilter.Size()
			i -= size
			if _, err := m.LocationFilter.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SearchTripsOptions_Country) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchTripsOptions_Country) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Country)
	copy(dAtA[i:], m.Country)
	i = encodeVarintAgency(dAtA, i, uint64(len(m.Country)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *SearchTripsOptions_City) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchTripsOptions_City) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.City)
	copy(dAtA[i:], m.City)
	i = encodeVarintAgency(dAtA, i, uint64(len(m.City)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *SearchTripsOptions_Region) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchTripsOptions_Region) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Region)
	copy(dAtA[i:], m.Region)
	i = encodeVarintAgency(dAtA, i, uint64(len(m.Region)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *SearchTripsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchTripsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchTripsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.SearchTripsOptions != nil {
		{
			size, err := m.SearchTripsOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchTripsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchTripsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchTripsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Trip != nil {
		{
			size, err := m.Trip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchTripsResponse_Trip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchTripsResponse_Trip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchTripsResponse_Trip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TripTemplate != nil {
		{
			size, err := m.TripTemplate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xf2
	}
	if m.UpdatedAt != nil {
		n52, err52 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err52 != nil {
			return 0, err52
		}
		i -= n52
		i = encodeVarintAgency(dAtA, i, uint64(n52))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.CreatedAt != nil {
		n53, err53 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err53 != nil {
			return 0, err53
		}
		i -= n53
		i = encodeVarintAgency(dAtA, i, uint64(n53))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xd2
	}
	if m.LastReservationDate != nil {
		n54, err54 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastReservationDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastReservationDate):])
		if err54 != nil {
			return 0, err54
		}
		i -= n54
		i = encodeVarintAgency(dAtA, i, uint64(n54))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x82
	}
	if m.ToDate != nil {
		n55, err55 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ToDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ToDate):])
		if err55 != nil {
			return 0, err55
		}
		i -= n55
		i = encodeVarintAgency(dAtA, i, uint64(n55))
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb2
	}
	if m.FromDate != nil {
		n56, err56 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.FromDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.FromDate):])
		if err56 != nil {
			return 0, err56
		}
		i -= n56
		i = encodeVarintAgency(dAtA, i, uint64(n56))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	if len(m.DiveMasters) > 0 {
		for iNdEx := len(m.DiveMasters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DiveMasters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgency(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0x92
		}
	}
	if m.Price != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Price))))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc5
	}
	if m.MaxGuest != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.MaxGuest))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.TripTemplateId != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.TripTemplateId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.Id != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SearchTripsResponse_TripTemplate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchTripsResponse_TripTemplate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchTripsResponse_TripTemplate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != nil {
		n57, err57 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err57 != nil {
			return 0, err57
		}
		i -= n57
		i = encodeVarintAgency(dAtA, i, uint64(n57))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.CreatedAt != nil {
		n58, err58 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err58 != nil {
			return 0, err58
		}
		i -= n58
		i = encodeVarintAgency(dAtA, i, uint64(n58))
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xd2
	}
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x82
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Images[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgency(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4
			i--
			dAtA[i] = 0xb2
		}
	}
	if m.LiveaboardId != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.LiveaboardId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe0
	}
	if m.BoatId != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.BoatId))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x90
	}
	if m.HotelId != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.HotelId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc0
	}
	if m.TripType != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.TripType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x52
	}
	if m.Id != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAgency(dAtA []byte, offset int, v uint64) int {
	offset -= sovAgency(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DiveMaster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovAgency(uint64(m.Level))
	}
	if m.FrontImage != nil {
		l = m.FrontImage.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.BackImage != nil {
		l = m.BackImage.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *DiveMasterFirstAndLastName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *Staff) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.Gender != 0 {
		n += 1 + sovAgency(uint64(m.Gender))
	}
	return n
}

func (m *DivingBoat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	if len(m.BoatImages) > 0 {
		for _, e := range m.BoatImages {
			l = e.Size()
			n += 1 + l + sovAgency(uint64(l))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.TotalCapacity != 0 {
		n += 1 + sovAgency(uint64(m.TotalCapacity))
	}
	if m.DiverCapacity != 0 {
		n += 1 + sovAgency(uint64(m.DiverCapacity))
	}
	if m.StaffCapacity != 0 {
		n += 1 + sovAgency(uint64(m.StaffCapacity))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *Amenity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *RoomType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.MaxGuest != 0 {
		n += 1 + sovAgency(uint64(m.MaxGuest))
	}
	if m.Price != 0 {
		n += 5
	}
	if len(m.RoomImages) > 0 {
		for _, e := range m.RoomImages {
			l = e.Size()
			n += 1 + l + sovAgency(uint64(l))
		}
	}
	if len(m.Amenities) > 0 {
		for _, e := range m.Amenities {
			l = e.Size()
			n += 1 + l + sovAgency(uint64(l))
		}
	}
	if m.Quantity != 0 {
		n += 1 + sovAgency(uint64(m.Quantity))
	}
	return n
}

func (m *HotelAndBoatId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HotelId != 0 {
		n += 1 + sovAgency(uint64(m.HotelId))
	}
	if m.BoatId != 0 {
		n += 1 + sovAgency(uint64(m.BoatId))
	}
	return n
}

func (m *TripTemplate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 1 + l + sovAgency(uint64(l))
		}
	}
	if m.TripType != 0 {
		n += 1 + sovAgency(uint64(m.TripType))
	}
	if m.ResidenceId != nil {
		n += m.ResidenceId.Size()
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 2 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *TripTemplate_HotelAndBoatId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HotelAndBoatId != nil {
		l = m.HotelAndBoatId.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}
func (m *TripTemplate_LiveaboardId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovAgency(uint64(m.LiveaboardId))
	return n
}
func (m *Trip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.From)
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.To != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.To)
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.MaxCapacity != 0 {
		n += 1 + sovAgency(uint64(m.MaxCapacity))
	}
	if m.Price != 0 {
		n += 5
	}
	if len(m.DiveMasterIds) > 0 {
		l = 0
		for _, e := range m.DiveMasterIds {
			l += sovAgency(uint64(e))
		}
		n += 1 + sovAgency(uint64(l)) + l
	}
	if m.LastReservationDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastReservationDate)
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *Hotel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HotelName)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.Star != 0 {
		n += 1 + sovAgency(uint64(m.Star))
	}
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 1 + l + sovAgency(uint64(l))
		}
	}
	if len(m.RoomTypes) > 0 {
		for _, e := range m.RoomTypes {
			l = e.Size()
			n += 1 + l + sovAgency(uint64(l))
		}
	}
	l = len(m.HotelDescription)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *Liveaboard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.Length != 0 {
		n += 1 + sovAgency(uint64(m.Length))
	}
	if m.Width != 0 {
		n += 1 + sovAgency(uint64(m.Width))
	}
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 1 + l + sovAgency(uint64(l))
		}
	}
	if len(m.RoomTypes) > 0 {
		for _, e := range m.RoomTypes {
			l = e.Size()
			n += 1 + l + sovAgency(uint64(l))
		}
	}
	if m.TotalCapacity != 0 {
		n += 1 + sovAgency(uint64(m.TotalCapacity))
	}
	if m.DiverRooms != 0 {
		n += 1 + sovAgency(uint64(m.DiverRooms))
	}
	if m.StaffRooms != 0 {
		n += 1 + sovAgency(uint64(m.StaffRooms))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *AddDiveMasterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DiveMaster != nil {
		l = m.DiveMaster.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *AddStaffRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Staff != nil {
		l = m.Staff.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *AddTripTemplateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TripTemplate != nil {
		l = m.TripTemplate.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.AgencyId != 0 {
		n += 1 + sovAgency(uint64(m.AgencyId))
	}
	return n
}

func (m *AddTripRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Trip != nil {
		l = m.Trip.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.TripTemplate != nil {
		l = m.TripTemplate.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *AddDivingBoatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DivingBoat != nil {
		l = m.DivingBoat.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *AddHotelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hotel != nil {
		l = m.Hotel.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *AddLiveaboardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Liveaboard != nil {
		l = m.Liveaboard.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *ListBoatsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovAgency(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovAgency(uint64(m.Offset))
	}
	return n
}

func (m *ListBoatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Boat != nil {
		l = m.Boat.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *ListBoatsResponse_Boat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAgency(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 2 + l + sovAgency(uint64(l))
		}
	}
	if m.TotalCapacity != 0 {
		n += 2 + sovAgency(uint64(m.TotalCapacity))
	}
	if m.DiverCapacity != 0 {
		n += 2 + sovAgency(uint64(m.DiverCapacity))
	}
	if m.StaffCapacity != 0 {
		n += 2 + sovAgency(uint64(m.StaffCapacity))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 2 + l + sovAgency(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 2 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *ListDiveMastersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovAgency(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovAgency(uint64(m.Offset))
	}
	return n
}

func (m *ListDiveMastersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DiveMaster != nil {
		l = m.DiveMaster.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *ListDiveMastersResponse_DiveMaster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAgency(uint64(m.Id))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 2 + l + sovAgency(uint64(l))
	}
	if m.Level != 0 {
		n += 2 + sovAgency(uint64(m.Level))
	}
	if len(m.Documents) > 0 {
		for _, e := range m.Documents {
			l = e.Size()
			n += 2 + l + sovAgency(uint64(l))
		}
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 2 + l + sovAgency(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 2 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *ListHotelsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovAgency(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovAgency(uint64(m.Offset))
	}
	return n
}

func (m *ListHotelsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hotel != nil {
		l = m.Hotel.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *ListHotelsResponse_Hotel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAgency(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 2 + l + sovAgency(uint64(l))
	}
	if m.Stars != 0 {
		n += 2 + sovAgency(uint64(m.Stars))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 2 + l + sovAgency(uint64(l))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 2 + l + sovAgency(uint64(l))
	}
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 2 + l + sovAgency(uint64(l))
		}
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 2 + l + sovAgency(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 2 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *ListLiveaboardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovAgency(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovAgency(uint64(m.Offset))
	}
	return n
}

func (m *ListLiveaboardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Liveaboard != nil {
		l = m.Liveaboard.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *ListLiveaboardsResponse_Liveaboard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAgency(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 2 + l + sovAgency(uint64(l))
	}
	if m.Length != 0 {
		n += 6
	}
	if m.Width != 0 {
		n += 6
	}
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 2 + l + sovAgency(uint64(l))
		}
	}
	if m.TotalCapacity != 0 {
		n += 2 + sovAgency(uint64(m.TotalCapacity))
	}
	if m.DiverRooms != 0 {
		n += 2 + sovAgency(uint64(m.DiverRooms))
	}
	if m.StaffRooms != 0 {
		n += 2 + sovAgency(uint64(m.StaffRooms))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 2 + l + sovAgency(uint64(l))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 2 + l + sovAgency(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 2 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *ListStaffsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovAgency(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovAgency(uint64(m.Offset))
	}
	return n
}

func (m *ListStaffsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Staff != nil {
		l = m.Staff.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *ListStaffsResponse_Staff) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAgency(uint64(m.Id))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 2 + l + sovAgency(uint64(l))
	}
	l = len(m.Position)
	if l > 0 {
		n += 2 + l + sovAgency(uint64(l))
	}
	if m.Gender != 0 {
		n += 2 + sovAgency(uint64(m.Gender))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 2 + l + sovAgency(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 2 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *ListTripTemplatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovAgency(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovAgency(uint64(m.Offset))
	}
	return n
}

func (m *ListTripTemplatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Template != nil {
		l = m.Template.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *ListTripTemplatesResponse_TripTemplate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAgency(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 2 + l + sovAgency(uint64(l))
	}
	if m.TripType != 0 {
		n += 2 + sovAgency(uint64(m.TripType))
	}
	if m.HotelId != 0 {
		n += 2 + sovAgency(uint64(m.HotelId))
	}
	if m.BoatId != 0 {
		n += 2 + sovAgency(uint64(m.BoatId))
	}
	if m.LiveaboardId != 0 {
		n += 2 + sovAgency(uint64(m.LiveaboardId))
	}
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 2 + l + sovAgency(uint64(l))
		}
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 2 + l + sovAgency(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 2 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *ListTripsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovAgency(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovAgency(uint64(m.Offset))
	}
	return n
}

func (m *ListTripsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Trip != nil {
		l = m.Trip.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *ListTripsResponse_Trip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAgency(uint64(m.Id))
	}
	if m.TripTemplateId != 0 {
		n += 2 + sovAgency(uint64(m.TripTemplateId))
	}
	if m.MaxGuest != 0 {
		n += 2 + sovAgency(uint64(m.MaxGuest))
	}
	if m.Price != 0 {
		n += 6
	}
	if m.FromDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.FromDate)
		n += 2 + l + sovAgency(uint64(l))
	}
	if m.ToDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ToDate)
		n += 2 + l + sovAgency(uint64(l))
	}
	if m.LastReservationDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastReservationDate)
		n += 2 + l + sovAgency(uint64(l))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 2 + l + sovAgency(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 2 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *SearchTripsOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LocationFilter != nil {
		n += m.LocationFilter.Size()
	}
	if m.Divers != 0 {
		n += 1 + sovAgency(uint64(m.Divers))
	}
	if m.TripType != 0 {
		n += 1 + sovAgency(uint64(m.TripType))
	}
	if m.StartDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartDate)
		n += 2 + l + sovAgency(uint64(l))
	}
	if m.EndDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndDate)
		n += 2 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *SearchTripsOptions_Country) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Country)
	n += 1 + l + sovAgency(uint64(l))
	return n
}
func (m *SearchTripsOptions_City) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.City)
	n += 1 + l + sovAgency(uint64(l))
	return n
}
func (m *SearchTripsOptions_Region) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Region)
	n += 1 + l + sovAgency(uint64(l))
	return n
}
func (m *SearchTripsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SearchTripsOptions != nil {
		l = m.SearchTripsOptions.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovAgency(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovAgency(uint64(m.Offset))
	}
	return n
}

func (m *SearchTripsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Trip != nil {
		l = m.Trip.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *SearchTripsResponse_Trip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAgency(uint64(m.Id))
	}
	if m.TripTemplateId != 0 {
		n += 2 + sovAgency(uint64(m.TripTemplateId))
	}
	if m.MaxGuest != 0 {
		n += 2 + sovAgency(uint64(m.MaxGuest))
	}
	if m.Price != 0 {
		n += 6
	}
	if len(m.DiveMasters) > 0 {
		for _, e := range m.DiveMasters {
			l = e.Size()
			n += 2 + l + sovAgency(uint64(l))
		}
	}
	if m.FromDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.FromDate)
		n += 2 + l + sovAgency(uint64(l))
	}
	if m.ToDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ToDate)
		n += 2 + l + sovAgency(uint64(l))
	}
	if m.LastReservationDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastReservationDate)
		n += 2 + l + sovAgency(uint64(l))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 2 + l + sovAgency(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 2 + l + sovAgency(uint64(l))
	}
	if m.TripTemplate != nil {
		l = m.TripTemplate.Size()
		n += 2 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *SearchTripsResponse_TripTemplate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAgency(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 2 + l + sovAgency(uint64(l))
	}
	if m.TripType != 0 {
		n += 2 + sovAgency(uint64(m.TripType))
	}
	if m.HotelId != 0 {
		n += 2 + sovAgency(uint64(m.HotelId))
	}
	if m.BoatId != 0 {
		n += 2 + sovAgency(uint64(m.BoatId))
	}
	if m.LiveaboardId != 0 {
		n += 2 + sovAgency(uint64(m.LiveaboardId))
	}
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 2 + l + sovAgency(uint64(l))
		}
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 2 + l + sovAgency(uint64(l))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 2 + l + sovAgency(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 2 + l + sovAgency(uint64(l))
	}
	return n
}

func sovAgency(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAgency(x uint64) (n int) {
	return sovAgency(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DiveMaster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DiveMaster{`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`FrontImage:` + strings.Replace(fmt.Sprintf("%v", this.FrontImage), "File", "File", 1) + `,`,
		`BackImage:` + strings.Replace(fmt.Sprintf("%v", this.BackImage), "File", "File", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DiveMasterFirstAndLastName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DiveMasterFirstAndLastName{`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Staff) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Staff{`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`Position:` + fmt.Sprintf("%v", this.Position) + `,`,
		`Gender:` + fmt.Sprintf("%v", this.Gender) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DivingBoat) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBoatImages := "[]*File{"
	for _, f := range this.BoatImages {
		repeatedStringForBoatImages += strings.Replace(fmt.Sprintf("%v", f), "File", "File", 1) + ","
	}
	repeatedStringForBoatImages += "}"
	s := strings.Join([]string{`&DivingBoat{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`BoatImages:` + repeatedStringForBoatImages + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`TotalCapacity:` + fmt.Sprintf("%v", this.TotalCapacity) + `,`,
		`DiverCapacity:` + fmt.Sprintf("%v", this.DiverCapacity) + `,`,
		`StaffCapacity:` + fmt.Sprintf("%v", this.StaffCapacity) + `,`,
		`Address:` + strings.Replace(fmt.Sprintf("%v", this.Address), "Address", "Address", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Amenity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Amenity{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoomType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRoomImages := "[]*File{"
	for _, f := range this.RoomImages {
		repeatedStringForRoomImages += strings.Replace(fmt.Sprintf("%v", f), "File", "File", 1) + ","
	}
	repeatedStringForRoomImages += "}"
	repeatedStringForAmenities := "[]*Amenity{"
	for _, f := range this.Amenities {
		repeatedStringForAmenities += strings.Replace(f.String(), "Amenity", "Amenity", 1) + ","
	}
	repeatedStringForAmenities += "}"
	s := strings.Join([]string{`&RoomType{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`MaxGuest:` + fmt.Sprintf("%v", this.MaxGuest) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`RoomImages:` + repeatedStringForRoomImages + `,`,
		`Amenities:` + repeatedStringForAmenities + `,`,
		`Quantity:` + fmt.Sprintf("%v", this.Quantity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HotelAndBoatId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HotelAndBoatId{`,
		`HotelId:` + fmt.Sprintf("%v", this.HotelId) + `,`,
		`BoatId:` + fmt.Sprintf("%v", this.BoatId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TripTemplate) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForImages := "[]*File{"
	for _, f := range this.Images {
		repeatedStringForImages += strings.Replace(fmt.Sprintf("%v", f), "File", "File", 1) + ","
	}
	repeatedStringForImages += "}"
	s := strings.Join([]string{`&TripTemplate{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Images:` + repeatedStringForImages + `,`,
		`TripType:` + fmt.Sprintf("%v", this.TripType) + `,`,
		`ResidenceId:` + fmt.Sprintf("%v", this.ResidenceId) + `,`,
		`Address:` + strings.Replace(fmt.Sprintf("%v", this.Address), "Address", "Address", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TripTemplate_HotelAndBoatId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TripTemplate_HotelAndBoatId{`,
		`HotelAndBoatId:` + strings.Replace(fmt.Sprintf("%v", this.HotelAndBoatId), "HotelAndBoatId", "HotelAndBoatId", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TripTemplate_LiveaboardId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TripTemplate_LiveaboardId{`,
		`LiveaboardId:` + fmt.Sprintf("%v", this.LiveaboardId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Trip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Trip{`,
		`From:` + strings.Replace(fmt.Sprintf("%v", this.From), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`To:` + strings.Replace(fmt.Sprintf("%v", this.To), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`MaxCapacity:` + fmt.Sprintf("%v", this.MaxCapacity) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`DiveMasterIds:` + fmt.Sprintf("%v", this.DiveMasterIds) + `,`,
		`LastReservationDate:` + strings.Replace(fmt.Sprintf("%v", this.LastReservationDate), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Hotel) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForImages := "[]*File{"
	for _, f := range this.Images {
		repeatedStringForImages += strings.Replace(fmt.Sprintf("%v", f), "File", "File", 1) + ","
	}
	repeatedStringForImages += "}"
	repeatedStringForRoomTypes := "[]*RoomType{"
	for _, f := range this.RoomTypes {
		repeatedStringForRoomTypes += strings.Replace(f.String(), "RoomType", "RoomType", 1) + ","
	}
	repeatedStringForRoomTypes += "}"
	s := strings.Join([]string{`&Hotel{`,
		`HotelName:` + fmt.Sprintf("%v", this.HotelName) + `,`,
		`Star:` + fmt.Sprintf("%v", this.Star) + `,`,
		`Images:` + repeatedStringForImages + `,`,
		`RoomTypes:` + repeatedStringForRoomTypes + `,`,
		`HotelDescription:` + fmt.Sprintf("%v", this.HotelDescription) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`Address:` + strings.Replace(fmt.Sprintf("%v", this.Address), "Address", "Address", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Liveaboard) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForImages := "[]*File{"
	for _, f := range this.Images {
		repeatedStringForImages += strings.Replace(fmt.Sprintf("%v", f), "File", "File", 1) + ","
	}
	repeatedStringForImages += "}"
	repeatedStringForRoomTypes := "[]*RoomType{"
	for _, f := range this.RoomTypes {
		repeatedStringForRoomTypes += strings.Replace(f.String(), "RoomType", "RoomType", 1) + ","
	}
	repeatedStringForRoomTypes += "}"
	s := strings.Join([]string{`&Liveaboard{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Length:` + fmt.Sprintf("%v", this.Length) + `,`,
		`Width:` + fmt.Sprintf("%v", this.Width) + `,`,
		`Images:` + repeatedStringForImages + `,`,
		`RoomTypes:` + repeatedStringForRoomTypes + `,`,
		`TotalCapacity:` + fmt.Sprintf("%v", this.TotalCapacity) + `,`,
		`DiverRooms:` + fmt.Sprintf("%v", this.DiverRooms) + `,`,
		`StaffRooms:` + fmt.Sprintf("%v", this.StaffRooms) + `,`,
		`Address:` + strings.Replace(fmt.Sprintf("%v", this.Address), "Address", "Address", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddDiveMasterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddDiveMasterRequest{`,
		`DiveMaster:` + strings.Replace(this.DiveMaster.String(), "DiveMaster", "DiveMaster", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddStaffRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddStaffRequest{`,
		`Staff:` + strings.Replace(this.Staff.String(), "Staff", "Staff", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddTripTemplateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddTripTemplateRequest{`,
		`TripTemplate:` + strings.Replace(this.TripTemplate.String(), "TripTemplate", "TripTemplate", 1) + `,`,
		`AgencyId:` + fmt.Sprintf("%v", this.AgencyId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddTripRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddTripRequest{`,
		`Trip:` + strings.Replace(this.Trip.String(), "Trip", "Trip", 1) + `,`,
		`TripTemplate:` + strings.Replace(this.TripTemplate.String(), "TripTemplate", "TripTemplate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddDivingBoatRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddDivingBoatRequest{`,
		`DivingBoat:` + strings.Replace(this.DivingBoat.String(), "DivingBoat", "DivingBoat", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddHotelRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddHotelRequest{`,
		`Hotel:` + strings.Replace(this.Hotel.String(), "Hotel", "Hotel", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddLiveaboardRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddLiveaboardRequest{`,
		`Liveaboard:` + strings.Replace(this.Liveaboard.String(), "Liveaboard", "Liveaboard", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListBoatsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListBoatsRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListBoatsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListBoatsResponse{`,
		`Boat:` + strings.Replace(fmt.Sprintf("%v", this.Boat), "ListBoatsResponse_Boat", "ListBoatsResponse_Boat", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListBoatsResponse_Boat) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForImages := "[]*File{"
	for _, f := range this.Images {
		repeatedStringForImages += strings.Replace(fmt.Sprintf("%v", f), "File", "File", 1) + ","
	}
	repeatedStringForImages += "}"
	s := strings.Join([]string{`&ListBoatsResponse_Boat{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Images:` + repeatedStringForImages + `,`,
		`TotalCapacity:` + fmt.Sprintf("%v", this.TotalCapacity) + `,`,
		`DiverCapacity:` + fmt.Sprintf("%v", this.DiverCapacity) + `,`,
		`StaffCapacity:` + fmt.Sprintf("%v", this.StaffCapacity) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListDiveMastersRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListDiveMastersRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListDiveMastersResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListDiveMastersResponse{`,
		`DiveMaster:` + strings.Replace(fmt.Sprintf("%v", this.DiveMaster), "ListDiveMastersResponse_DiveMaster", "ListDiveMastersResponse_DiveMaster", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListDiveMastersResponse_DiveMaster) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDocuments := "[]*File{"
	for _, f := range this.Documents {
		repeatedStringForDocuments += strings.Replace(fmt.Sprintf("%v", f), "File", "File", 1) + ","
	}
	repeatedStringForDocuments += "}"
	s := strings.Join([]string{`&ListDiveMastersResponse_DiveMaster{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`Documents:` + repeatedStringForDocuments + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListHotelsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListHotelsRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListHotelsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListHotelsResponse{`,
		`Hotel:` + strings.Replace(fmt.Sprintf("%v", this.Hotel), "ListHotelsResponse_Hotel", "ListHotelsResponse_Hotel", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListHotelsResponse_Hotel) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForImages := "[]*File{"
	for _, f := range this.Images {
		repeatedStringForImages += strings.Replace(fmt.Sprintf("%v", f), "File", "File", 1) + ","
	}
	repeatedStringForImages += "}"
	s := strings.Join([]string{`&ListHotelsResponse_Hotel{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Stars:` + fmt.Sprintf("%v", this.Stars) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`Address:` + strings.Replace(fmt.Sprintf("%v", this.Address), "Address", "Address", 1) + `,`,
		`Images:` + repeatedStringForImages + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListLiveaboardsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListLiveaboardsRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListLiveaboardsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListLiveaboardsResponse{`,
		`Liveaboard:` + strings.Replace(fmt.Sprintf("%v", this.Liveaboard), "ListLiveaboardsResponse_Liveaboard", "ListLiveaboardsResponse_Liveaboard", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListLiveaboardsResponse_Liveaboard) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForImages := "[]*File{"
	for _, f := range this.Images {
		repeatedStringForImages += strings.Replace(fmt.Sprintf("%v", f), "File", "File", 1) + ","
	}
	repeatedStringForImages += "}"
	s := strings.Join([]string{`&ListLiveaboardsResponse_Liveaboard{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Length:` + fmt.Sprintf("%v", this.Length) + `,`,
		`Width:` + fmt.Sprintf("%v", this.Width) + `,`,
		`Images:` + repeatedStringForImages + `,`,
		`TotalCapacity:` + fmt.Sprintf("%v", this.TotalCapacity) + `,`,
		`DiverRooms:` + fmt.Sprintf("%v", this.DiverRooms) + `,`,
		`StaffRooms:` + fmt.Sprintf("%v", this.StaffRooms) + `,`,
		`Address:` + strings.Replace(fmt.Sprintf("%v", this.Address), "Address", "Address", 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListStaffsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListStaffsRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListStaffsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListStaffsResponse{`,
		`Staff:` + strings.Replace(fmt.Sprintf("%v", this.Staff), "ListStaffsResponse_Staff", "ListStaffsResponse_Staff", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListStaffsResponse_Staff) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListStaffsResponse_Staff{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`Position:` + fmt.Sprintf("%v", this.Position) + `,`,
		`Gender:` + fmt.Sprintf("%v", this.Gender) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListTripTemplatesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListTripTemplatesRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListTripTemplatesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListTripTemplatesResponse{`,
		`Template:` + strings.Replace(fmt.Sprintf("%v", this.Template), "ListTripTemplatesResponse_TripTemplate", "ListTripTemplatesResponse_TripTemplate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListTripTemplatesResponse_TripTemplate) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForImages := "[]*File{"
	for _, f := range this.Images {
		repeatedStringForImages += strings.Replace(fmt.Sprintf("%v", f), "File", "File", 1) + ","
	}
	repeatedStringForImages += "}"
	s := strings.Join([]string{`&ListTripTemplatesResponse_TripTemplate{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`TripType:` + fmt.Sprintf("%v", this.TripType) + `,`,
		`HotelId:` + fmt.Sprintf("%v", this.HotelId) + `,`,
		`BoatId:` + fmt.Sprintf("%v", this.BoatId) + `,`,
		`LiveaboardId:` + fmt.Sprintf("%v", this.LiveaboardId) + `,`,
		`Images:` + repeatedStringForImages + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListTripsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListTripsRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListTripsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListTripsResponse{`,
		`Trip:` + strings.Replace(fmt.Sprintf("%v", this.Trip), "ListTripsResponse_Trip", "ListTripsResponse_Trip", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListTripsResponse_Trip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListTripsResponse_Trip{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`TripTemplateId:` + fmt.Sprintf("%v", this.TripTemplateId) + `,`,
		`MaxGuest:` + fmt.Sprintf("%v", this.MaxGuest) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`FromDate:` + strings.Replace(fmt.Sprintf("%v", this.FromDate), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`ToDate:` + strings.Replace(fmt.Sprintf("%v", this.ToDate), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`LastReservationDate:` + strings.Replace(fmt.Sprintf("%v", this.LastReservationDate), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchTripsOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchTripsOptions{`,
		`LocationFilter:` + fmt.Sprintf("%v", this.LocationFilter) + `,`,
		`Divers:` + fmt.Sprintf("%v", this.Divers) + `,`,
		`TripType:` + fmt.Sprintf("%v", this.TripType) + `,`,
		`StartDate:` + strings.Replace(fmt.Sprintf("%v", this.StartDate), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`EndDate:` + strings.Replace(fmt.Sprintf("%v", this.EndDate), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchTripsOptions_Country) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchTripsOptions_Country{`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchTripsOptions_City) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchTripsOptions_City{`,
		`City:` + fmt.Sprintf("%v", this.City) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchTripsOptions_Region) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchTripsOptions_Region{`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchTripsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchTripsRequest{`,
		`SearchTripsOptions:` + strings.Replace(this.SearchTripsOptions.String(), "SearchTripsOptions", "SearchTripsOptions", 1) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchTripsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchTripsResponse{`,
		`Trip:` + strings.Replace(fmt.Sprintf("%v", this.Trip), "SearchTripsResponse_Trip", "SearchTripsResponse_Trip", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchTripsResponse_Trip) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDiveMasters := "[]*DiveMaster{"
	for _, f := range this.DiveMasters {
		repeatedStringForDiveMasters += strings.Replace(f.String(), "DiveMaster", "DiveMaster", 1) + ","
	}
	repeatedStringForDiveMasters += "}"
	s := strings.Join([]string{`&SearchTripsResponse_Trip{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`TripTemplateId:` + fmt.Sprintf("%v", this.TripTemplateId) + `,`,
		`MaxGuest:` + fmt.Sprintf("%v", this.MaxGuest) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`DiveMasters:` + repeatedStringForDiveMasters + `,`,
		`FromDate:` + strings.Replace(fmt.Sprintf("%v", this.FromDate), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`ToDate:` + strings.Replace(fmt.Sprintf("%v", this.ToDate), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`LastReservationDate:` + strings.Replace(fmt.Sprintf("%v", this.LastReservationDate), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`TripTemplate:` + strings.Replace(fmt.Sprintf("%v", this.TripTemplate), "SearchTripsResponse_TripTemplate", "SearchTripsResponse_TripTemplate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchTripsResponse_TripTemplate) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForImages := "[]*File{"
	for _, f := range this.Images {
		repeatedStringForImages += strings.Replace(fmt.Sprintf("%v", f), "File", "File", 1) + ","
	}
	repeatedStringForImages += "}"
	s := strings.Join([]string{`&SearchTripsResponse_TripTemplate{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`TripType:` + fmt.Sprintf("%v", this.TripType) + `,`,
		`HotelId:` + fmt.Sprintf("%v", this.HotelId) + `,`,
		`BoatId:` + fmt.Sprintf("%v", this.BoatId) + `,`,
		`LiveaboardId:` + fmt.Sprintf("%v", this.LiveaboardId) + `,`,
		`Images:` + repeatedStringForImages + `,`,
		`Address:` + strings.Replace(fmt.Sprintf("%v", this.Address), "Address", "Address", 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAgency(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DiveMaster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiveMaster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiveMaster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= LevelType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrontImage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FrontImage == nil {
				m.FrontImage = &File{}
			}
			if err := m.FrontImage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackImage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BackImage == nil {
				m.BackImage = &File{}
			}
			if err := m.BackImage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiveMasterFirstAndLastName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiveMasterFirstAndLastName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiveMasterFirstAndLastName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Staff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Staff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Staff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= GenderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DivingBoat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DivingBoat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DivingBoat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoatImages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoatImages = append(m.BoatImages, &File{})
			if err := m.BoatImages[len(m.BoatImages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCapacity", wireType)
			}
			m.TotalCapacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCapacity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiverCapacity", wireType)
			}
			m.DiverCapacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiverCapacity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaffCapacity", wireType)
			}
			m.StaffCapacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StaffCapacity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Amenity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Amenity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Amenity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGuest", wireType)
			}
			m.MaxGuest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxGuest |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Price = float32(math.Float32frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomImages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomImages = append(m.RoomImages, &File{})
			if err := m.RoomImages[len(m.RoomImages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amenities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amenities = append(m.Amenities, &Amenity{})
			if err := m.Amenities[len(m.Amenities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HotelAndBoatId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HotelAndBoatId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HotelAndBoatId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotelId", wireType)
			}
			m.HotelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HotelId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoatId", wireType)
			}
			m.BoatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoatId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TripTemplate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TripTemplate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TripTemplate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, &File{})
			if err := m.Images[len(m.Images)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TripType", wireType)
			}
			m.TripType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TripType |= TripType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotelAndBoatId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HotelAndBoatId{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.ResidenceId = &TripTemplate_HotelAndBoatId{v}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveaboardId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ResidenceId = &TripTemplate_LiveaboardId{v}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Trip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.From, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.To, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCapacity", wireType)
			}
			m.MaxCapacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCapacity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Price = float32(math.Float32frombits(v))
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgency
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DiveMasterIds = append(m.DiveMasterIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgency
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAgency
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAgency
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DiveMasterIds) == 0 {
					m.DiveMasterIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgency
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DiveMasterIds = append(m.DiveMasterIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DiveMasterIds", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastReservationDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastReservationDate == nil {
				m.LastReservationDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastReservationDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hotel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hotel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hotel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HotelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star", wireType)
			}
			m.Star = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, &File{})
			if err := m.Images[len(m.Images)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomTypes = append(m.RoomTypes, &RoomType{})
			if err := m.RoomTypes[len(m.RoomTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotelDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HotelDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Liveaboard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Liveaboard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Liveaboard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, &File{})
			if err := m.Images[len(m.Images)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomTypes = append(m.RoomTypes, &RoomType{})
			if err := m.RoomTypes[len(m.RoomTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCapacity", wireType)
			}
			m.TotalCapacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCapacity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiverRooms", wireType)
			}
			m.DiverRooms = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiverRooms |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaffRooms", wireType)
			}
			m.StaffRooms = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StaffRooms |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddDiveMasterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddDiveMasterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddDiveMasterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiveMaster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DiveMaster == nil {
				m.DiveMaster = &DiveMaster{}
			}
			if err := m.DiveMaster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddStaffRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddStaffRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddStaffRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staff", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Staff == nil {
				m.Staff = &Staff{}
			}
			if err := m.Staff.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddTripTemplateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddTripTemplateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddTripTemplateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TripTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TripTemplate == nil {
				m.TripTemplate = &TripTemplate{}
			}
			if err := m.TripTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgencyId", wireType)
			}
			m.AgencyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgencyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddTripRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddTripRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddTripRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trip == nil {
				m.Trip = &Trip{}
			}
			if err := m.Trip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TripTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TripTemplate == nil {
				m.TripTemplate = &TripTemplate{}
			}
			if err := m.TripTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddDivingBoatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddDivingBoatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddDivingBoatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DivingBoat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DivingBoat == nil {
				m.DivingBoat = &DivingBoat{}
			}
			if err := m.DivingBoat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddHotelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddHotelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddHotelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hotel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hotel == nil {
				m.Hotel = &Hotel{}
			}
			if err := m.Hotel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddLiveaboardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddLiveaboardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddLiveaboardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liveaboard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Liveaboard == nil {
				m.Liveaboard = &Liveaboard{}
			}
			if err := m.Liveaboard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBoatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBoatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBoatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBoatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBoatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBoatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Boat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Boat == nil {
				m.Boat = &ListBoatsResponse_Boat{}
			}
			if err := m.Boat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBoatsResponse_Boat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Boat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Boat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, &File{})
			if err := m.Images[len(m.Images)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCapacity", wireType)
			}
			m.TotalCapacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCapacity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiverCapacity", wireType)
			}
			m.DiverCapacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiverCapacity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaffCapacity", wireType)
			}
			m.StaffCapacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StaffCapacity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDiveMastersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDiveMastersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDiveMastersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDiveMastersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDiveMastersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDiveMastersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiveMaster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DiveMaster == nil {
				m.DiveMaster = &ListDiveMastersResponse_DiveMaster{}
			}
			if err := m.DiveMaster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDiveMastersResponse_DiveMaster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiveMaster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiveMaster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= LevelType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Documents = append(m.Documents, &File{})
			if err := m.Documents[len(m.Documents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListHotelsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListHotelsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListHotelsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListHotelsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListHotelsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListHotelsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hotel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hotel == nil {
				m.Hotel = &ListHotelsResponse_Hotel{}
			}
			if err := m.Hotel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListHotelsResponse_Hotel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hotel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hotel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stars", wireType)
			}
			m.Stars = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stars |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, &File{})
			if err := m.Images[len(m.Images)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListLiveaboardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListLiveaboardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListLiveaboardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListLiveaboardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListLiveaboardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListLiveaboardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liveaboard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Liveaboard == nil {
				m.Liveaboard = &ListLiveaboardsResponse_Liveaboard{}
			}
			if err := m.Liveaboard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListLiveaboardsResponse_Liveaboard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Liveaboard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Liveaboard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Length = float32(math.Float32frombits(v))
		case 40:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Width = float32(math.Float32frombits(v))
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, &File{})
			if err := m.Images[len(m.Images)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCapacity", wireType)
			}
			m.TotalCapacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCapacity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 52:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiverRooms", wireType)
			}
			m.DiverRooms = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiverRooms |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaffRooms", wireType)
			}
			m.StaffRooms = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StaffRooms |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListStaffsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListStaffsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListStaffsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListStaffsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListStaffsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListStaffsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staff", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Staff == nil {
				m.Staff = &ListStaffsResponse_Staff{}
			}
			if err := m.Staff.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListStaffsResponse_Staff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Staff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Staff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= GenderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTripTemplatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTripTemplatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTripTemplatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTripTemplatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTripTemplatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTripTemplatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Template", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Template == nil {
				m.Template = &ListTripTemplatesResponse_TripTemplate{}
			}
			if err := m.Template.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTripTemplatesResponse_TripTemplate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TripTemplate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TripTemplate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TripType", wireType)
			}
			m.TripType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TripType |= TripType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotelId", wireType)
			}
			m.HotelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HotelId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoatId", wireType)
			}
			m.BoatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoatId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 60:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveaboardId", wireType)
			}
			m.LiveaboardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveaboardId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, &File{})
			if err := m.Images[len(m.Images)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 90:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTripsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTripsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTripsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTripsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTripsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTripsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trip == nil {
				m.Trip = &ListTripsResponse_Trip{}
			}
			if err := m.Trip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTripsResponse_Trip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TripTemplateId", wireType)
			}
			m.TripTemplateId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TripTemplateId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGuest", wireType)
			}
			m.MaxGuest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxGuest |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Price = float32(math.Float32frombits(v))
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FromDate == nil {
				m.FromDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.FromDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ToDate == nil {
				m.ToDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ToDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastReservationDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastReservationDate == nil {
				m.LastReservationDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastReservationDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 90:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchTripsOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchTripsOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchTripsOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationFilter = &SearchTripsOptions_Country{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationFilter = &SearchTripsOptions_City{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationFilter = &SearchTripsOptions_Region{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Divers", wireType)
			}
			m.Divers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Divers |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TripType", wireType)
			}
			m.TripType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TripType |= TripType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartDate == nil {
				m.StartDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndDate == nil {
				m.EndDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.EndDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchTripsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchTripsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchTripsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchTripsOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchTripsOptions == nil {
				m.SearchTripsOptions = &SearchTripsOptions{}
			}
			if err := m.SearchTripsOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchTripsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchTripsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchTripsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trip == nil {
				m.Trip = &SearchTripsResponse_Trip{}
			}
			if err := m.Trip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchTripsResponse_Trip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TripTemplateId", wireType)
			}
			m.TripTemplateId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TripTemplateId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGuest", wireType)
			}
			m.MaxGuest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxGuest |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Price = float32(math.Float32frombits(v))
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiveMasters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiveMasters = append(m.DiveMasters, &DiveMaster{})
			if err := m.DiveMasters[len(m.DiveMasters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FromDate == nil {
				m.FromDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.FromDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ToDate == nil {
				m.ToDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ToDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastReservationDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastReservationDate == nil {
				m.LastReservationDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastReservationDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 90:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 110:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TripTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TripTemplate == nil {
				m.TripTemplate = &SearchTripsResponse_TripTemplate{}
			}
			if err := m.TripTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchTripsResponse_TripTemplate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TripTemplate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TripTemplate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TripType", wireType)
			}
			m.TripType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TripType |= TripType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotelId", wireType)
			}
			m.HotelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HotelId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoatId", wireType)
			}
			m.BoatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoatId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 60:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveaboardId", wireType)
			}
			m.LiveaboardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveaboardId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, &File{})
			if err := m.Images[len(m.Images)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 90:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAgency(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAgency
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAgency
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAgency
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAgency        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAgency          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAgency = fmt.Errorf("proto: unexpected end of group")
)
