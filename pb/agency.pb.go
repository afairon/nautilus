// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: agency.proto

package pb

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DiveMaster struct {
	FirstName  string    `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName   string    `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Level      LevelType `protobuf:"varint,3,opt,name=level,proto3,enum=model.LevelType" json:"level,omitempty"`
	FrontImage *File     `protobuf:"bytes,4,opt,name=front_image,json=frontImage,proto3" json:"front_image,omitempty"`
	BackImage  *File     `protobuf:"bytes,5,opt,name=back_image,json=backImage,proto3" json:"back_image,omitempty"`
}

func (m *DiveMaster) Reset()      { *m = DiveMaster{} }
func (*DiveMaster) ProtoMessage() {}
func (*DiveMaster) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{0}
}
func (m *DiveMaster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiveMaster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiveMaster.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiveMaster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiveMaster.Merge(m, src)
}
func (m *DiveMaster) XXX_Size() int {
	return m.Size()
}
func (m *DiveMaster) XXX_DiscardUnknown() {
	xxx_messageInfo_DiveMaster.DiscardUnknown(m)
}

var xxx_messageInfo_DiveMaster proto.InternalMessageInfo

func (m *DiveMaster) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *DiveMaster) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *DiveMaster) GetLevel() LevelType {
	if m != nil {
		return m.Level
	}
	return INSTRUCTOR
}

func (m *DiveMaster) GetFrontImage() *File {
	if m != nil {
		return m.FrontImage
	}
	return nil
}

func (m *DiveMaster) GetBackImage() *File {
	if m != nil {
		return m.BackImage
	}
	return nil
}

type DiveMasterFirstAndLastName struct {
	FirstName string `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
}

func (m *DiveMasterFirstAndLastName) Reset()      { *m = DiveMasterFirstAndLastName{} }
func (*DiveMasterFirstAndLastName) ProtoMessage() {}
func (*DiveMasterFirstAndLastName) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{1}
}
func (m *DiveMasterFirstAndLastName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiveMasterFirstAndLastName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiveMasterFirstAndLastName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiveMasterFirstAndLastName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiveMasterFirstAndLastName.Merge(m, src)
}
func (m *DiveMasterFirstAndLastName) XXX_Size() int {
	return m.Size()
}
func (m *DiveMasterFirstAndLastName) XXX_DiscardUnknown() {
	xxx_messageInfo_DiveMasterFirstAndLastName.DiscardUnknown(m)
}

var xxx_messageInfo_DiveMasterFirstAndLastName proto.InternalMessageInfo

func (m *DiveMasterFirstAndLastName) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *DiveMasterFirstAndLastName) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

type Staff struct {
	FirstName string `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Position  string `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
}

func (m *Staff) Reset()      { *m = Staff{} }
func (*Staff) ProtoMessage() {}
func (*Staff) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{2}
}
func (m *Staff) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Staff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Staff.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Staff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Staff.Merge(m, src)
}
func (m *Staff) XXX_Size() int {
	return m.Size()
}
func (m *Staff) XXX_DiscardUnknown() {
	xxx_messageInfo_Staff.DiscardUnknown(m)
}

var xxx_messageInfo_Staff proto.InternalMessageInfo

func (m *Staff) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Staff) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Staff) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

type DivingBoat struct {
	BoatModel string `protobuf:"bytes,1,opt,name=boat_model,json=boatModel,proto3" json:"boat_model,omitempty"`
	BoatImage *File  `protobuf:"bytes,2,opt,name=boat_image,json=boatImage,proto3" json:"boat_image,omitempty"`
}

func (m *DivingBoat) Reset()      { *m = DivingBoat{} }
func (*DivingBoat) ProtoMessage() {}
func (*DivingBoat) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{3}
}
func (m *DivingBoat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DivingBoat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DivingBoat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DivingBoat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DivingBoat.Merge(m, src)
}
func (m *DivingBoat) XXX_Size() int {
	return m.Size()
}
func (m *DivingBoat) XXX_DiscardUnknown() {
	xxx_messageInfo_DivingBoat.DiscardUnknown(m)
}

var xxx_messageInfo_DivingBoat proto.InternalMessageInfo

func (m *DivingBoat) GetBoatModel() string {
	if m != nil {
		return m.BoatModel
	}
	return ""
}

func (m *DivingBoat) GetBoatImage() *File {
	if m != nil {
		return m.BoatImage
	}
	return nil
}

type Place struct {
	Country string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	City    string `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
}

func (m *Place) Reset()      { *m = Place{} }
func (*Place) ProtoMessage() {}
func (*Place) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{4}
}
func (m *Place) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Place) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Place.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Place) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Place.Merge(m, src)
}
func (m *Place) XXX_Size() int {
	return m.Size()
}
func (m *Place) XXX_DiscardUnknown() {
	xxx_messageInfo_Place.DiscardUnknown(m)
}

var xxx_messageInfo_Place proto.InternalMessageInfo

func (m *Place) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Place) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

type Amenity struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *Amenity) Reset()      { *m = Amenity{} }
func (*Amenity) ProtoMessage() {}
func (*Amenity) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{5}
}
func (m *Amenity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Amenity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Amenity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Amenity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Amenity.Merge(m, src)
}
func (m *Amenity) XXX_Size() int {
	return m.Size()
}
func (m *Amenity) XXX_DiscardUnknown() {
	xxx_messageInfo_Amenity.DiscardUnknown(m)
}

var xxx_messageInfo_Amenity proto.InternalMessageInfo

func (m *Amenity) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Amenity) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type RoomType struct {
	Name        string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string     `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	MaxGuest    uint32     `protobuf:"varint,3,opt,name=max_guest,json=maxGuest,proto3" json:"max_guest,omitempty"`
	Price       float32    `protobuf:"fixed32,4,opt,name=price,proto3" json:"price,omitempty"`
	RoomImages  []*File    `protobuf:"bytes,5,rep,name=room_images,json=roomImages,proto3" json:"room_images,omitempty"`
	Amenities   []*Amenity `protobuf:"bytes,6,rep,name=amenities,proto3" json:"amenities,omitempty"`
	Quantity    uint32     `protobuf:"varint,7,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (m *RoomType) Reset()      { *m = RoomType{} }
func (*RoomType) ProtoMessage() {}
func (*RoomType) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{6}
}
func (m *RoomType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoomType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomType.Merge(m, src)
}
func (m *RoomType) XXX_Size() int {
	return m.Size()
}
func (m *RoomType) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomType.DiscardUnknown(m)
}

var xxx_messageInfo_RoomType proto.InternalMessageInfo

func (m *RoomType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RoomType) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RoomType) GetMaxGuest() uint32 {
	if m != nil {
		return m.MaxGuest
	}
	return 0
}

func (m *RoomType) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *RoomType) GetRoomImages() []*File {
	if m != nil {
		return m.RoomImages
	}
	return nil
}

func (m *RoomType) GetAmenities() []*Amenity {
	if m != nil {
		return m.Amenities
	}
	return nil
}

func (m *RoomType) GetQuantity() uint32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

type TripTemplate struct {
	Name          string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	DivingBoatId  uint64   `protobuf:"varint,3,opt,name=diving_boat_id,json=divingBoatId,proto3" json:"diving_boat_id,omitempty"`
	Place         *Place   `protobuf:"bytes,4,opt,name=place,proto3" json:"place,omitempty"`
	Images        []*File  `protobuf:"bytes,5,rep,name=images,proto3" json:"images,omitempty"`
	TripType      TripType `protobuf:"varint,6,opt,name=trip_type,json=tripType,proto3,enum=model.TripType" json:"trip_type,omitempty"`
	ScheduleImage *File    `protobuf:"bytes,7,opt,name=schedule_image,json=scheduleImage,proto3" json:"schedule_image,omitempty"`
	// Types that are valid to be assigned to ResidenceId:
	//	*TripTemplate_HotelId
	//	*TripTemplate_LiveaboardId
	ResidenceId isTripTemplate_ResidenceId `protobuf_oneof:"residence_id"`
}

func (m *TripTemplate) Reset()      { *m = TripTemplate{} }
func (*TripTemplate) ProtoMessage() {}
func (*TripTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{7}
}
func (m *TripTemplate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TripTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TripTemplate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TripTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TripTemplate.Merge(m, src)
}
func (m *TripTemplate) XXX_Size() int {
	return m.Size()
}
func (m *TripTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_TripTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_TripTemplate proto.InternalMessageInfo

type isTripTemplate_ResidenceId interface {
	isTripTemplate_ResidenceId()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TripTemplate_HotelId struct {
	HotelId uint64 `protobuf:"varint,8,opt,name=hotel_id,json=hotelId,proto3,oneof" json:"hotel_id,omitempty"`
}
type TripTemplate_LiveaboardId struct {
	LiveaboardId uint64 `protobuf:"varint,9,opt,name=liveaboard_id,json=liveaboardId,proto3,oneof" json:"liveaboard_id,omitempty"`
}

func (*TripTemplate_HotelId) isTripTemplate_ResidenceId()      {}
func (*TripTemplate_LiveaboardId) isTripTemplate_ResidenceId() {}

func (m *TripTemplate) GetResidenceId() isTripTemplate_ResidenceId {
	if m != nil {
		return m.ResidenceId
	}
	return nil
}

func (m *TripTemplate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TripTemplate) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TripTemplate) GetDivingBoatId() uint64 {
	if m != nil {
		return m.DivingBoatId
	}
	return 0
}

func (m *TripTemplate) GetPlace() *Place {
	if m != nil {
		return m.Place
	}
	return nil
}

func (m *TripTemplate) GetImages() []*File {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *TripTemplate) GetTripType() TripType {
	if m != nil {
		return m.TripType
	}
	return ONSHORE
}

func (m *TripTemplate) GetScheduleImage() *File {
	if m != nil {
		return m.ScheduleImage
	}
	return nil
}

func (m *TripTemplate) GetHotelId() uint64 {
	if x, ok := m.GetResidenceId().(*TripTemplate_HotelId); ok {
		return x.HotelId
	}
	return 0
}

func (m *TripTemplate) GetLiveaboardId() uint64 {
	if x, ok := m.GetResidenceId().(*TripTemplate_LiveaboardId); ok {
		return x.LiveaboardId
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TripTemplate) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TripTemplate_HotelId)(nil),
		(*TripTemplate_LiveaboardId)(nil),
	}
}

type Trip struct {
	From          *time.Time `protobuf:"bytes,1,opt,name=from,proto3,stdtime" json:"from,omitempty"`
	To            *time.Time `protobuf:"bytes,2,opt,name=to,proto3,stdtime" json:"to,omitempty"`
	MaxCapacity   uint32     `protobuf:"varint,3,opt,name=max_capacity,json=maxCapacity,proto3" json:"max_capacity,omitempty"`
	Price         float32    `protobuf:"fixed32,4,opt,name=price,proto3" json:"price,omitempty"`
	DiveMasterIds []uint64   `protobuf:"varint,5,rep,packed,name=dive_master_ids,json=diveMasterIds,proto3" json:"dive_master_ids,omitempty"`
}

func (m *Trip) Reset()      { *m = Trip{} }
func (*Trip) ProtoMessage() {}
func (*Trip) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{8}
}
func (m *Trip) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Trip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Trip.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Trip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trip.Merge(m, src)
}
func (m *Trip) XXX_Size() int {
	return m.Size()
}
func (m *Trip) XXX_DiscardUnknown() {
	xxx_messageInfo_Trip.DiscardUnknown(m)
}

var xxx_messageInfo_Trip proto.InternalMessageInfo

func (m *Trip) GetFrom() *time.Time {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Trip) GetTo() *time.Time {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Trip) GetMaxCapacity() uint32 {
	if m != nil {
		return m.MaxCapacity
	}
	return 0
}

func (m *Trip) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Trip) GetDiveMasterIds() []uint64 {
	if m != nil {
		return m.DiveMasterIds
	}
	return nil
}

type Hotel struct {
	HotelName string `protobuf:"bytes,1,opt,name=hotel_name,json=hotelName,proto3" json:"hotel_name,omitempty"`
	Star      uint32 `protobuf:"varint,2,opt,name=star,proto3" json:"star,omitempty"`
	// optional highlights when creating a new hotel
	Highlights []string `protobuf:"bytes,3,rep,name=highlights,proto3" json:"highlights,omitempty"`
	// optional images when creating a new hotel
	Images           []*File     `protobuf:"bytes,4,rep,name=images,proto3" json:"images,omitempty"`
	RoomTypes        []*RoomType `protobuf:"bytes,5,rep,name=room_types,json=roomTypes,proto3" json:"room_types,omitempty"`
	HotelDescription string      `protobuf:"bytes,6,opt,name=hotel_description,json=hotelDescription,proto3" json:"hotel_description,omitempty"`
	Phone            string      `protobuf:"bytes,7,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (m *Hotel) Reset()      { *m = Hotel{} }
func (*Hotel) ProtoMessage() {}
func (*Hotel) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{9}
}
func (m *Hotel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hotel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hotel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hotel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hotel.Merge(m, src)
}
func (m *Hotel) XXX_Size() int {
	return m.Size()
}
func (m *Hotel) XXX_DiscardUnknown() {
	xxx_messageInfo_Hotel.DiscardUnknown(m)
}

var xxx_messageInfo_Hotel proto.InternalMessageInfo

func (m *Hotel) GetHotelName() string {
	if m != nil {
		return m.HotelName
	}
	return ""
}

func (m *Hotel) GetStar() uint32 {
	if m != nil {
		return m.Star
	}
	return 0
}

func (m *Hotel) GetHighlights() []string {
	if m != nil {
		return m.Highlights
	}
	return nil
}

func (m *Hotel) GetImages() []*File {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *Hotel) GetRoomTypes() []*RoomType {
	if m != nil {
		return m.RoomTypes
	}
	return nil
}

func (m *Hotel) GetHotelDescription() string {
	if m != nil {
		return m.HotelDescription
	}
	return ""
}

func (m *Hotel) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type Liveaboard struct {
	Model       string  `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	Description string  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Length      float32 `protobuf:"fixed32,3,opt,name=length,proto3" json:"length,omitempty"`
	Width       float32 `protobuf:"fixed32,4,opt,name=width,proto3" json:"width,omitempty"`
	// optional highlights when creating a new liveaboard
	Highlights []string `protobuf:"bytes,5,rep,name=highlights,proto3" json:"highlights,omitempty"`
	// optional images when creating a new liveaboard
	Images []string    `protobuf:"bytes,6,rep,name=images,proto3" json:"images,omitempty"`
	Rooms  []*RoomType `protobuf:"bytes,7,rep,name=rooms,proto3" json:"rooms,omitempty"`
}

func (m *Liveaboard) Reset()      { *m = Liveaboard{} }
func (*Liveaboard) ProtoMessage() {}
func (*Liveaboard) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{10}
}
func (m *Liveaboard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Liveaboard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Liveaboard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Liveaboard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Liveaboard.Merge(m, src)
}
func (m *Liveaboard) XXX_Size() int {
	return m.Size()
}
func (m *Liveaboard) XXX_DiscardUnknown() {
	xxx_messageInfo_Liveaboard.DiscardUnknown(m)
}

var xxx_messageInfo_Liveaboard proto.InternalMessageInfo

func (m *Liveaboard) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Liveaboard) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Liveaboard) GetLength() float32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *Liveaboard) GetWidth() float32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Liveaboard) GetHighlights() []string {
	if m != nil {
		return m.Highlights
	}
	return nil
}

func (m *Liveaboard) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *Liveaboard) GetRooms() []*RoomType {
	if m != nil {
		return m.Rooms
	}
	return nil
}

type AddDiveMasterRequest struct {
	DiveMaster *DiveMaster `protobuf:"bytes,1,opt,name=dive_master,json=diveMaster,proto3" json:"dive_master,omitempty"`
	AgencyId   uint64      `protobuf:"varint,2,opt,name=agency_id,json=agencyId,proto3" json:"agency_id,omitempty"`
}

func (m *AddDiveMasterRequest) Reset()      { *m = AddDiveMasterRequest{} }
func (*AddDiveMasterRequest) ProtoMessage() {}
func (*AddDiveMasterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{11}
}
func (m *AddDiveMasterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddDiveMasterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddDiveMasterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddDiveMasterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddDiveMasterRequest.Merge(m, src)
}
func (m *AddDiveMasterRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddDiveMasterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddDiveMasterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddDiveMasterRequest proto.InternalMessageInfo

func (m *AddDiveMasterRequest) GetDiveMaster() *DiveMaster {
	if m != nil {
		return m.DiveMaster
	}
	return nil
}

func (m *AddDiveMasterRequest) GetAgencyId() uint64 {
	if m != nil {
		return m.AgencyId
	}
	return 0
}

type AddStaffRequest struct {
	Staff    *Staff `protobuf:"bytes,1,opt,name=staff,proto3" json:"staff,omitempty"`
	AgencyId uint64 `protobuf:"varint,2,opt,name=agency_id,json=agencyId,proto3" json:"agency_id,omitempty"`
}

func (m *AddStaffRequest) Reset()      { *m = AddStaffRequest{} }
func (*AddStaffRequest) ProtoMessage() {}
func (*AddStaffRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{12}
}
func (m *AddStaffRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddStaffRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddStaffRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddStaffRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddStaffRequest.Merge(m, src)
}
func (m *AddStaffRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddStaffRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddStaffRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddStaffRequest proto.InternalMessageInfo

func (m *AddStaffRequest) GetStaff() *Staff {
	if m != nil {
		return m.Staff
	}
	return nil
}

func (m *AddStaffRequest) GetAgencyId() uint64 {
	if m != nil {
		return m.AgencyId
	}
	return 0
}

type AddTripTemplateRequest struct {
	TripTemplate *TripTemplate `protobuf:"bytes,1,opt,name=trip_template,json=tripTemplate,proto3" json:"trip_template,omitempty"`
	AgencyId     uint64        `protobuf:"varint,2,opt,name=agency_id,json=agencyId,proto3" json:"agency_id,omitempty"`
}

func (m *AddTripTemplateRequest) Reset()      { *m = AddTripTemplateRequest{} }
func (*AddTripTemplateRequest) ProtoMessage() {}
func (*AddTripTemplateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{13}
}
func (m *AddTripTemplateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddTripTemplateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddTripTemplateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddTripTemplateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddTripTemplateRequest.Merge(m, src)
}
func (m *AddTripTemplateRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddTripTemplateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddTripTemplateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddTripTemplateRequest proto.InternalMessageInfo

func (m *AddTripTemplateRequest) GetTripTemplate() *TripTemplate {
	if m != nil {
		return m.TripTemplate
	}
	return nil
}

func (m *AddTripTemplateRequest) GetAgencyId() uint64 {
	if m != nil {
		return m.AgencyId
	}
	return 0
}

type AddTripRequest struct {
	Trip         *Trip         `protobuf:"bytes,1,opt,name=trip,proto3" json:"trip,omitempty"`
	TripTemplate *TripTemplate `protobuf:"bytes,2,opt,name=trip_template,json=tripTemplate,proto3" json:"trip_template,omitempty"`
	AgencyId     uint64        `protobuf:"varint,3,opt,name=agency_id,json=agencyId,proto3" json:"agency_id,omitempty"`
}

func (m *AddTripRequest) Reset()      { *m = AddTripRequest{} }
func (*AddTripRequest) ProtoMessage() {}
func (*AddTripRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{14}
}
func (m *AddTripRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddTripRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddTripRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddTripRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddTripRequest.Merge(m, src)
}
func (m *AddTripRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddTripRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddTripRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddTripRequest proto.InternalMessageInfo

func (m *AddTripRequest) GetTrip() *Trip {
	if m != nil {
		return m.Trip
	}
	return nil
}

func (m *AddTripRequest) GetTripTemplate() *TripTemplate {
	if m != nil {
		return m.TripTemplate
	}
	return nil
}

func (m *AddTripRequest) GetAgencyId() uint64 {
	if m != nil {
		return m.AgencyId
	}
	return 0
}

type AddDivingBoatRequest struct {
	DivingBoat *DivingBoat `protobuf:"bytes,1,opt,name=diving_boat,json=divingBoat,proto3" json:"diving_boat,omitempty"`
	AgencyId   uint64      `protobuf:"varint,2,opt,name=agency_id,json=agencyId,proto3" json:"agency_id,omitempty"`
}

func (m *AddDivingBoatRequest) Reset()      { *m = AddDivingBoatRequest{} }
func (*AddDivingBoatRequest) ProtoMessage() {}
func (*AddDivingBoatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{15}
}
func (m *AddDivingBoatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddDivingBoatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddDivingBoatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddDivingBoatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddDivingBoatRequest.Merge(m, src)
}
func (m *AddDivingBoatRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddDivingBoatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddDivingBoatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddDivingBoatRequest proto.InternalMessageInfo

func (m *AddDivingBoatRequest) GetDivingBoat() *DivingBoat {
	if m != nil {
		return m.DivingBoat
	}
	return nil
}

func (m *AddDivingBoatRequest) GetAgencyId() uint64 {
	if m != nil {
		return m.AgencyId
	}
	return 0
}

type AddHotelRequest struct {
	Hotel     *Hotel `protobuf:"bytes,1,opt,name=hotel,proto3" json:"hotel,omitempty"`
	AgencyId  uint64 `protobuf:"varint,2,opt,name=agency_id,json=agencyId,proto3" json:"agency_id,omitempty"`
	AddressId uint64 `protobuf:"varint,3,opt,name=addressId,proto3" json:"addressId,omitempty"`
}

func (m *AddHotelRequest) Reset()      { *m = AddHotelRequest{} }
func (*AddHotelRequest) ProtoMessage() {}
func (*AddHotelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{16}
}
func (m *AddHotelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddHotelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddHotelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddHotelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddHotelRequest.Merge(m, src)
}
func (m *AddHotelRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddHotelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddHotelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddHotelRequest proto.InternalMessageInfo

func (m *AddHotelRequest) GetHotel() *Hotel {
	if m != nil {
		return m.Hotel
	}
	return nil
}

func (m *AddHotelRequest) GetAgencyId() uint64 {
	if m != nil {
		return m.AgencyId
	}
	return 0
}

func (m *AddHotelRequest) GetAddressId() uint64 {
	if m != nil {
		return m.AddressId
	}
	return 0
}

type AddLiveaboardRequest struct {
	Liveaboard *Liveaboard `protobuf:"bytes,1,opt,name=liveaboard,proto3" json:"liveaboard,omitempty"`
	AgencyId   uint64      `protobuf:"varint,2,opt,name=agency_id,json=agencyId,proto3" json:"agency_id,omitempty"`
}

func (m *AddLiveaboardRequest) Reset()      { *m = AddLiveaboardRequest{} }
func (*AddLiveaboardRequest) ProtoMessage() {}
func (*AddLiveaboardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{17}
}
func (m *AddLiveaboardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddLiveaboardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddLiveaboardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddLiveaboardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddLiveaboardRequest.Merge(m, src)
}
func (m *AddLiveaboardRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddLiveaboardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddLiveaboardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddLiveaboardRequest proto.InternalMessageInfo

func (m *AddLiveaboardRequest) GetLiveaboard() *Liveaboard {
	if m != nil {
		return m.Liveaboard
	}
	return nil
}

func (m *AddLiveaboardRequest) GetAgencyId() uint64 {
	if m != nil {
		return m.AgencyId
	}
	return 0
}

func init() {
	proto.RegisterType((*DiveMaster)(nil), "agency.DiveMaster")
	proto.RegisterType((*DiveMasterFirstAndLastName)(nil), "agency.DiveMasterFirstAndLastName")
	proto.RegisterType((*Staff)(nil), "agency.Staff")
	proto.RegisterType((*DivingBoat)(nil), "agency.DivingBoat")
	proto.RegisterType((*Place)(nil), "agency.Place")
	proto.RegisterType((*Amenity)(nil), "agency.Amenity")
	proto.RegisterType((*RoomType)(nil), "agency.RoomType")
	proto.RegisterType((*TripTemplate)(nil), "agency.TripTemplate")
	proto.RegisterType((*Trip)(nil), "agency.Trip")
	proto.RegisterType((*Hotel)(nil), "agency.Hotel")
	proto.RegisterType((*Liveaboard)(nil), "agency.Liveaboard")
	proto.RegisterType((*AddDiveMasterRequest)(nil), "agency.AddDiveMasterRequest")
	proto.RegisterType((*AddStaffRequest)(nil), "agency.AddStaffRequest")
	proto.RegisterType((*AddTripTemplateRequest)(nil), "agency.AddTripTemplateRequest")
	proto.RegisterType((*AddTripRequest)(nil), "agency.AddTripRequest")
	proto.RegisterType((*AddDivingBoatRequest)(nil), "agency.AddDivingBoatRequest")
	proto.RegisterType((*AddHotelRequest)(nil), "agency.AddHotelRequest")
	proto.RegisterType((*AddLiveaboardRequest)(nil), "agency.AddLiveaboardRequest")
}

func init() { proto.RegisterFile("agency.proto", fileDescriptor_614a4be5fd9deed0) }

var fileDescriptor_614a4be5fd9deed0 = []byte{
	// 1254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xf7, 0x3a, 0xfe, 0xf9, 0x6c, 0x27, 0xfd, 0x8e, 0xaa, 0x7c, 0x2d, 0xb7, 0x6c, 0xcd, 0x16,
	0xaa, 0x08, 0x5a, 0x07, 0xa5, 0x70, 0x28, 0x1c, 0x50, 0x42, 0x5b, 0x6a, 0xa9, 0x45, 0x68, 0x1b,
	0x09, 0xc4, 0xc5, 0x1a, 0x7b, 0x26, 0xeb, 0x15, 0xbb, 0x9e, 0xed, 0xee, 0x24, 0x34, 0x37, 0xce,
	0x9c, 0xfa, 0x67, 0xf0, 0xa7, 0x20, 0x2e, 0x54, 0x9c, 0x7a, 0x83, 0xba, 0x1c, 0x10, 0xe2, 0x50,
	0x89, 0x7f, 0x00, 0xcd, 0x9b, 0x19, 0x7b, 0x63, 0xc7, 0x09, 0x4a, 0x6f, 0xf3, 0x7e, 0xcc, 0x9b,
	0xf7, 0x3e, 0xef, 0xf3, 0xde, 0x2e, 0x34, 0x69, 0xc0, 0x27, 0xa3, 0xe3, 0x5e, 0x92, 0x0a, 0x29,
	0x48, 0x45, 0x4b, 0x9d, 0x46, 0x2c, 0x18, 0x8f, 0xb4, 0xb2, 0x73, 0x25, 0x10, 0x22, 0x88, 0xf8,
	0x36, 0x4a, 0xc3, 0xc3, 0x83, 0x6d, 0x1e, 0x27, 0xd2, 0xdc, 0xe8, 0x5c, 0x5b, 0x34, 0xca, 0x30,
	0xe6, 0x99, 0xa4, 0x71, 0x62, 0x1c, 0x6e, 0x05, 0xa1, 0x1c, 0x1f, 0x0e, 0x7b, 0x23, 0x11, 0x6f,
	0x07, 0x22, 0x10, 0x73, 0x4f, 0x25, 0xa1, 0x80, 0x27, 0xed, 0xee, 0xfd, 0xec, 0x00, 0xdc, 0x0d,
	0x8f, 0xf8, 0x23, 0x9a, 0x49, 0x9e, 0x92, 0xb7, 0x00, 0x0e, 0xc2, 0x34, 0x93, 0x83, 0x09, 0x8d,
	0x79, 0xdb, 0xe9, 0x3a, 0x5b, 0x75, 0xbf, 0x8e, 0x9a, 0x2f, 0x68, 0xcc, 0xc9, 0x15, 0xa8, 0x47,
	0xd4, 0x5a, 0x8b, 0x68, 0xad, 0x29, 0x05, 0x1a, 0x6f, 0x40, 0x39, 0xe2, 0x47, 0x3c, 0x6a, 0xaf,
	0x75, 0x9d, 0xad, 0xf5, 0x9d, 0x4b, 0x3d, 0x5d, 0xd4, 0x43, 0xa5, 0xdb, 0x3f, 0x4e, 0xb8, 0xaf,
	0xcd, 0xe4, 0x26, 0x34, 0x0e, 0x52, 0x31, 0x91, 0x83, 0x30, 0xa6, 0x01, 0x6f, 0x97, 0xba, 0xce,
	0x56, 0x63, 0xa7, 0x61, 0xbc, 0xef, 0x87, 0x11, 0xf7, 0x01, 0xed, 0x7d, 0x65, 0x26, 0xef, 0x01,
	0x0c, 0xe9, 0xe8, 0x5b, 0xe3, 0x5c, 0x5e, 0x76, 0xae, 0x2b, 0x33, 0xfa, 0x7a, 0x5f, 0x43, 0x67,
	0x5e, 0xcb, 0x7d, 0x95, 0xf5, 0xee, 0x84, 0x3d, 0xb4, 0xf9, 0xbd, 0x41, 0x6d, 0xde, 0x00, 0xca,
	0x8f, 0x25, 0x3d, 0x38, 0x78, 0x23, 0x80, 0x3a, 0x50, 0x4b, 0x44, 0x16, 0xca, 0x50, 0x4c, 0x10,
	0xa3, 0xba, 0x3f, 0x93, 0xbd, 0xaf, 0xb0, 0x0d, 0xe1, 0x24, 0xd8, 0x13, 0x54, 0xaa, 0x57, 0x86,
	0x82, 0xca, 0x01, 0x96, 0x69, 0x5f, 0x51, 0x9a, 0x47, 0x4a, 0x81, 0x98, 0x28, 0xb3, 0xc6, 0xa4,
	0x78, 0x1a, 0x26, 0x82, 0x6a, 0xfc, 0xbc, 0x8f, 0xa0, 0xfc, 0x65, 0x44, 0x47, 0x9c, 0xb4, 0xa1,
	0x3a, 0x12, 0x87, 0x13, 0x99, 0x1e, 0x9b, 0x80, 0x56, 0x24, 0x04, 0x4a, 0xa3, 0x50, 0x1e, 0x9b,
	0x7c, 0xf1, 0xec, 0x7d, 0x0a, 0xd5, 0xdd, 0x98, 0x4f, 0x42, 0x89, 0xe6, 0x5c, 0xb1, 0x78, 0x26,
	0x5d, 0x68, 0x30, 0x9e, 0x8d, 0xd2, 0x30, 0xc1, 0x6a, 0xf4, 0xcd, 0xbc, 0xca, 0xfb, 0xdb, 0x81,
	0x9a, 0x2f, 0x44, 0xac, 0x3a, 0x7f, 0xb1, 0x10, 0x0a, 0xcc, 0x98, 0x3e, 0x1d, 0x04, 0x87, 0x3c,
	0x93, 0x08, 0x58, 0xcb, 0xaf, 0xc5, 0xf4, 0xe9, 0xe7, 0x4a, 0x26, 0x97, 0xa1, 0x9c, 0xa4, 0xe1,
	0x48, 0xf3, 0xa7, 0xe8, 0x6b, 0x41, 0x71, 0x2b, 0x15, 0x22, 0xd6, 0xc8, 0x64, 0xed, 0x72, 0x77,
	0x6d, 0x89, 0x5b, 0xca, 0x8e, 0xd0, 0x64, 0xe4, 0x16, 0xd4, 0x29, 0x16, 0x19, 0xf2, 0xac, 0x5d,
	0x41, 0xdf, 0x8d, 0x9e, 0x19, 0x50, 0x53, 0xbd, 0x3f, 0xf7, 0x50, 0xfd, 0x7b, 0x72, 0x48, 0x27,
	0x52, 0x61, 0x55, 0xd5, 0xe9, 0x58, 0xd9, 0xfb, 0xab, 0x08, 0xcd, 0xfd, 0x34, 0x4c, 0xf6, 0x79,
	0x9c, 0x44, 0x54, 0x5e, 0xb4, 0xe4, 0x77, 0x60, 0x9d, 0x21, 0x0d, 0x06, 0xba, 0xc1, 0x0c, 0xeb,
	0x2e, 0xf9, 0x4d, 0x36, 0x23, 0x47, 0x9f, 0x91, 0xeb, 0x50, 0x4e, 0x54, 0x4f, 0xcd, 0xec, 0xb4,
	0x6c, 0xce, 0xd8, 0x68, 0x5f, 0xdb, 0xc8, 0x75, 0xa8, 0xac, 0x46, 0xc1, 0x98, 0xc8, 0x4d, 0xa8,
	0xcb, 0x34, 0x4c, 0x06, 0xf2, 0x38, 0xe1, 0xed, 0x0a, 0xce, 0xed, 0x86, 0xf1, 0xc3, 0x6a, 0xd4,
	0xd8, 0xd6, 0xa4, 0x39, 0x91, 0x1d, 0x58, 0xcf, 0x46, 0x63, 0xce, 0x0e, 0x23, 0x6e, 0xb8, 0x57,
	0x5d, 0xe6, 0x5e, 0xcb, 0xba, 0xe8, 0xf9, 0xbd, 0x02, 0xb5, 0xb1, 0x90, 0x3c, 0x52, 0xb5, 0xd4,
	0x54, 0x2d, 0x0f, 0x0a, 0x7e, 0x15, 0x35, 0x7d, 0x46, 0xde, 0x85, 0x56, 0x14, 0x1e, 0x71, 0x3a,
	0x14, 0x34, 0x65, 0xca, 0xa3, 0x6e, 0x3c, 0x9a, 0x73, 0x75, 0x9f, 0xed, 0xad, 0x43, 0x33, 0xe5,
	0x59, 0xc8, 0xf8, 0x64, 0xc4, 0x07, 0x21, 0xf3, 0x7e, 0x71, 0xa0, 0xa4, 0xd2, 0x23, 0x1f, 0x42,
	0xe9, 0x20, 0x15, 0x31, 0x82, 0xdc, 0xd8, 0xe9, 0xf4, 0xf4, 0x72, 0xec, 0xd9, 0x95, 0xd7, 0xdb,
	0xb7, 0xcb, 0x71, 0xaf, 0xf4, 0xec, 0xb7, 0x6b, 0x8e, 0x8f, 0xde, 0xe4, 0x03, 0x28, 0x4a, 0x61,
	0xc6, 0xe6, 0xfc, 0x3b, 0x45, 0x29, 0xc8, 0xdb, 0xd0, 0x54, 0x4c, 0x1c, 0xd1, 0x84, 0xe2, 0xa4,
	0x68, 0x32, 0x36, 0x62, 0xfa, 0xf4, 0x33, 0xa3, 0x5a, 0xc1, 0xc7, 0x1b, 0xb0, 0xc1, 0xc2, 0x23,
	0x3e, 0x88, 0x71, 0x25, 0x0d, 0x42, 0xa6, 0xbb, 0x51, 0xf2, 0x5b, 0x6c, 0xb6, 0xa8, 0xfa, 0x2c,
	0xf3, 0xfe, 0x71, 0xa0, 0xfc, 0x40, 0x81, 0xa2, 0x46, 0x5f, 0xe3, 0x95, 0x5f, 0x30, 0xa8, 0xc1,
	0x1d, 0x42, 0xa0, 0x94, 0x49, 0x9a, 0x62, 0xf6, 0x2d, 0x1f, 0xcf, 0xc4, 0x05, 0x18, 0x87, 0xc1,
	0x38, 0x0a, 0x83, 0xb1, 0xcc, 0xda, 0x6b, 0xdd, 0xb5, 0xad, 0xba, 0x9f, 0xd3, 0xe4, 0x98, 0x50,
	0x5a, 0xcd, 0x84, 0x6d, 0xc0, 0xc9, 0x40, 0x26, 0x58, 0xca, 0x5c, 0xb2, 0xc4, 0xb2, 0x83, 0xec,
	0xd7, 0x53, 0x73, 0xca, 0xc8, 0xfb, 0xf0, 0x3f, 0x9d, 0x68, 0x9e, 0xd2, 0x15, 0xcc, 0xf7, 0x12,
	0x1a, 0xee, 0xe6, 0x78, 0xad, 0xd0, 0x19, 0x8b, 0x89, 0x26, 0x4c, 0xdd, 0xd7, 0x82, 0xf7, 0xab,
	0x03, 0xf0, 0x70, 0xd6, 0x68, 0xe5, 0x94, 0x5f, 0x78, 0x5a, 0xf8, 0x0f, 0x43, 0xb3, 0x09, 0x95,
	0x88, 0x4f, 0x02, 0x39, 0xc6, 0xbe, 0x14, 0x7d, 0x23, 0xa9, 0x78, 0xdf, 0x85, 0x4c, 0x8e, 0x6d,
	0x4b, 0x50, 0x58, 0x40, 0xab, 0xbc, 0x84, 0xd6, 0xe6, 0x0c, 0xad, 0x0a, 0xda, 0x2c, 0x40, 0x37,
	0xa0, 0xac, 0x8a, 0xcf, 0xda, 0xd5, 0x15, 0xd8, 0x68, 0xb3, 0x37, 0x86, 0xcb, 0xbb, 0x8c, 0xcd,
	0xbf, 0x43, 0x3e, 0x7f, 0x82, 0x0b, 0xeb, 0x36, 0x34, 0x72, 0x54, 0x30, 0x94, 0x25, 0x36, 0x4a,
	0xce, 0x1f, 0xe6, 0xd4, 0x50, 0x2b, 0x50, 0x3b, 0xa8, 0xe1, 0x28, 0xe2, 0x2a, 0xa8, 0x69, 0x45,
	0x9f, 0x79, 0x8f, 0x61, 0x63, 0x97, 0x31, 0xfc, 0x2e, 0xd9, 0x47, 0xae, 0x43, 0x39, 0x53, 0xb2,
	0x09, 0x3f, 0xdb, 0x0c, 0xda, 0x49, 0xdb, 0xce, 0x0e, 0x9a, 0xc0, 0xe6, 0x2e, 0x63, 0xf9, 0x55,
	0x66, 0x63, 0xdf, 0x81, 0x96, 0xde, 0x15, 0x46, 0x6f, 0xde, 0xb8, 0x6c, 0xdf, 0x38, 0x71, 0xa7,
	0x29, 0xf3, 0xcb, 0xf0, 0xcc, 0x17, 0x7f, 0x70, 0x60, 0xdd, 0x3c, 0x69, 0x9f, 0xea, 0x42, 0x49,
	0xdd, 0x37, 0x2f, 0x34, 0xf3, 0x2f, 0xf8, 0x68, 0x59, 0x4e, 0xa6, 0x78, 0xb1, 0x64, 0xd6, 0x16,
	0x92, 0x99, 0x75, 0xcf, 0x6c, 0xdb, 0x93, 0xdd, 0xb3, 0x8b, 0xf9, 0x94, 0xee, 0x59, 0x7f, 0x98,
	0x6f, 0xea, 0xb3, 0xcb, 0x7e, 0x82, 0xdd, 0xc3, 0xa1, 0xcf, 0x75, 0x0f, 0x27, 0x67, 0xb1, 0x7b,
	0xda, 0x49, 0xdb, 0xce, 0x0c, 0x4a, 0xae, 0x42, 0x9d, 0x32, 0x96, 0xf2, 0x2c, 0xeb, 0xdb, 0xda,
	0xe6, 0x0a, 0x2f, 0xc0, 0xe2, 0xe6, 0x13, 0x67, 0xdf, 0xdd, 0x01, 0x98, 0xef, 0xdb, 0xc5, 0xda,
	0x72, 0xee, 0x39, 0xaf, 0x33, 0xd3, 0xd8, 0xf9, 0x63, 0x0d, 0x5a, 0xbb, 0x28, 0x3c, 0xe6, 0xe9,
	0x91, 0x5a, 0x84, 0xf7, 0xa0, 0x75, 0x62, 0x2a, 0xc8, 0xd5, 0xd9, 0x87, 0xf6, 0x94, 0x61, 0xe9,
	0x6c, 0x2e, 0xad, 0xe5, 0x7b, 0xea, 0x27, 0x98, 0x7c, 0x02, 0x35, 0x4b, 0x79, 0xf2, 0xff, 0x5c,
	0x84, 0xfc, 0x10, 0xac, 0xbc, 0xdc, 0x47, 0xc4, 0x4f, 0x7c, 0xa5, 0xdd, 0x5c, 0x8c, 0x53, 0x38,
	0xbf, 0x32, 0xd4, 0x1d, 0xa8, 0x9a, 0x1b, 0x64, 0x73, 0x21, 0xc4, 0x79, 0x57, 0x67, 0x48, 0x58,
	0x96, 0x2c, 0x20, 0x71, 0x92, 0x78, 0xe7, 0x20, 0xa1, 0xbf, 0x19, 0x79, 0x24, 0xf2, 0x84, 0x3a,
	0x27, 0x87, 0xdc, 0xea, 0xcd, 0xe7, 0xb0, 0xc4, 0x8f, 0x55, 0x61, 0xf6, 0x3e, 0x7e, 0xfe, 0xd2,
	0x2d, 0xbc, 0x78, 0xe9, 0x16, 0x5e, 0xbf, 0x74, 0x9d, 0xef, 0xa7, 0xae, 0xf3, 0xe3, 0xd4, 0x75,
	0x7e, 0x9a, 0xba, 0xce, 0xf3, 0xa9, 0xeb, 0xfc, 0x3e, 0x75, 0x9d, 0x3f, 0xa7, 0x6e, 0xe1, 0xf5,
	0xd4, 0x75, 0x9e, 0xbd, 0x72, 0x0b, 0xcf, 0x5f, 0xb9, 0x85, 0x17, 0xaf, 0xdc, 0xc2, 0x37, 0xa5,
	0xde, 0x76, 0x32, 0x1c, 0x56, 0x30, 0xd6, 0xed, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x49, 0xc8,
	0x10, 0xe3, 0x11, 0x0d, 0x00, 0x00,
}

func (this *DiveMaster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DiveMaster)
	if !ok {
		that2, ok := that.(DiveMaster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if !this.FrontImage.Equal(that1.FrontImage) {
		return false
	}
	if !this.BackImage.Equal(that1.BackImage) {
		return false
	}
	return true
}
func (this *DiveMasterFirstAndLastName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DiveMasterFirstAndLastName)
	if !ok {
		that2, ok := that.(DiveMasterFirstAndLastName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	return true
}
func (this *Staff) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Staff)
	if !ok {
		that2, ok := that.(Staff)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.LastName != that1.LastName {
		return false
	}
	if this.Position != that1.Position {
		return false
	}
	return true
}
func (this *DivingBoat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DivingBoat)
	if !ok {
		that2, ok := that.(DivingBoat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BoatModel != that1.BoatModel {
		return false
	}
	if !this.BoatImage.Equal(that1.BoatImage) {
		return false
	}
	return true
}
func (this *Place) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Place)
	if !ok {
		that2, ok := that.(Place)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.City != that1.City {
		return false
	}
	return true
}
func (this *Amenity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Amenity)
	if !ok {
		that2, ok := that.(Amenity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	return true
}
func (this *RoomType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RoomType)
	if !ok {
		that2, ok := that.(RoomType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.MaxGuest != that1.MaxGuest {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if len(this.RoomImages) != len(that1.RoomImages) {
		return false
	}
	for i := range this.RoomImages {
		if !this.RoomImages[i].Equal(that1.RoomImages[i]) {
			return false
		}
	}
	if len(this.Amenities) != len(that1.Amenities) {
		return false
	}
	for i := range this.Amenities {
		if !this.Amenities[i].Equal(that1.Amenities[i]) {
			return false
		}
	}
	if this.Quantity != that1.Quantity {
		return false
	}
	return true
}
func (this *TripTemplate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TripTemplate)
	if !ok {
		that2, ok := that.(TripTemplate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.DivingBoatId != that1.DivingBoatId {
		return false
	}
	if !this.Place.Equal(that1.Place) {
		return false
	}
	if len(this.Images) != len(that1.Images) {
		return false
	}
	for i := range this.Images {
		if !this.Images[i].Equal(that1.Images[i]) {
			return false
		}
	}
	if this.TripType != that1.TripType {
		return false
	}
	if !this.ScheduleImage.Equal(that1.ScheduleImage) {
		return false
	}
	if that1.ResidenceId == nil {
		if this.ResidenceId != nil {
			return false
		}
	} else if this.ResidenceId == nil {
		return false
	} else if !this.ResidenceId.Equal(that1.ResidenceId) {
		return false
	}
	return true
}
func (this *TripTemplate_HotelId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TripTemplate_HotelId)
	if !ok {
		that2, ok := that.(TripTemplate_HotelId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HotelId != that1.HotelId {
		return false
	}
	return true
}
func (this *TripTemplate_LiveaboardId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TripTemplate_LiveaboardId)
	if !ok {
		that2, ok := that.(TripTemplate_LiveaboardId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LiveaboardId != that1.LiveaboardId {
		return false
	}
	return true
}
func (this *Trip) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Trip)
	if !ok {
		that2, ok := that.(Trip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.From == nil {
		if this.From != nil {
			return false
		}
	} else if !this.From.Equal(*that1.From) {
		return false
	}
	if that1.To == nil {
		if this.To != nil {
			return false
		}
	} else if !this.To.Equal(*that1.To) {
		return false
	}
	if this.MaxCapacity != that1.MaxCapacity {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if len(this.DiveMasterIds) != len(that1.DiveMasterIds) {
		return false
	}
	for i := range this.DiveMasterIds {
		if this.DiveMasterIds[i] != that1.DiveMasterIds[i] {
			return false
		}
	}
	return true
}
func (this *Hotel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Hotel)
	if !ok {
		that2, ok := that.(Hotel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HotelName != that1.HotelName {
		return false
	}
	if this.Star != that1.Star {
		return false
	}
	if len(this.Highlights) != len(that1.Highlights) {
		return false
	}
	for i := range this.Highlights {
		if this.Highlights[i] != that1.Highlights[i] {
			return false
		}
	}
	if len(this.Images) != len(that1.Images) {
		return false
	}
	for i := range this.Images {
		if !this.Images[i].Equal(that1.Images[i]) {
			return false
		}
	}
	if len(this.RoomTypes) != len(that1.RoomTypes) {
		return false
	}
	for i := range this.RoomTypes {
		if !this.RoomTypes[i].Equal(that1.RoomTypes[i]) {
			return false
		}
	}
	if this.HotelDescription != that1.HotelDescription {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	return true
}
func (this *Liveaboard) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Liveaboard)
	if !ok {
		that2, ok := that.(Liveaboard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Model != that1.Model {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Length != that1.Length {
		return false
	}
	if this.Width != that1.Width {
		return false
	}
	if len(this.Highlights) != len(that1.Highlights) {
		return false
	}
	for i := range this.Highlights {
		if this.Highlights[i] != that1.Highlights[i] {
			return false
		}
	}
	if len(this.Images) != len(that1.Images) {
		return false
	}
	for i := range this.Images {
		if this.Images[i] != that1.Images[i] {
			return false
		}
	}
	if len(this.Rooms) != len(that1.Rooms) {
		return false
	}
	for i := range this.Rooms {
		if !this.Rooms[i].Equal(that1.Rooms[i]) {
			return false
		}
	}
	return true
}
func (this *AddDiveMasterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddDiveMasterRequest)
	if !ok {
		that2, ok := that.(AddDiveMasterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DiveMaster.Equal(that1.DiveMaster) {
		return false
	}
	if this.AgencyId != that1.AgencyId {
		return false
	}
	return true
}
func (this *AddStaffRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddStaffRequest)
	if !ok {
		that2, ok := that.(AddStaffRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Staff.Equal(that1.Staff) {
		return false
	}
	if this.AgencyId != that1.AgencyId {
		return false
	}
	return true
}
func (this *AddTripTemplateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddTripTemplateRequest)
	if !ok {
		that2, ok := that.(AddTripTemplateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TripTemplate.Equal(that1.TripTemplate) {
		return false
	}
	if this.AgencyId != that1.AgencyId {
		return false
	}
	return true
}
func (this *AddTripRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddTripRequest)
	if !ok {
		that2, ok := that.(AddTripRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Trip.Equal(that1.Trip) {
		return false
	}
	if !this.TripTemplate.Equal(that1.TripTemplate) {
		return false
	}
	if this.AgencyId != that1.AgencyId {
		return false
	}
	return true
}
func (this *AddDivingBoatRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddDivingBoatRequest)
	if !ok {
		that2, ok := that.(AddDivingBoatRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DivingBoat.Equal(that1.DivingBoat) {
		return false
	}
	if this.AgencyId != that1.AgencyId {
		return false
	}
	return true
}
func (this *AddHotelRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddHotelRequest)
	if !ok {
		that2, ok := that.(AddHotelRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Hotel.Equal(that1.Hotel) {
		return false
	}
	if this.AgencyId != that1.AgencyId {
		return false
	}
	if this.AddressId != that1.AddressId {
		return false
	}
	return true
}
func (this *AddLiveaboardRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddLiveaboardRequest)
	if !ok {
		that2, ok := that.(AddLiveaboardRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Liveaboard.Equal(that1.Liveaboard) {
		return false
	}
	if this.AgencyId != that1.AgencyId {
		return false
	}
	return true
}
func (this *DiveMaster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.DiveMaster{")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	if this.FrontImage != nil {
		s = append(s, "FrontImage: "+fmt.Sprintf("%#v", this.FrontImage)+",\n")
	}
	if this.BackImage != nil {
		s = append(s, "BackImage: "+fmt.Sprintf("%#v", this.BackImage)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DiveMasterFirstAndLastName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.DiveMasterFirstAndLastName{")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Staff) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.Staff{")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "LastName: "+fmt.Sprintf("%#v", this.LastName)+",\n")
	s = append(s, "Position: "+fmt.Sprintf("%#v", this.Position)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DivingBoat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.DivingBoat{")
	s = append(s, "BoatModel: "+fmt.Sprintf("%#v", this.BoatModel)+",\n")
	if this.BoatImage != nil {
		s = append(s, "BoatImage: "+fmt.Sprintf("%#v", this.BoatImage)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Place) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.Place{")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "City: "+fmt.Sprintf("%#v", this.City)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Amenity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.Amenity{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RoomType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.RoomType{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "MaxGuest: "+fmt.Sprintf("%#v", this.MaxGuest)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	if this.RoomImages != nil {
		s = append(s, "RoomImages: "+fmt.Sprintf("%#v", this.RoomImages)+",\n")
	}
	if this.Amenities != nil {
		s = append(s, "Amenities: "+fmt.Sprintf("%#v", this.Amenities)+",\n")
	}
	s = append(s, "Quantity: "+fmt.Sprintf("%#v", this.Quantity)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TripTemplate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&pb.TripTemplate{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "DivingBoatId: "+fmt.Sprintf("%#v", this.DivingBoatId)+",\n")
	if this.Place != nil {
		s = append(s, "Place: "+fmt.Sprintf("%#v", this.Place)+",\n")
	}
	if this.Images != nil {
		s = append(s, "Images: "+fmt.Sprintf("%#v", this.Images)+",\n")
	}
	s = append(s, "TripType: "+fmt.Sprintf("%#v", this.TripType)+",\n")
	if this.ScheduleImage != nil {
		s = append(s, "ScheduleImage: "+fmt.Sprintf("%#v", this.ScheduleImage)+",\n")
	}
	if this.ResidenceId != nil {
		s = append(s, "ResidenceId: "+fmt.Sprintf("%#v", this.ResidenceId)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TripTemplate_HotelId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.TripTemplate_HotelId{` +
		`HotelId:` + fmt.Sprintf("%#v", this.HotelId) + `}`}, ", ")
	return s
}
func (this *TripTemplate_LiveaboardId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.TripTemplate_LiveaboardId{` +
		`LiveaboardId:` + fmt.Sprintf("%#v", this.LiveaboardId) + `}`}, ", ")
	return s
}
func (this *Trip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.Trip{")
	s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	s = append(s, "To: "+fmt.Sprintf("%#v", this.To)+",\n")
	s = append(s, "MaxCapacity: "+fmt.Sprintf("%#v", this.MaxCapacity)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	s = append(s, "DiveMasterIds: "+fmt.Sprintf("%#v", this.DiveMasterIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Hotel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.Hotel{")
	s = append(s, "HotelName: "+fmt.Sprintf("%#v", this.HotelName)+",\n")
	s = append(s, "Star: "+fmt.Sprintf("%#v", this.Star)+",\n")
	s = append(s, "Highlights: "+fmt.Sprintf("%#v", this.Highlights)+",\n")
	if this.Images != nil {
		s = append(s, "Images: "+fmt.Sprintf("%#v", this.Images)+",\n")
	}
	if this.RoomTypes != nil {
		s = append(s, "RoomTypes: "+fmt.Sprintf("%#v", this.RoomTypes)+",\n")
	}
	s = append(s, "HotelDescription: "+fmt.Sprintf("%#v", this.HotelDescription)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Liveaboard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.Liveaboard{")
	s = append(s, "Model: "+fmt.Sprintf("%#v", this.Model)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Length: "+fmt.Sprintf("%#v", this.Length)+",\n")
	s = append(s, "Width: "+fmt.Sprintf("%#v", this.Width)+",\n")
	s = append(s, "Highlights: "+fmt.Sprintf("%#v", this.Highlights)+",\n")
	s = append(s, "Images: "+fmt.Sprintf("%#v", this.Images)+",\n")
	if this.Rooms != nil {
		s = append(s, "Rooms: "+fmt.Sprintf("%#v", this.Rooms)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddDiveMasterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.AddDiveMasterRequest{")
	if this.DiveMaster != nil {
		s = append(s, "DiveMaster: "+fmt.Sprintf("%#v", this.DiveMaster)+",\n")
	}
	s = append(s, "AgencyId: "+fmt.Sprintf("%#v", this.AgencyId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddStaffRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.AddStaffRequest{")
	if this.Staff != nil {
		s = append(s, "Staff: "+fmt.Sprintf("%#v", this.Staff)+",\n")
	}
	s = append(s, "AgencyId: "+fmt.Sprintf("%#v", this.AgencyId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddTripTemplateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.AddTripTemplateRequest{")
	if this.TripTemplate != nil {
		s = append(s, "TripTemplate: "+fmt.Sprintf("%#v", this.TripTemplate)+",\n")
	}
	s = append(s, "AgencyId: "+fmt.Sprintf("%#v", this.AgencyId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddTripRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.AddTripRequest{")
	if this.Trip != nil {
		s = append(s, "Trip: "+fmt.Sprintf("%#v", this.Trip)+",\n")
	}
	if this.TripTemplate != nil {
		s = append(s, "TripTemplate: "+fmt.Sprintf("%#v", this.TripTemplate)+",\n")
	}
	s = append(s, "AgencyId: "+fmt.Sprintf("%#v", this.AgencyId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddDivingBoatRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.AddDivingBoatRequest{")
	if this.DivingBoat != nil {
		s = append(s, "DivingBoat: "+fmt.Sprintf("%#v", this.DivingBoat)+",\n")
	}
	s = append(s, "AgencyId: "+fmt.Sprintf("%#v", this.AgencyId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddHotelRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.AddHotelRequest{")
	if this.Hotel != nil {
		s = append(s, "Hotel: "+fmt.Sprintf("%#v", this.Hotel)+",\n")
	}
	s = append(s, "AgencyId: "+fmt.Sprintf("%#v", this.AgencyId)+",\n")
	s = append(s, "AddressId: "+fmt.Sprintf("%#v", this.AddressId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddLiveaboardRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.AddLiveaboardRequest{")
	if this.Liveaboard != nil {
		s = append(s, "Liveaboard: "+fmt.Sprintf("%#v", this.Liveaboard)+",\n")
	}
	s = append(s, "AgencyId: "+fmt.Sprintf("%#v", this.AgencyId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAgency(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AgencyServiceClient is the client API for AgencyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgencyServiceClient interface {
	AddDiveMaster(ctx context.Context, in *AddDiveMasterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddStaff(ctx context.Context, in *AddStaffRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddTripTemplate(ctx context.Context, in *AddTripTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddTrip(ctx context.Context, in *AddTripRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddDivingBoat(ctx context.Context, in *AddDivingBoatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddHotel(ctx context.Context, in *AddHotelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddLiveaboard(ctx context.Context, in *AddLiveaboardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type agencyServiceClient struct {
	cc *grpc.ClientConn
}

func NewAgencyServiceClient(cc *grpc.ClientConn) AgencyServiceClient {
	return &agencyServiceClient{cc}
}

func (c *agencyServiceClient) AddDiveMaster(ctx context.Context, in *AddDiveMasterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/AddDiveMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyServiceClient) AddStaff(ctx context.Context, in *AddStaffRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/AddStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyServiceClient) AddTripTemplate(ctx context.Context, in *AddTripTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/AddTripTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyServiceClient) AddTrip(ctx context.Context, in *AddTripRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/AddTrip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyServiceClient) AddDivingBoat(ctx context.Context, in *AddDivingBoatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/AddDivingBoat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyServiceClient) AddHotel(ctx context.Context, in *AddHotelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/AddHotel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyServiceClient) AddLiveaboard(ctx context.Context, in *AddLiveaboardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/AddLiveaboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgencyServiceServer is the server API for AgencyService service.
type AgencyServiceServer interface {
	AddDiveMaster(context.Context, *AddDiveMasterRequest) (*emptypb.Empty, error)
	AddStaff(context.Context, *AddStaffRequest) (*emptypb.Empty, error)
	AddTripTemplate(context.Context, *AddTripTemplateRequest) (*emptypb.Empty, error)
	AddTrip(context.Context, *AddTripRequest) (*emptypb.Empty, error)
	AddDivingBoat(context.Context, *AddDivingBoatRequest) (*emptypb.Empty, error)
	AddHotel(context.Context, *AddHotelRequest) (*emptypb.Empty, error)
	AddLiveaboard(context.Context, *AddLiveaboardRequest) (*emptypb.Empty, error)
}

// UnimplementedAgencyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAgencyServiceServer struct {
}

func (*UnimplementedAgencyServiceServer) AddDiveMaster(ctx context.Context, req *AddDiveMasterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDiveMaster not implemented")
}
func (*UnimplementedAgencyServiceServer) AddStaff(ctx context.Context, req *AddStaffRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStaff not implemented")
}
func (*UnimplementedAgencyServiceServer) AddTripTemplate(ctx context.Context, req *AddTripTemplateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTripTemplate not implemented")
}
func (*UnimplementedAgencyServiceServer) AddTrip(ctx context.Context, req *AddTripRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTrip not implemented")
}
func (*UnimplementedAgencyServiceServer) AddDivingBoat(ctx context.Context, req *AddDivingBoatRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDivingBoat not implemented")
}
func (*UnimplementedAgencyServiceServer) AddHotel(ctx context.Context, req *AddHotelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHotel not implemented")
}
func (*UnimplementedAgencyServiceServer) AddLiveaboard(ctx context.Context, req *AddLiveaboardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLiveaboard not implemented")
}

func RegisterAgencyServiceServer(s *grpc.Server, srv AgencyServiceServer) {
	s.RegisterService(&_AgencyService_serviceDesc, srv)
}

func _AgencyService_AddDiveMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDiveMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).AddDiveMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/AddDiveMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).AddDiveMaster(ctx, req.(*AddDiveMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgencyService_AddStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).AddStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/AddStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).AddStaff(ctx, req.(*AddStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgencyService_AddTripTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTripTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).AddTripTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/AddTripTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).AddTripTemplate(ctx, req.(*AddTripTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgencyService_AddTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).AddTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/AddTrip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).AddTrip(ctx, req.(*AddTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgencyService_AddDivingBoat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDivingBoatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).AddDivingBoat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/AddDivingBoat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).AddDivingBoat(ctx, req.(*AddDivingBoatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgencyService_AddHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).AddHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/AddHotel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).AddHotel(ctx, req.(*AddHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgencyService_AddLiveaboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLiveaboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).AddLiveaboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/AddLiveaboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).AddLiveaboard(ctx, req.(*AddLiveaboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AgencyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agency.AgencyService",
	HandlerType: (*AgencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDiveMaster",
			Handler:    _AgencyService_AddDiveMaster_Handler,
		},
		{
			MethodName: "AddStaff",
			Handler:    _AgencyService_AddStaff_Handler,
		},
		{
			MethodName: "AddTripTemplate",
			Handler:    _AgencyService_AddTripTemplate_Handler,
		},
		{
			MethodName: "AddTrip",
			Handler:    _AgencyService_AddTrip_Handler,
		},
		{
			MethodName: "AddDivingBoat",
			Handler:    _AgencyService_AddDivingBoat_Handler,
		},
		{
			MethodName: "AddHotel",
			Handler:    _AgencyService_AddHotel_Handler,
		},
		{
			MethodName: "AddLiveaboard",
			Handler:    _AgencyService_AddLiveaboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agency.proto",
}

func (m *DiveMaster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiveMaster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiveMaster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BackImage != nil {
		{
			size, err := m.BackImage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.FrontImage != nil {
		{
			size, err := m.FrontImage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Level != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x18
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DiveMasterFirstAndLastName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiveMasterFirstAndLastName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiveMasterFirstAndLastName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Staff) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Staff) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Staff) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Position) > 0 {
		i -= len(m.Position)
		copy(dAtA[i:], m.Position)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Position)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DivingBoat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DivingBoat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DivingBoat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BoatImage != nil {
		{
			size, err := m.BoatImage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BoatModel) > 0 {
		i -= len(m.BoatModel)
		copy(dAtA[i:], m.BoatModel)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.BoatModel)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Place) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Place) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Place) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Amenity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Amenity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Amenity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoomType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoomType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Quantity != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Quantity))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Amenities) > 0 {
		for iNdEx := len(m.Amenities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amenities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgency(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.RoomImages) > 0 {
		for iNdEx := len(m.RoomImages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RoomImages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgency(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Price != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Price))))
		i--
		dAtA[i] = 0x25
	}
	if m.MaxGuest != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.MaxGuest))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TripTemplate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TripTemplate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TripTemplate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResidenceId != nil {
		{
			size := m.ResidenceId.Size()
			i -= size
			if _, err := m.ResidenceId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.ScheduleImage != nil {
		{
			size, err := m.ScheduleImage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.TripType != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.TripType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Images[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgency(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Place != nil {
		{
			size, err := m.Place.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DivingBoatId != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.DivingBoatId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TripTemplate_HotelId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TripTemplate_HotelId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintAgency(dAtA, i, uint64(m.HotelId))
	i--
	dAtA[i] = 0x40
	return len(dAtA) - i, nil
}
func (m *TripTemplate_LiveaboardId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TripTemplate_LiveaboardId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintAgency(dAtA, i, uint64(m.LiveaboardId))
	i--
	dAtA[i] = 0x48
	return len(dAtA) - i, nil
}
func (m *Trip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Trip) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Trip) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DiveMasterIds) > 0 {
		dAtA7 := make([]byte, len(m.DiveMasterIds)*10)
		var j6 int
		for _, num := range m.DiveMasterIds {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintAgency(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x2a
	}
	if m.Price != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Price))))
		i--
		dAtA[i] = 0x25
	}
	if m.MaxCapacity != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.MaxCapacity))
		i--
		dAtA[i] = 0x18
	}
	if m.To != nil {
		n8, err8 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.To, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.To):])
		if err8 != nil {
			return 0, err8
		}
		i -= n8
		i = encodeVarintAgency(dAtA, i, uint64(n8))
		i--
		dAtA[i] = 0x12
	}
	if m.From != nil {
		n9, err9 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.From, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.From):])
		if err9 != nil {
			return 0, err9
		}
		i -= n9
		i = encodeVarintAgency(dAtA, i, uint64(n9))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Hotel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hotel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Hotel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.HotelDescription) > 0 {
		i -= len(m.HotelDescription)
		copy(dAtA[i:], m.HotelDescription)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.HotelDescription)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RoomTypes) > 0 {
		for iNdEx := len(m.RoomTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RoomTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgency(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Images[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgency(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Highlights) > 0 {
		for iNdEx := len(m.Highlights) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Highlights[iNdEx])
			copy(dAtA[i:], m.Highlights[iNdEx])
			i = encodeVarintAgency(dAtA, i, uint64(len(m.Highlights[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Star != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Star))
		i--
		dAtA[i] = 0x10
	}
	if len(m.HotelName) > 0 {
		i -= len(m.HotelName)
		copy(dAtA[i:], m.HotelName)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.HotelName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Liveaboard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Liveaboard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Liveaboard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rooms) > 0 {
		for iNdEx := len(m.Rooms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rooms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgency(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Images[iNdEx])
			copy(dAtA[i:], m.Images[iNdEx])
			i = encodeVarintAgency(dAtA, i, uint64(len(m.Images[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Highlights) > 0 {
		for iNdEx := len(m.Highlights) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Highlights[iNdEx])
			copy(dAtA[i:], m.Highlights[iNdEx])
			i = encodeVarintAgency(dAtA, i, uint64(len(m.Highlights[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Width != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Width))))
		i--
		dAtA[i] = 0x25
	}
	if m.Length != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Length))))
		i--
		dAtA[i] = 0x1d
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Model) > 0 {
		i -= len(m.Model)
		copy(dAtA[i:], m.Model)
		i = encodeVarintAgency(dAtA, i, uint64(len(m.Model)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddDiveMasterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddDiveMasterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddDiveMasterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AgencyId != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.AgencyId))
		i--
		dAtA[i] = 0x10
	}
	if m.DiveMaster != nil {
		{
			size, err := m.DiveMaster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddStaffRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddStaffRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddStaffRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AgencyId != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.AgencyId))
		i--
		dAtA[i] = 0x10
	}
	if m.Staff != nil {
		{
			size, err := m.Staff.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddTripTemplateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddTripTemplateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddTripTemplateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AgencyId != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.AgencyId))
		i--
		dAtA[i] = 0x10
	}
	if m.TripTemplate != nil {
		{
			size, err := m.TripTemplate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddTripRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddTripRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddTripRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AgencyId != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.AgencyId))
		i--
		dAtA[i] = 0x18
	}
	if m.TripTemplate != nil {
		{
			size, err := m.TripTemplate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Trip != nil {
		{
			size, err := m.Trip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddDivingBoatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddDivingBoatRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddDivingBoatRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AgencyId != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.AgencyId))
		i--
		dAtA[i] = 0x10
	}
	if m.DivingBoat != nil {
		{
			size, err := m.DivingBoat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddHotelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddHotelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddHotelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddressId != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.AddressId))
		i--
		dAtA[i] = 0x18
	}
	if m.AgencyId != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.AgencyId))
		i--
		dAtA[i] = 0x10
	}
	if m.Hotel != nil {
		{
			size, err := m.Hotel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddLiveaboardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddLiveaboardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddLiveaboardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AgencyId != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.AgencyId))
		i--
		dAtA[i] = 0x10
	}
	if m.Liveaboard != nil {
		{
			size, err := m.Liveaboard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAgency(dAtA []byte, offset int, v uint64) int {
	offset -= sovAgency(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DiveMaster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovAgency(uint64(m.Level))
	}
	if m.FrontImage != nil {
		l = m.FrontImage.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.BackImage != nil {
		l = m.BackImage.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *DiveMasterFirstAndLastName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *Staff) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *DivingBoat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BoatModel)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.BoatImage != nil {
		l = m.BoatImage.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *Place) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *Amenity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *RoomType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.MaxGuest != 0 {
		n += 1 + sovAgency(uint64(m.MaxGuest))
	}
	if m.Price != 0 {
		n += 5
	}
	if len(m.RoomImages) > 0 {
		for _, e := range m.RoomImages {
			l = e.Size()
			n += 1 + l + sovAgency(uint64(l))
		}
	}
	if len(m.Amenities) > 0 {
		for _, e := range m.Amenities {
			l = e.Size()
			n += 1 + l + sovAgency(uint64(l))
		}
	}
	if m.Quantity != 0 {
		n += 1 + sovAgency(uint64(m.Quantity))
	}
	return n
}

func (m *TripTemplate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.DivingBoatId != 0 {
		n += 1 + sovAgency(uint64(m.DivingBoatId))
	}
	if m.Place != nil {
		l = m.Place.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 1 + l + sovAgency(uint64(l))
		}
	}
	if m.TripType != 0 {
		n += 1 + sovAgency(uint64(m.TripType))
	}
	if m.ScheduleImage != nil {
		l = m.ScheduleImage.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.ResidenceId != nil {
		n += m.ResidenceId.Size()
	}
	return n
}

func (m *TripTemplate_HotelId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovAgency(uint64(m.HotelId))
	return n
}
func (m *TripTemplate_LiveaboardId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovAgency(uint64(m.LiveaboardId))
	return n
}
func (m *Trip) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.From)
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.To != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.To)
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.MaxCapacity != 0 {
		n += 1 + sovAgency(uint64(m.MaxCapacity))
	}
	if m.Price != 0 {
		n += 5
	}
	if len(m.DiveMasterIds) > 0 {
		l = 0
		for _, e := range m.DiveMasterIds {
			l += sovAgency(uint64(e))
		}
		n += 1 + sovAgency(uint64(l)) + l
	}
	return n
}

func (m *Hotel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HotelName)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.Star != 0 {
		n += 1 + sovAgency(uint64(m.Star))
	}
	if len(m.Highlights) > 0 {
		for _, s := range m.Highlights {
			l = len(s)
			n += 1 + l + sovAgency(uint64(l))
		}
	}
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 1 + l + sovAgency(uint64(l))
		}
	}
	if len(m.RoomTypes) > 0 {
		for _, e := range m.RoomTypes {
			l = e.Size()
			n += 1 + l + sovAgency(uint64(l))
		}
	}
	l = len(m.HotelDescription)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *Liveaboard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.Length != 0 {
		n += 5
	}
	if m.Width != 0 {
		n += 5
	}
	if len(m.Highlights) > 0 {
		for _, s := range m.Highlights {
			l = len(s)
			n += 1 + l + sovAgency(uint64(l))
		}
	}
	if len(m.Images) > 0 {
		for _, s := range m.Images {
			l = len(s)
			n += 1 + l + sovAgency(uint64(l))
		}
	}
	if len(m.Rooms) > 0 {
		for _, e := range m.Rooms {
			l = e.Size()
			n += 1 + l + sovAgency(uint64(l))
		}
	}
	return n
}

func (m *AddDiveMasterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DiveMaster != nil {
		l = m.DiveMaster.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.AgencyId != 0 {
		n += 1 + sovAgency(uint64(m.AgencyId))
	}
	return n
}

func (m *AddStaffRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Staff != nil {
		l = m.Staff.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.AgencyId != 0 {
		n += 1 + sovAgency(uint64(m.AgencyId))
	}
	return n
}

func (m *AddTripTemplateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TripTemplate != nil {
		l = m.TripTemplate.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.AgencyId != 0 {
		n += 1 + sovAgency(uint64(m.AgencyId))
	}
	return n
}

func (m *AddTripRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Trip != nil {
		l = m.Trip.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.TripTemplate != nil {
		l = m.TripTemplate.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.AgencyId != 0 {
		n += 1 + sovAgency(uint64(m.AgencyId))
	}
	return n
}

func (m *AddDivingBoatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DivingBoat != nil {
		l = m.DivingBoat.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.AgencyId != 0 {
		n += 1 + sovAgency(uint64(m.AgencyId))
	}
	return n
}

func (m *AddHotelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hotel != nil {
		l = m.Hotel.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.AgencyId != 0 {
		n += 1 + sovAgency(uint64(m.AgencyId))
	}
	if m.AddressId != 0 {
		n += 1 + sovAgency(uint64(m.AddressId))
	}
	return n
}

func (m *AddLiveaboardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Liveaboard != nil {
		l = m.Liveaboard.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.AgencyId != 0 {
		n += 1 + sovAgency(uint64(m.AgencyId))
	}
	return n
}

func sovAgency(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAgency(x uint64) (n int) {
	return sovAgency(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DiveMaster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DiveMaster{`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`FrontImage:` + strings.Replace(fmt.Sprintf("%v", this.FrontImage), "File", "File", 1) + `,`,
		`BackImage:` + strings.Replace(fmt.Sprintf("%v", this.BackImage), "File", "File", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DiveMasterFirstAndLastName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DiveMasterFirstAndLastName{`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Staff) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Staff{`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`LastName:` + fmt.Sprintf("%v", this.LastName) + `,`,
		`Position:` + fmt.Sprintf("%v", this.Position) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DivingBoat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DivingBoat{`,
		`BoatModel:` + fmt.Sprintf("%v", this.BoatModel) + `,`,
		`BoatImage:` + strings.Replace(fmt.Sprintf("%v", this.BoatImage), "File", "File", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Place) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Place{`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`City:` + fmt.Sprintf("%v", this.City) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Amenity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Amenity{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoomType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRoomImages := "[]*File{"
	for _, f := range this.RoomImages {
		repeatedStringForRoomImages += strings.Replace(fmt.Sprintf("%v", f), "File", "File", 1) + ","
	}
	repeatedStringForRoomImages += "}"
	repeatedStringForAmenities := "[]*Amenity{"
	for _, f := range this.Amenities {
		repeatedStringForAmenities += strings.Replace(f.String(), "Amenity", "Amenity", 1) + ","
	}
	repeatedStringForAmenities += "}"
	s := strings.Join([]string{`&RoomType{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`MaxGuest:` + fmt.Sprintf("%v", this.MaxGuest) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`RoomImages:` + repeatedStringForRoomImages + `,`,
		`Amenities:` + repeatedStringForAmenities + `,`,
		`Quantity:` + fmt.Sprintf("%v", this.Quantity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TripTemplate) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForImages := "[]*File{"
	for _, f := range this.Images {
		repeatedStringForImages += strings.Replace(fmt.Sprintf("%v", f), "File", "File", 1) + ","
	}
	repeatedStringForImages += "}"
	s := strings.Join([]string{`&TripTemplate{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`DivingBoatId:` + fmt.Sprintf("%v", this.DivingBoatId) + `,`,
		`Place:` + strings.Replace(this.Place.String(), "Place", "Place", 1) + `,`,
		`Images:` + repeatedStringForImages + `,`,
		`TripType:` + fmt.Sprintf("%v", this.TripType) + `,`,
		`ScheduleImage:` + strings.Replace(fmt.Sprintf("%v", this.ScheduleImage), "File", "File", 1) + `,`,
		`ResidenceId:` + fmt.Sprintf("%v", this.ResidenceId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TripTemplate_HotelId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TripTemplate_HotelId{`,
		`HotelId:` + fmt.Sprintf("%v", this.HotelId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TripTemplate_LiveaboardId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TripTemplate_LiveaboardId{`,
		`LiveaboardId:` + fmt.Sprintf("%v", this.LiveaboardId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Trip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Trip{`,
		`From:` + strings.Replace(fmt.Sprintf("%v", this.From), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`To:` + strings.Replace(fmt.Sprintf("%v", this.To), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`MaxCapacity:` + fmt.Sprintf("%v", this.MaxCapacity) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`DiveMasterIds:` + fmt.Sprintf("%v", this.DiveMasterIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Hotel) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForImages := "[]*File{"
	for _, f := range this.Images {
		repeatedStringForImages += strings.Replace(fmt.Sprintf("%v", f), "File", "File", 1) + ","
	}
	repeatedStringForImages += "}"
	repeatedStringForRoomTypes := "[]*RoomType{"
	for _, f := range this.RoomTypes {
		repeatedStringForRoomTypes += strings.Replace(f.String(), "RoomType", "RoomType", 1) + ","
	}
	repeatedStringForRoomTypes += "}"
	s := strings.Join([]string{`&Hotel{`,
		`HotelName:` + fmt.Sprintf("%v", this.HotelName) + `,`,
		`Star:` + fmt.Sprintf("%v", this.Star) + `,`,
		`Highlights:` + fmt.Sprintf("%v", this.Highlights) + `,`,
		`Images:` + repeatedStringForImages + `,`,
		`RoomTypes:` + repeatedStringForRoomTypes + `,`,
		`HotelDescription:` + fmt.Sprintf("%v", this.HotelDescription) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Liveaboard) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRooms := "[]*RoomType{"
	for _, f := range this.Rooms {
		repeatedStringForRooms += strings.Replace(f.String(), "RoomType", "RoomType", 1) + ","
	}
	repeatedStringForRooms += "}"
	s := strings.Join([]string{`&Liveaboard{`,
		`Model:` + fmt.Sprintf("%v", this.Model) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Length:` + fmt.Sprintf("%v", this.Length) + `,`,
		`Width:` + fmt.Sprintf("%v", this.Width) + `,`,
		`Highlights:` + fmt.Sprintf("%v", this.Highlights) + `,`,
		`Images:` + fmt.Sprintf("%v", this.Images) + `,`,
		`Rooms:` + repeatedStringForRooms + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddDiveMasterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddDiveMasterRequest{`,
		`DiveMaster:` + strings.Replace(this.DiveMaster.String(), "DiveMaster", "DiveMaster", 1) + `,`,
		`AgencyId:` + fmt.Sprintf("%v", this.AgencyId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddStaffRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddStaffRequest{`,
		`Staff:` + strings.Replace(this.Staff.String(), "Staff", "Staff", 1) + `,`,
		`AgencyId:` + fmt.Sprintf("%v", this.AgencyId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddTripTemplateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddTripTemplateRequest{`,
		`TripTemplate:` + strings.Replace(this.TripTemplate.String(), "TripTemplate", "TripTemplate", 1) + `,`,
		`AgencyId:` + fmt.Sprintf("%v", this.AgencyId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddTripRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddTripRequest{`,
		`Trip:` + strings.Replace(this.Trip.String(), "Trip", "Trip", 1) + `,`,
		`TripTemplate:` + strings.Replace(this.TripTemplate.String(), "TripTemplate", "TripTemplate", 1) + `,`,
		`AgencyId:` + fmt.Sprintf("%v", this.AgencyId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddDivingBoatRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddDivingBoatRequest{`,
		`DivingBoat:` + strings.Replace(this.DivingBoat.String(), "DivingBoat", "DivingBoat", 1) + `,`,
		`AgencyId:` + fmt.Sprintf("%v", this.AgencyId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddHotelRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddHotelRequest{`,
		`Hotel:` + strings.Replace(this.Hotel.String(), "Hotel", "Hotel", 1) + `,`,
		`AgencyId:` + fmt.Sprintf("%v", this.AgencyId) + `,`,
		`AddressId:` + fmt.Sprintf("%v", this.AddressId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddLiveaboardRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddLiveaboardRequest{`,
		`Liveaboard:` + strings.Replace(this.Liveaboard.String(), "Liveaboard", "Liveaboard", 1) + `,`,
		`AgencyId:` + fmt.Sprintf("%v", this.AgencyId) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAgency(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DiveMaster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiveMaster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiveMaster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= LevelType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrontImage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FrontImage == nil {
				m.FrontImage = &File{}
			}
			if err := m.FrontImage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackImage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BackImage == nil {
				m.BackImage = &File{}
			}
			if err := m.BackImage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiveMasterFirstAndLastName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiveMasterFirstAndLastName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiveMasterFirstAndLastName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Staff) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Staff: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Staff: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DivingBoat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DivingBoat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DivingBoat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoatModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoatModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoatImage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BoatImage == nil {
				m.BoatImage = &File{}
			}
			if err := m.BoatImage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Place) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Place: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Place: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Amenity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Amenity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Amenity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGuest", wireType)
			}
			m.MaxGuest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxGuest |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Price = float32(math.Float32frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomImages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomImages = append(m.RoomImages, &File{})
			if err := m.RoomImages[len(m.RoomImages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amenities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amenities = append(m.Amenities, &Amenity{})
			if err := m.Amenities[len(m.Amenities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TripTemplate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TripTemplate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TripTemplate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DivingBoatId", wireType)
			}
			m.DivingBoatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DivingBoatId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Place", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Place == nil {
				m.Place = &Place{}
			}
			if err := m.Place.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, &File{})
			if err := m.Images[len(m.Images)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TripType", wireType)
			}
			m.TripType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TripType |= TripType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleImage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleImage == nil {
				m.ScheduleImage = &File{}
			}
			if err := m.ScheduleImage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotelId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ResidenceId = &TripTemplate_HotelId{v}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveaboardId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ResidenceId = &TripTemplate_LiveaboardId{v}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Trip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.From, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.To, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCapacity", wireType)
			}
			m.MaxCapacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCapacity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Price = float32(math.Float32frombits(v))
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgency
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DiveMasterIds = append(m.DiveMasterIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgency
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAgency
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAgency
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DiveMasterIds) == 0 {
					m.DiveMasterIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgency
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DiveMasterIds = append(m.DiveMasterIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DiveMasterIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hotel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hotel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hotel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotelName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HotelName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star", wireType)
			}
			m.Star = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Highlights", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Highlights = append(m.Highlights, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, &File{})
			if err := m.Images[len(m.Images)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomTypes = append(m.RoomTypes, &RoomType{})
			if err := m.RoomTypes[len(m.RoomTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotelDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HotelDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Liveaboard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Liveaboard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Liveaboard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Length = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Width = float32(math.Float32frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Highlights", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Highlights = append(m.Highlights, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rooms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rooms = append(m.Rooms, &RoomType{})
			if err := m.Rooms[len(m.Rooms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddDiveMasterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddDiveMasterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddDiveMasterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiveMaster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DiveMaster == nil {
				m.DiveMaster = &DiveMaster{}
			}
			if err := m.DiveMaster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgencyId", wireType)
			}
			m.AgencyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgencyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddStaffRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddStaffRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddStaffRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staff", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Staff == nil {
				m.Staff = &Staff{}
			}
			if err := m.Staff.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgencyId", wireType)
			}
			m.AgencyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgencyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddTripTemplateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddTripTemplateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddTripTemplateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TripTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TripTemplate == nil {
				m.TripTemplate = &TripTemplate{}
			}
			if err := m.TripTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgencyId", wireType)
			}
			m.AgencyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgencyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddTripRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddTripRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddTripRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trip == nil {
				m.Trip = &Trip{}
			}
			if err := m.Trip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TripTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TripTemplate == nil {
				m.TripTemplate = &TripTemplate{}
			}
			if err := m.TripTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgencyId", wireType)
			}
			m.AgencyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgencyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddDivingBoatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddDivingBoatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddDivingBoatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DivingBoat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DivingBoat == nil {
				m.DivingBoat = &DivingBoat{}
			}
			if err := m.DivingBoat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgencyId", wireType)
			}
			m.AgencyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgencyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddHotelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddHotelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddHotelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hotel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hotel == nil {
				m.Hotel = &Hotel{}
			}
			if err := m.Hotel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgencyId", wireType)
			}
			m.AgencyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgencyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressId", wireType)
			}
			m.AddressId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddressId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddLiveaboardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddLiveaboardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddLiveaboardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liveaboard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Liveaboard == nil {
				m.Liveaboard = &Liveaboard{}
			}
			if err := m.Liveaboard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgencyId", wireType)
			}
			m.AgencyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgencyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAgency(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAgency
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAgency
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAgency
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAgency        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAgency          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAgency = fmt.Errorf("proto: unexpected end of group")
)
