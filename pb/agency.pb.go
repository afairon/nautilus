// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: agency.proto

package pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AddDiveMasterRequest struct {
	DiveMaster *DiveMaster `protobuf:"bytes,1,opt,name=dive_master,json=diveMaster,proto3" json:"dive_master,omitempty"`
}

func (m *AddDiveMasterRequest) Reset()      { *m = AddDiveMasterRequest{} }
func (*AddDiveMasterRequest) ProtoMessage() {}
func (*AddDiveMasterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{0}
}
func (m *AddDiveMasterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddDiveMasterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddDiveMasterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddDiveMasterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddDiveMasterRequest.Merge(m, src)
}
func (m *AddDiveMasterRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddDiveMasterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddDiveMasterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddDiveMasterRequest proto.InternalMessageInfo

func (m *AddDiveMasterRequest) GetDiveMaster() *DiveMaster {
	if m != nil {
		return m.DiveMaster
	}
	return nil
}

type AddStaffRequest struct {
	Staff *Staff `protobuf:"bytes,1,opt,name=staff,proto3" json:"staff,omitempty"`
}

func (m *AddStaffRequest) Reset()      { *m = AddStaffRequest{} }
func (*AddStaffRequest) ProtoMessage() {}
func (*AddStaffRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{1}
}
func (m *AddStaffRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddStaffRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddStaffRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddStaffRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddStaffRequest.Merge(m, src)
}
func (m *AddStaffRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddStaffRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddStaffRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddStaffRequest proto.InternalMessageInfo

func (m *AddStaffRequest) GetStaff() *Staff {
	if m != nil {
		return m.Staff
	}
	return nil
}

type AddTripTemplateRequest struct {
	TripTemplate *TripTemplate `protobuf:"bytes,1,opt,name=trip_template,json=tripTemplate,proto3" json:"trip_template,omitempty"`
	AgencyId     uint64        `protobuf:"varint,2,opt,name=agency_id,json=agencyId,proto3" json:"agency_id,omitempty"`
}

func (m *AddTripTemplateRequest) Reset()      { *m = AddTripTemplateRequest{} }
func (*AddTripTemplateRequest) ProtoMessage() {}
func (*AddTripTemplateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{2}
}
func (m *AddTripTemplateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddTripTemplateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddTripTemplateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddTripTemplateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddTripTemplateRequest.Merge(m, src)
}
func (m *AddTripTemplateRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddTripTemplateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddTripTemplateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddTripTemplateRequest proto.InternalMessageInfo

func (m *AddTripTemplateRequest) GetTripTemplate() *TripTemplate {
	if m != nil {
		return m.TripTemplate
	}
	return nil
}

func (m *AddTripTemplateRequest) GetAgencyId() uint64 {
	if m != nil {
		return m.AgencyId
	}
	return 0
}

type AddTripRequest struct {
	Trip         *Trip         `protobuf:"bytes,1,opt,name=trip,proto3" json:"trip,omitempty"`
	TripTemplate *TripTemplate `protobuf:"bytes,2,opt,name=trip_template,json=tripTemplate,proto3" json:"trip_template,omitempty"`
}

func (m *AddTripRequest) Reset()      { *m = AddTripRequest{} }
func (*AddTripRequest) ProtoMessage() {}
func (*AddTripRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{3}
}
func (m *AddTripRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddTripRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddTripRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddTripRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddTripRequest.Merge(m, src)
}
func (m *AddTripRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddTripRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddTripRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddTripRequest proto.InternalMessageInfo

func (m *AddTripRequest) GetTrip() *Trip {
	if m != nil {
		return m.Trip
	}
	return nil
}

func (m *AddTripRequest) GetTripTemplate() *TripTemplate {
	if m != nil {
		return m.TripTemplate
	}
	return nil
}

type AddDivingBoatRequest struct {
	DivingBoat *Boat `protobuf:"bytes,1,opt,name=diving_boat,json=divingBoat,proto3" json:"diving_boat,omitempty"`
}

func (m *AddDivingBoatRequest) Reset()      { *m = AddDivingBoatRequest{} }
func (*AddDivingBoatRequest) ProtoMessage() {}
func (*AddDivingBoatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{4}
}
func (m *AddDivingBoatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddDivingBoatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddDivingBoatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddDivingBoatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddDivingBoatRequest.Merge(m, src)
}
func (m *AddDivingBoatRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddDivingBoatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddDivingBoatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddDivingBoatRequest proto.InternalMessageInfo

func (m *AddDivingBoatRequest) GetDivingBoat() *Boat {
	if m != nil {
		return m.DivingBoat
	}
	return nil
}

type AddHotelRequest struct {
	Hotel *Hotel `protobuf:"bytes,1,opt,name=hotel,proto3" json:"hotel,omitempty"`
}

func (m *AddHotelRequest) Reset()      { *m = AddHotelRequest{} }
func (*AddHotelRequest) ProtoMessage() {}
func (*AddHotelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{5}
}
func (m *AddHotelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddHotelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddHotelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddHotelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddHotelRequest.Merge(m, src)
}
func (m *AddHotelRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddHotelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddHotelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddHotelRequest proto.InternalMessageInfo

func (m *AddHotelRequest) GetHotel() *Hotel {
	if m != nil {
		return m.Hotel
	}
	return nil
}

type AddLiveaboardRequest struct {
	Liveaboard *Liveaboard `protobuf:"bytes,1,opt,name=liveaboard,proto3" json:"liveaboard,omitempty"`
}

func (m *AddLiveaboardRequest) Reset()      { *m = AddLiveaboardRequest{} }
func (*AddLiveaboardRequest) ProtoMessage() {}
func (*AddLiveaboardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{6}
}
func (m *AddLiveaboardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddLiveaboardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddLiveaboardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddLiveaboardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddLiveaboardRequest.Merge(m, src)
}
func (m *AddLiveaboardRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddLiveaboardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddLiveaboardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddLiveaboardRequest proto.InternalMessageInfo

func (m *AddLiveaboardRequest) GetLiveaboard() *Liveaboard {
	if m != nil {
		return m.Liveaboard
	}
	return nil
}

// ListBoatsRequest
type ListBoatsRequest struct {
	Limit  uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *ListBoatsRequest) Reset()      { *m = ListBoatsRequest{} }
func (*ListBoatsRequest) ProtoMessage() {}
func (*ListBoatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{7}
}
func (m *ListBoatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBoatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBoatsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBoatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBoatsRequest.Merge(m, src)
}
func (m *ListBoatsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListBoatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBoatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListBoatsRequest proto.InternalMessageInfo

func (m *ListBoatsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListBoatsRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// ListBoatsResponse
type ListBoatsResponse struct {
	Boat *Boat `protobuf:"bytes,1,opt,name=boat,proto3" json:"boat,omitempty"`
}

func (m *ListBoatsResponse) Reset()      { *m = ListBoatsResponse{} }
func (*ListBoatsResponse) ProtoMessage() {}
func (*ListBoatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{8}
}
func (m *ListBoatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBoatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBoatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBoatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBoatsResponse.Merge(m, src)
}
func (m *ListBoatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListBoatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBoatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListBoatsResponse proto.InternalMessageInfo

func (m *ListBoatsResponse) GetBoat() *Boat {
	if m != nil {
		return m.Boat
	}
	return nil
}

// ListDiveMastersRequest
type ListDiveMastersRequest struct {
	Limit  uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *ListDiveMastersRequest) Reset()      { *m = ListDiveMastersRequest{} }
func (*ListDiveMastersRequest) ProtoMessage() {}
func (*ListDiveMastersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{9}
}
func (m *ListDiveMastersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDiveMastersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDiveMastersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDiveMastersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDiveMastersRequest.Merge(m, src)
}
func (m *ListDiveMastersRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListDiveMastersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDiveMastersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDiveMastersRequest proto.InternalMessageInfo

func (m *ListDiveMastersRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListDiveMastersRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// ListDiveMastersResponse
type ListDiveMastersResponse struct {
	DiveMaster *DiveMaster `protobuf:"bytes,1,opt,name=dive_master,json=diveMaster,proto3" json:"dive_master,omitempty"`
}

func (m *ListDiveMastersResponse) Reset()      { *m = ListDiveMastersResponse{} }
func (*ListDiveMastersResponse) ProtoMessage() {}
func (*ListDiveMastersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{10}
}
func (m *ListDiveMastersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDiveMastersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDiveMastersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDiveMastersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDiveMastersResponse.Merge(m, src)
}
func (m *ListDiveMastersResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListDiveMastersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDiveMastersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDiveMastersResponse proto.InternalMessageInfo

func (m *ListDiveMastersResponse) GetDiveMaster() *DiveMaster {
	if m != nil {
		return m.DiveMaster
	}
	return nil
}

// ListHotelsRequest
type ListHotelsRequest struct {
	Limit  uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *ListHotelsRequest) Reset()      { *m = ListHotelsRequest{} }
func (*ListHotelsRequest) ProtoMessage() {}
func (*ListHotelsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{11}
}
func (m *ListHotelsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListHotelsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListHotelsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListHotelsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListHotelsRequest.Merge(m, src)
}
func (m *ListHotelsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListHotelsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListHotelsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListHotelsRequest proto.InternalMessageInfo

func (m *ListHotelsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListHotelsRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// ListHotelsResponse
type ListHotelsResponse struct {
	Hotel *Hotel `protobuf:"bytes,1,opt,name=hotel,proto3" json:"hotel,omitempty"`
}

func (m *ListHotelsResponse) Reset()      { *m = ListHotelsResponse{} }
func (*ListHotelsResponse) ProtoMessage() {}
func (*ListHotelsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{12}
}
func (m *ListHotelsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListHotelsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListHotelsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListHotelsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListHotelsResponse.Merge(m, src)
}
func (m *ListHotelsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListHotelsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListHotelsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListHotelsResponse proto.InternalMessageInfo

func (m *ListHotelsResponse) GetHotel() *Hotel {
	if m != nil {
		return m.Hotel
	}
	return nil
}

// ListLiveaboardsRequest
type ListLiveaboardsRequest struct {
	Limit  uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *ListLiveaboardsRequest) Reset()      { *m = ListLiveaboardsRequest{} }
func (*ListLiveaboardsRequest) ProtoMessage() {}
func (*ListLiveaboardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{13}
}
func (m *ListLiveaboardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListLiveaboardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListLiveaboardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListLiveaboardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListLiveaboardsRequest.Merge(m, src)
}
func (m *ListLiveaboardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListLiveaboardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListLiveaboardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListLiveaboardsRequest proto.InternalMessageInfo

func (m *ListLiveaboardsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListLiveaboardsRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// ListLiveaboardsResponse
type ListLiveaboardsResponse struct {
	Liveaboard *Liveaboard `protobuf:"bytes,1,opt,name=liveaboard,proto3" json:"liveaboard,omitempty"`
}

func (m *ListLiveaboardsResponse) Reset()      { *m = ListLiveaboardsResponse{} }
func (*ListLiveaboardsResponse) ProtoMessage() {}
func (*ListLiveaboardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{14}
}
func (m *ListLiveaboardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListLiveaboardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListLiveaboardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListLiveaboardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListLiveaboardsResponse.Merge(m, src)
}
func (m *ListLiveaboardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListLiveaboardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListLiveaboardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListLiveaboardsResponse proto.InternalMessageInfo

func (m *ListLiveaboardsResponse) GetLiveaboard() *Liveaboard {
	if m != nil {
		return m.Liveaboard
	}
	return nil
}

// ListStaffsRequest
type ListStaffsRequest struct {
	Limit  uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *ListStaffsRequest) Reset()      { *m = ListStaffsRequest{} }
func (*ListStaffsRequest) ProtoMessage() {}
func (*ListStaffsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{15}
}
func (m *ListStaffsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListStaffsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListStaffsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListStaffsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListStaffsRequest.Merge(m, src)
}
func (m *ListStaffsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListStaffsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListStaffsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListStaffsRequest proto.InternalMessageInfo

func (m *ListStaffsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListStaffsRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// ListStaffsResponse
type ListStaffsResponse struct {
	Staff *Staff `protobuf:"bytes,1,opt,name=staff,proto3" json:"staff,omitempty"`
}

func (m *ListStaffsResponse) Reset()      { *m = ListStaffsResponse{} }
func (*ListStaffsResponse) ProtoMessage() {}
func (*ListStaffsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{16}
}
func (m *ListStaffsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListStaffsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListStaffsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListStaffsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListStaffsResponse.Merge(m, src)
}
func (m *ListStaffsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListStaffsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListStaffsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListStaffsResponse proto.InternalMessageInfo

func (m *ListStaffsResponse) GetStaff() *Staff {
	if m != nil {
		return m.Staff
	}
	return nil
}

// ListTripTemplatesRequest
type ListTripTemplatesRequest struct {
	Limit  uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *ListTripTemplatesRequest) Reset()      { *m = ListTripTemplatesRequest{} }
func (*ListTripTemplatesRequest) ProtoMessage() {}
func (*ListTripTemplatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{17}
}
func (m *ListTripTemplatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTripTemplatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTripTemplatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTripTemplatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTripTemplatesRequest.Merge(m, src)
}
func (m *ListTripTemplatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListTripTemplatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTripTemplatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTripTemplatesRequest proto.InternalMessageInfo

func (m *ListTripTemplatesRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListTripTemplatesRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// ListTripTemplatesResponse
type ListTripTemplatesResponse struct {
	Template *TripTemplate `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
}

func (m *ListTripTemplatesResponse) Reset()      { *m = ListTripTemplatesResponse{} }
func (*ListTripTemplatesResponse) ProtoMessage() {}
func (*ListTripTemplatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{18}
}
func (m *ListTripTemplatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTripTemplatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTripTemplatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTripTemplatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTripTemplatesResponse.Merge(m, src)
}
func (m *ListTripTemplatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTripTemplatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTripTemplatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTripTemplatesResponse proto.InternalMessageInfo

func (m *ListTripTemplatesResponse) GetTemplate() *TripTemplate {
	if m != nil {
		return m.Template
	}
	return nil
}

// ListTripsRequest
type ListTripsRequest struct {
	Limit  uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *ListTripsRequest) Reset()      { *m = ListTripsRequest{} }
func (*ListTripsRequest) ProtoMessage() {}
func (*ListTripsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{19}
}
func (m *ListTripsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTripsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTripsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTripsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTripsRequest.Merge(m, src)
}
func (m *ListTripsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListTripsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTripsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTripsRequest proto.InternalMessageInfo

func (m *ListTripsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListTripsRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// ListTripsResponse
type ListTripsResponse struct {
	Trip *Trip `protobuf:"bytes,1,opt,name=trip,proto3" json:"trip,omitempty"`
}

func (m *ListTripsResponse) Reset()      { *m = ListTripsResponse{} }
func (*ListTripsResponse) ProtoMessage() {}
func (*ListTripsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{20}
}
func (m *ListTripsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTripsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTripsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTripsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTripsResponse.Merge(m, src)
}
func (m *ListTripsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTripsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTripsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTripsResponse proto.InternalMessageInfo

func (m *ListTripsResponse) GetTrip() *Trip {
	if m != nil {
		return m.Trip
	}
	return nil
}

// ListTripsWithTemplatesRequest
type ListTripsWithTemplatesRequest struct {
	Limit  uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *ListTripsWithTemplatesRequest) Reset()      { *m = ListTripsWithTemplatesRequest{} }
func (*ListTripsWithTemplatesRequest) ProtoMessage() {}
func (*ListTripsWithTemplatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{21}
}
func (m *ListTripsWithTemplatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTripsWithTemplatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTripsWithTemplatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTripsWithTemplatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTripsWithTemplatesRequest.Merge(m, src)
}
func (m *ListTripsWithTemplatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListTripsWithTemplatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTripsWithTemplatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTripsWithTemplatesRequest proto.InternalMessageInfo

func (m *ListTripsWithTemplatesRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListTripsWithTemplatesRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// ListTripsWithTemplatesResponse
type ListTripsWithTemplatesResponse struct {
	Trip *TripWithTemplate `protobuf:"bytes,1,opt,name=trip,proto3" json:"trip,omitempty"`
}

func (m *ListTripsWithTemplatesResponse) Reset()      { *m = ListTripsWithTemplatesResponse{} }
func (*ListTripsWithTemplatesResponse) ProtoMessage() {}
func (*ListTripsWithTemplatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{22}
}
func (m *ListTripsWithTemplatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTripsWithTemplatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTripsWithTemplatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTripsWithTemplatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTripsWithTemplatesResponse.Merge(m, src)
}
func (m *ListTripsWithTemplatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTripsWithTemplatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTripsWithTemplatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTripsWithTemplatesResponse proto.InternalMessageInfo

func (m *ListTripsWithTemplatesResponse) GetTrip() *TripWithTemplate {
	if m != nil {
		return m.Trip
	}
	return nil
}

// ListRoomTypesRequest
type ListRoomTypesRequest struct {
	// Types that are valid to be assigned to Id:
	//	*ListRoomTypesRequest_HotelId
	//	*ListRoomTypesRequest_LiveaboardId
	Id     isListRoomTypesRequest_Id `protobuf_oneof:"id"`
	Limit  uint64                    `protobuf:"varint,20,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64                    `protobuf:"varint,25,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *ListRoomTypesRequest) Reset()      { *m = ListRoomTypesRequest{} }
func (*ListRoomTypesRequest) ProtoMessage() {}
func (*ListRoomTypesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{23}
}
func (m *ListRoomTypesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRoomTypesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRoomTypesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRoomTypesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRoomTypesRequest.Merge(m, src)
}
func (m *ListRoomTypesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListRoomTypesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRoomTypesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRoomTypesRequest proto.InternalMessageInfo

type isListRoomTypesRequest_Id interface {
	isListRoomTypesRequest_Id()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListRoomTypesRequest_HotelId struct {
	HotelId uint64 `protobuf:"varint,1,opt,name=hotel_id,json=hotelId,proto3,oneof" json:"hotel_id,omitempty"`
}
type ListRoomTypesRequest_LiveaboardId struct {
	LiveaboardId uint64 `protobuf:"varint,10,opt,name=liveaboard_id,json=liveaboardId,proto3,oneof" json:"liveaboard_id,omitempty"`
}

func (*ListRoomTypesRequest_HotelId) isListRoomTypesRequest_Id()      {}
func (*ListRoomTypesRequest_LiveaboardId) isListRoomTypesRequest_Id() {}

func (m *ListRoomTypesRequest) GetId() isListRoomTypesRequest_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ListRoomTypesRequest) GetHotelId() uint64 {
	if x, ok := m.GetId().(*ListRoomTypesRequest_HotelId); ok {
		return x.HotelId
	}
	return 0
}

func (m *ListRoomTypesRequest) GetLiveaboardId() uint64 {
	if x, ok := m.GetId().(*ListRoomTypesRequest_LiveaboardId); ok {
		return x.LiveaboardId
	}
	return 0
}

func (m *ListRoomTypesRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListRoomTypesRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListRoomTypesRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListRoomTypesRequest_HotelId)(nil),
		(*ListRoomTypesRequest_LiveaboardId)(nil),
	}
}

// ListRoomTypesResponse
type ListRoomTypesResponse struct {
	RoomType *RoomType `protobuf:"bytes,1,opt,name=room_type,json=roomType,proto3" json:"room_type,omitempty"`
}

func (m *ListRoomTypesResponse) Reset()      { *m = ListRoomTypesResponse{} }
func (*ListRoomTypesResponse) ProtoMessage() {}
func (*ListRoomTypesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{24}
}
func (m *ListRoomTypesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRoomTypesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRoomTypesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRoomTypesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRoomTypesResponse.Merge(m, src)
}
func (m *ListRoomTypesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListRoomTypesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRoomTypesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRoomTypesResponse proto.InternalMessageInfo

func (m *ListRoomTypesResponse) GetRoomType() *RoomType {
	if m != nil {
		return m.RoomType
	}
	return nil
}

type SearchTripsOptions struct {
	// allow either country or city for location filtering
	//
	// Types that are valid to be assigned to LocationFilter:
	//	*SearchTripsOptions_Country
	//	*SearchTripsOptions_City
	//	*SearchTripsOptions_Region
	LocationFilter isSearchTripsOptions_LocationFilter `protobuf_oneof:"location_filter"`
	Divers         uint32                              `protobuf:"varint,10,opt,name=divers,proto3" json:"divers,omitempty"`
	TripType       TripType                            `protobuf:"varint,15,opt,name=trip_type,json=tripType,proto3,enum=model.TripType" json:"trip_type,omitempty"`
	StartDate      *time.Time                          `protobuf:"bytes,20,opt,name=start_date,json=startDate,proto3,stdtime" json:"start_date,omitempty"`
	EndDate        *time.Time                          `protobuf:"bytes,30,opt,name=end_date,json=endDate,proto3,stdtime" json:"end_date,omitempty"`
}

func (m *SearchTripsOptions) Reset()      { *m = SearchTripsOptions{} }
func (*SearchTripsOptions) ProtoMessage() {}
func (*SearchTripsOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{25}
}
func (m *SearchTripsOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchTripsOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchTripsOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchTripsOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchTripsOptions.Merge(m, src)
}
func (m *SearchTripsOptions) XXX_Size() int {
	return m.Size()
}
func (m *SearchTripsOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchTripsOptions.DiscardUnknown(m)
}

var xxx_messageInfo_SearchTripsOptions proto.InternalMessageInfo

type isSearchTripsOptions_LocationFilter interface {
	isSearchTripsOptions_LocationFilter()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SearchTripsOptions_Country struct {
	Country string `protobuf:"bytes,1,opt,name=country,proto3,oneof" json:"country,omitempty"`
}
type SearchTripsOptions_City struct {
	City string `protobuf:"bytes,2,opt,name=city,proto3,oneof" json:"city,omitempty"`
}
type SearchTripsOptions_Region struct {
	Region string `protobuf:"bytes,3,opt,name=region,proto3,oneof" json:"region,omitempty"`
}

func (*SearchTripsOptions_Country) isSearchTripsOptions_LocationFilter() {}
func (*SearchTripsOptions_City) isSearchTripsOptions_LocationFilter()    {}
func (*SearchTripsOptions_Region) isSearchTripsOptions_LocationFilter()  {}

func (m *SearchTripsOptions) GetLocationFilter() isSearchTripsOptions_LocationFilter {
	if m != nil {
		return m.LocationFilter
	}
	return nil
}

func (m *SearchTripsOptions) GetCountry() string {
	if x, ok := m.GetLocationFilter().(*SearchTripsOptions_Country); ok {
		return x.Country
	}
	return ""
}

func (m *SearchTripsOptions) GetCity() string {
	if x, ok := m.GetLocationFilter().(*SearchTripsOptions_City); ok {
		return x.City
	}
	return ""
}

func (m *SearchTripsOptions) GetRegion() string {
	if x, ok := m.GetLocationFilter().(*SearchTripsOptions_Region); ok {
		return x.Region
	}
	return ""
}

func (m *SearchTripsOptions) GetDivers() uint32 {
	if m != nil {
		return m.Divers
	}
	return 0
}

func (m *SearchTripsOptions) GetTripType() TripType {
	if m != nil {
		return m.TripType
	}
	return ONSHORE
}

func (m *SearchTripsOptions) GetStartDate() *time.Time {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *SearchTripsOptions) GetEndDate() *time.Time {
	if m != nil {
		return m.EndDate
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SearchTripsOptions) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SearchTripsOptions_Country)(nil),
		(*SearchTripsOptions_City)(nil),
		(*SearchTripsOptions_Region)(nil),
	}
}

type SearchTripsRequest struct {
	SearchTripsOptions *SearchTripsOptions `protobuf:"bytes,1,opt,name=search_trips_options,json=searchTripsOptions,proto3" json:"search_trips_options,omitempty"`
	Limit              uint64              `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset             uint64              `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *SearchTripsRequest) Reset()      { *m = SearchTripsRequest{} }
func (*SearchTripsRequest) ProtoMessage() {}
func (*SearchTripsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{26}
}
func (m *SearchTripsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchTripsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchTripsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchTripsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchTripsRequest.Merge(m, src)
}
func (m *SearchTripsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SearchTripsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchTripsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchTripsRequest proto.InternalMessageInfo

func (m *SearchTripsRequest) GetSearchTripsOptions() *SearchTripsOptions {
	if m != nil {
		return m.SearchTripsOptions
	}
	return nil
}

func (m *SearchTripsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchTripsRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type SearchTripsResponse struct {
	Trip *TripWithTemplate `protobuf:"bytes,1,opt,name=trip,proto3" json:"trip,omitempty"`
}

func (m *SearchTripsResponse) Reset()      { *m = SearchTripsResponse{} }
func (*SearchTripsResponse) ProtoMessage() {}
func (*SearchTripsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{27}
}
func (m *SearchTripsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchTripsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchTripsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchTripsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchTripsResponse.Merge(m, src)
}
func (m *SearchTripsResponse) XXX_Size() int {
	return m.Size()
}
func (m *SearchTripsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchTripsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SearchTripsResponse proto.InternalMessageInfo

func (m *SearchTripsResponse) GetTrip() *TripWithTemplate {
	if m != nil {
		return m.Trip
	}
	return nil
}

type UpdateTripRequest struct {
	Trip *Trip `protobuf:"bytes,10,opt,name=trip,proto3" json:"trip,omitempty"`
}

func (m *UpdateTripRequest) Reset()      { *m = UpdateTripRequest{} }
func (*UpdateTripRequest) ProtoMessage() {}
func (*UpdateTripRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{28}
}
func (m *UpdateTripRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTripRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTripRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTripRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTripRequest.Merge(m, src)
}
func (m *UpdateTripRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTripRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTripRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTripRequest proto.InternalMessageInfo

func (m *UpdateTripRequest) GetTrip() *Trip {
	if m != nil {
		return m.Trip
	}
	return nil
}

type UpdateHotelRequest struct {
	Hotel *Hotel `protobuf:"bytes,10,opt,name=hotel,proto3" json:"hotel,omitempty"`
}

func (m *UpdateHotelRequest) Reset()      { *m = UpdateHotelRequest{} }
func (*UpdateHotelRequest) ProtoMessage() {}
func (*UpdateHotelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{29}
}
func (m *UpdateHotelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateHotelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateHotelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateHotelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateHotelRequest.Merge(m, src)
}
func (m *UpdateHotelRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateHotelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateHotelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateHotelRequest proto.InternalMessageInfo

func (m *UpdateHotelRequest) GetHotel() *Hotel {
	if m != nil {
		return m.Hotel
	}
	return nil
}

type UpdateLiveaboardRequest struct {
	Liveaboard *Liveaboard `protobuf:"bytes,10,opt,name=liveaboard,proto3" json:"liveaboard,omitempty"`
}

func (m *UpdateLiveaboardRequest) Reset()      { *m = UpdateLiveaboardRequest{} }
func (*UpdateLiveaboardRequest) ProtoMessage() {}
func (*UpdateLiveaboardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{30}
}
func (m *UpdateLiveaboardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateLiveaboardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateLiveaboardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateLiveaboardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateLiveaboardRequest.Merge(m, src)
}
func (m *UpdateLiveaboardRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateLiveaboardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateLiveaboardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateLiveaboardRequest proto.InternalMessageInfo

func (m *UpdateLiveaboardRequest) GetLiveaboard() *Liveaboard {
	if m != nil {
		return m.Liveaboard
	}
	return nil
}

type UpdateBoatRequest struct {
	Boat *Boat `protobuf:"bytes,10,opt,name=boat,proto3" json:"boat,omitempty"`
}

func (m *UpdateBoatRequest) Reset()      { *m = UpdateBoatRequest{} }
func (*UpdateBoatRequest) ProtoMessage() {}
func (*UpdateBoatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{31}
}
func (m *UpdateBoatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBoatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBoatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBoatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBoatRequest.Merge(m, src)
}
func (m *UpdateBoatRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBoatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBoatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBoatRequest proto.InternalMessageInfo

func (m *UpdateBoatRequest) GetBoat() *Boat {
	if m != nil {
		return m.Boat
	}
	return nil
}

type UpdateDiveMasterRequest struct {
	DiveMaster *DiveMaster `protobuf:"bytes,10,opt,name=dive_master,json=diveMaster,proto3" json:"dive_master,omitempty"`
}

func (m *UpdateDiveMasterRequest) Reset()      { *m = UpdateDiveMasterRequest{} }
func (*UpdateDiveMasterRequest) ProtoMessage() {}
func (*UpdateDiveMasterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{32}
}
func (m *UpdateDiveMasterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDiveMasterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDiveMasterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDiveMasterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDiveMasterRequest.Merge(m, src)
}
func (m *UpdateDiveMasterRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDiveMasterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDiveMasterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDiveMasterRequest proto.InternalMessageInfo

func (m *UpdateDiveMasterRequest) GetDiveMaster() *DiveMaster {
	if m != nil {
		return m.DiveMaster
	}
	return nil
}

type UpdateStaffRequest struct {
	Staff *Staff `protobuf:"bytes,10,opt,name=staff,proto3" json:"staff,omitempty"`
}

func (m *UpdateStaffRequest) Reset()      { *m = UpdateStaffRequest{} }
func (*UpdateStaffRequest) ProtoMessage() {}
func (*UpdateStaffRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{33}
}
func (m *UpdateStaffRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateStaffRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateStaffRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateStaffRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateStaffRequest.Merge(m, src)
}
func (m *UpdateStaffRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateStaffRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateStaffRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateStaffRequest proto.InternalMessageInfo

func (m *UpdateStaffRequest) GetStaff() *Staff {
	if m != nil {
		return m.Staff
	}
	return nil
}

type GenerateCurrentTripsReportRequest struct {
	Limit  uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *GenerateCurrentTripsReportRequest) Reset()      { *m = GenerateCurrentTripsReportRequest{} }
func (*GenerateCurrentTripsReportRequest) ProtoMessage() {}
func (*GenerateCurrentTripsReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{34}
}
func (m *GenerateCurrentTripsReportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenerateCurrentTripsReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenerateCurrentTripsReportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenerateCurrentTripsReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateCurrentTripsReportRequest.Merge(m, src)
}
func (m *GenerateCurrentTripsReportRequest) XXX_Size() int {
	return m.Size()
}
func (m *GenerateCurrentTripsReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateCurrentTripsReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateCurrentTripsReportRequest proto.InternalMessageInfo

func (m *GenerateCurrentTripsReportRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GenerateCurrentTripsReportRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type GenerateCurrentTripsReportResponse struct {
	Report *ReportTrip `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
}

func (m *GenerateCurrentTripsReportResponse) Reset()      { *m = GenerateCurrentTripsReportResponse{} }
func (*GenerateCurrentTripsReportResponse) ProtoMessage() {}
func (*GenerateCurrentTripsReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{35}
}
func (m *GenerateCurrentTripsReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenerateCurrentTripsReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenerateCurrentTripsReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenerateCurrentTripsReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateCurrentTripsReportResponse.Merge(m, src)
}
func (m *GenerateCurrentTripsReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *GenerateCurrentTripsReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateCurrentTripsReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateCurrentTripsReportResponse proto.InternalMessageInfo

func (m *GenerateCurrentTripsReportResponse) GetReport() *ReportTrip {
	if m != nil {
		return m.Report
	}
	return nil
}

type GenerateYearlyEndedTripsReportRequest struct {
	Limit  uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Years  uint32 `protobuf:"varint,10,opt,name=years,proto3" json:"years,omitempty"`
}

func (m *GenerateYearlyEndedTripsReportRequest) Reset()      { *m = GenerateYearlyEndedTripsReportRequest{} }
func (*GenerateYearlyEndedTripsReportRequest) ProtoMessage() {}
func (*GenerateYearlyEndedTripsReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{36}
}
func (m *GenerateYearlyEndedTripsReportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenerateYearlyEndedTripsReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenerateYearlyEndedTripsReportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenerateYearlyEndedTripsReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateYearlyEndedTripsReportRequest.Merge(m, src)
}
func (m *GenerateYearlyEndedTripsReportRequest) XXX_Size() int {
	return m.Size()
}
func (m *GenerateYearlyEndedTripsReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateYearlyEndedTripsReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateYearlyEndedTripsReportRequest proto.InternalMessageInfo

func (m *GenerateYearlyEndedTripsReportRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GenerateYearlyEndedTripsReportRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GenerateYearlyEndedTripsReportRequest) GetYears() uint32 {
	if m != nil {
		return m.Years
	}
	return 0
}

type GenerateYearlyEndedTripsReportResponse struct {
	Reports []*ReportTrip `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
}

func (m *GenerateYearlyEndedTripsReportResponse) Reset() {
	*m = GenerateYearlyEndedTripsReportResponse{}
}
func (*GenerateYearlyEndedTripsReportResponse) ProtoMessage() {}
func (*GenerateYearlyEndedTripsReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{37}
}
func (m *GenerateYearlyEndedTripsReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenerateYearlyEndedTripsReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenerateYearlyEndedTripsReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenerateYearlyEndedTripsReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateYearlyEndedTripsReportResponse.Merge(m, src)
}
func (m *GenerateYearlyEndedTripsReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *GenerateYearlyEndedTripsReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateYearlyEndedTripsReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateYearlyEndedTripsReportResponse proto.InternalMessageInfo

func (m *GenerateYearlyEndedTripsReportResponse) GetReports() []*ReportTrip {
	if m != nil {
		return m.Reports
	}
	return nil
}

type GenerateIncomingTripsReportRequest struct {
	Limit  uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Weeks  uint32 `protobuf:"varint,10,opt,name=weeks,proto3" json:"weeks,omitempty"`
}

func (m *GenerateIncomingTripsReportRequest) Reset()      { *m = GenerateIncomingTripsReportRequest{} }
func (*GenerateIncomingTripsReportRequest) ProtoMessage() {}
func (*GenerateIncomingTripsReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{38}
}
func (m *GenerateIncomingTripsReportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenerateIncomingTripsReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenerateIncomingTripsReportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenerateIncomingTripsReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateIncomingTripsReportRequest.Merge(m, src)
}
func (m *GenerateIncomingTripsReportRequest) XXX_Size() int {
	return m.Size()
}
func (m *GenerateIncomingTripsReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateIncomingTripsReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateIncomingTripsReportRequest proto.InternalMessageInfo

func (m *GenerateIncomingTripsReportRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GenerateIncomingTripsReportRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GenerateIncomingTripsReportRequest) GetWeeks() uint32 {
	if m != nil {
		return m.Weeks
	}
	return 0
}

type GenerateIncomingTripsReportResponse struct {
	Report *ReportTrip `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
}

func (m *GenerateIncomingTripsReportResponse) Reset()      { *m = GenerateIncomingTripsReportResponse{} }
func (*GenerateIncomingTripsReportResponse) ProtoMessage() {}
func (*GenerateIncomingTripsReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_614a4be5fd9deed0, []int{39}
}
func (m *GenerateIncomingTripsReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenerateIncomingTripsReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenerateIncomingTripsReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenerateIncomingTripsReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateIncomingTripsReportResponse.Merge(m, src)
}
func (m *GenerateIncomingTripsReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *GenerateIncomingTripsReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateIncomingTripsReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateIncomingTripsReportResponse proto.InternalMessageInfo

func (m *GenerateIncomingTripsReportResponse) GetReport() *ReportTrip {
	if m != nil {
		return m.Report
	}
	return nil
}

func init() {
	proto.RegisterType((*AddDiveMasterRequest)(nil), "agency.AddDiveMasterRequest")
	proto.RegisterType((*AddStaffRequest)(nil), "agency.AddStaffRequest")
	proto.RegisterType((*AddTripTemplateRequest)(nil), "agency.AddTripTemplateRequest")
	proto.RegisterType((*AddTripRequest)(nil), "agency.AddTripRequest")
	proto.RegisterType((*AddDivingBoatRequest)(nil), "agency.AddDivingBoatRequest")
	proto.RegisterType((*AddHotelRequest)(nil), "agency.AddHotelRequest")
	proto.RegisterType((*AddLiveaboardRequest)(nil), "agency.AddLiveaboardRequest")
	proto.RegisterType((*ListBoatsRequest)(nil), "agency.ListBoatsRequest")
	proto.RegisterType((*ListBoatsResponse)(nil), "agency.ListBoatsResponse")
	proto.RegisterType((*ListDiveMastersRequest)(nil), "agency.ListDiveMastersRequest")
	proto.RegisterType((*ListDiveMastersResponse)(nil), "agency.ListDiveMastersResponse")
	proto.RegisterType((*ListHotelsRequest)(nil), "agency.ListHotelsRequest")
	proto.RegisterType((*ListHotelsResponse)(nil), "agency.ListHotelsResponse")
	proto.RegisterType((*ListLiveaboardsRequest)(nil), "agency.ListLiveaboardsRequest")
	proto.RegisterType((*ListLiveaboardsResponse)(nil), "agency.ListLiveaboardsResponse")
	proto.RegisterType((*ListStaffsRequest)(nil), "agency.ListStaffsRequest")
	proto.RegisterType((*ListStaffsResponse)(nil), "agency.ListStaffsResponse")
	proto.RegisterType((*ListTripTemplatesRequest)(nil), "agency.ListTripTemplatesRequest")
	proto.RegisterType((*ListTripTemplatesResponse)(nil), "agency.ListTripTemplatesResponse")
	proto.RegisterType((*ListTripsRequest)(nil), "agency.ListTripsRequest")
	proto.RegisterType((*ListTripsResponse)(nil), "agency.ListTripsResponse")
	proto.RegisterType((*ListTripsWithTemplatesRequest)(nil), "agency.ListTripsWithTemplatesRequest")
	proto.RegisterType((*ListTripsWithTemplatesResponse)(nil), "agency.ListTripsWithTemplatesResponse")
	proto.RegisterType((*ListRoomTypesRequest)(nil), "agency.ListRoomTypesRequest")
	proto.RegisterType((*ListRoomTypesResponse)(nil), "agency.ListRoomTypesResponse")
	proto.RegisterType((*SearchTripsOptions)(nil), "agency.SearchTripsOptions")
	proto.RegisterType((*SearchTripsRequest)(nil), "agency.SearchTripsRequest")
	proto.RegisterType((*SearchTripsResponse)(nil), "agency.SearchTripsResponse")
	proto.RegisterType((*UpdateTripRequest)(nil), "agency.UpdateTripRequest")
	proto.RegisterType((*UpdateHotelRequest)(nil), "agency.UpdateHotelRequest")
	proto.RegisterType((*UpdateLiveaboardRequest)(nil), "agency.UpdateLiveaboardRequest")
	proto.RegisterType((*UpdateBoatRequest)(nil), "agency.UpdateBoatRequest")
	proto.RegisterType((*UpdateDiveMasterRequest)(nil), "agency.UpdateDiveMasterRequest")
	proto.RegisterType((*UpdateStaffRequest)(nil), "agency.UpdateStaffRequest")
	proto.RegisterType((*GenerateCurrentTripsReportRequest)(nil), "agency.GenerateCurrentTripsReportRequest")
	proto.RegisterType((*GenerateCurrentTripsReportResponse)(nil), "agency.GenerateCurrentTripsReportResponse")
	proto.RegisterType((*GenerateYearlyEndedTripsReportRequest)(nil), "agency.GenerateYearlyEndedTripsReportRequest")
	proto.RegisterType((*GenerateYearlyEndedTripsReportResponse)(nil), "agency.GenerateYearlyEndedTripsReportResponse")
	proto.RegisterType((*GenerateIncomingTripsReportRequest)(nil), "agency.GenerateIncomingTripsReportRequest")
	proto.RegisterType((*GenerateIncomingTripsReportResponse)(nil), "agency.GenerateIncomingTripsReportResponse")
}

func init() { proto.RegisterFile("agency.proto", fileDescriptor_614a4be5fd9deed0) }

var fileDescriptor_614a4be5fd9deed0 = []byte{
	// 1462 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcb, 0x72, 0x1b, 0x45,
	0x17, 0xd6, 0x38, 0x8a, 0x2f, 0xc7, 0x76, 0x1c, 0x77, 0xf4, 0xfb, 0x32, 0xfe, 0x33, 0x76, 0x86,
	0x4a, 0x2a, 0x21, 0x89, 0x1c, 0x42, 0xa8, 0x0a, 0xb0, 0x08, 0x16, 0x31, 0xd8, 0x60, 0x13, 0x50,
	0x9c, 0xa2, 0xc8, 0x46, 0x35, 0xd6, 0xb4, 0xe4, 0xa9, 0x48, 0xd3, 0xc3, 0x4c, 0xcb, 0xa0, 0x1d,
	0xbc, 0x00, 0x95, 0x27, 0x60, 0xcd, 0x1b, 0xf0, 0x0a, 0x2c, 0xb3, 0xcc, 0x0e, 0x22, 0x6f, 0x58,
	0xe6, 0x11, 0xa8, 0xbe, 0xcd, 0x4d, 0x33, 0xd2, 0x20, 0xb3, 0x9b, 0xee, 0x3e, 0xe7, 0xeb, 0xaf,
	0xbf, 0x3e, 0x73, 0xfa, 0x1c, 0x58, 0xb0, 0xda, 0xd8, 0x6d, 0xf6, 0xab, 0x9e, 0x4f, 0x28, 0x41,
	0xd3, 0x62, 0xa4, 0xcf, 0x77, 0x89, 0x8d, 0x3b, 0x62, 0x52, 0xdf, 0x68, 0x13, 0xd2, 0xee, 0xe0,
	0x6d, 0x3e, 0x3a, 0xee, 0xb5, 0xb6, 0x71, 0xd7, 0xa3, 0xd2, 0x43, 0xdf, 0x4c, 0x2f, 0x52, 0xa7,
	0x8b, 0x03, 0x6a, 0x75, 0x3d, 0x69, 0x70, 0xb7, 0xed, 0xd0, 0x93, 0xde, 0x71, 0xb5, 0x49, 0xba,
	0xdb, 0x6d, 0xd2, 0x26, 0x91, 0x25, 0x1b, 0xf1, 0x01, 0xff, 0x12, 0xe6, 0xe6, 0x17, 0x50, 0xd9,
	0xb1, 0xed, 0xc7, 0xce, 0x29, 0x3e, 0xb4, 0x02, 0x8a, 0xfd, 0x3a, 0xfe, 0xbe, 0x87, 0x03, 0x8a,
	0xee, 0xc3, 0xbc, 0xed, 0x9c, 0xe2, 0x46, 0x97, 0xcf, 0xae, 0x69, 0x5b, 0xda, 0xcd, 0xf9, 0xfb,
	0xcb, 0x55, 0xc1, 0x33, 0x66, 0x0e, 0x76, 0xf8, 0x6d, 0x7e, 0x00, 0x4b, 0x3b, 0xb6, 0xfd, 0x94,
	0x5a, 0xad, 0x96, 0x82, 0x31, 0xe1, 0x62, 0xc0, 0xc6, 0x12, 0x60, 0x41, 0x02, 0x08, 0x1b, 0xb1,
	0x64, 0x12, 0x58, 0xd9, 0xb1, 0xed, 0x23, 0xdf, 0xf1, 0x8e, 0x70, 0xd7, 0xeb, 0x58, 0x14, 0x2b,
	0xef, 0x87, 0xb0, 0x48, 0x7d, 0xc7, 0x6b, 0x50, 0x39, 0x2f, 0x51, 0xae, 0x48, 0x94, 0x84, 0xcb,
	0x02, 0x8d, 0x8d, 0xd0, 0x06, 0xcc, 0x09, 0x69, 0x1b, 0x8e, 0xbd, 0x36, 0xb5, 0xa5, 0xdd, 0x2c,
	0xd7, 0x67, 0xc5, 0xc4, 0xbe, 0x6d, 0xbe, 0x80, 0x4b, 0x72, 0x43, 0xb5, 0xd1, 0x26, 0x94, 0x99,
	0xbb, 0xc4, 0x9f, 0x8f, 0xe1, 0xd7, 0xf9, 0xc2, 0x30, 0x93, 0xa9, 0x82, 0x4c, 0xcc, 0xc7, 0x4a,
	0x60, 0xc7, 0x6d, 0xd7, 0x88, 0x45, 0xd5, 0x96, 0x77, 0xb8, 0xc0, 0x8e, 0xdb, 0x6e, 0x1c, 0x13,
	0x8b, 0xa6, 0x76, 0xe6, 0x86, 0x60, 0x87, 0x4e, 0x52, 0xda, 0x3d, 0x42, 0x71, 0x27, 0x26, 0xed,
	0x09, 0x1b, 0xa7, 0xa4, 0x15, 0x36, 0x62, 0xc9, 0xdc, 0xe7, 0x9b, 0x1f, 0x38, 0xa7, 0xd8, 0x3a,
	0x26, 0x96, 0x6f, 0x2b, 0xdf, 0xf7, 0x00, 0x3a, 0xe1, 0x64, 0xea, 0x72, 0x63, 0xd6, 0x31, 0x23,
	0xf3, 0x13, 0xb8, 0x7c, 0xe0, 0x04, 0x94, 0xb1, 0x09, 0x14, 0x4c, 0x05, 0x2e, 0x76, 0x9c, 0xae,
	0x23, 0xd8, 0x97, 0xeb, 0x62, 0x80, 0x56, 0x60, 0x9a, 0xb4, 0x5a, 0x01, 0xa6, 0x52, 0x78, 0x39,
	0x32, 0x1f, 0xc0, 0x72, 0x0c, 0x21, 0xf0, 0x88, 0x1b, 0x60, 0xa6, 0x7c, 0xde, 0xf9, 0xf9, 0x82,
	0xf9, 0x19, 0xac, 0x30, 0xaf, 0x28, 0xe4, 0x26, 0xdc, 0xfd, 0x10, 0x56, 0x87, 0x70, 0x24, 0x87,
	0x49, 0x62, 0x7d, 0x47, 0x1c, 0x86, 0xab, 0x3d, 0x21, 0xa3, 0x87, 0x80, 0xe2, 0x10, 0x92, 0x4c,
	0x91, 0x6b, 0x95, 0x9a, 0x44, 0x37, 0x35, 0x21, 0x83, 0x03, 0xa1, 0x49, 0x02, 0x47, 0xd2, 0x98,
	0x20, 0x42, 0xa4, 0x24, 0xfc, 0xdf, 0x3e, 0x9f, 0x24, 0x0a, 0x22, 0x92, 0x64, 0x6c, 0x12, 0xd9,
	0x83, 0x35, 0xe6, 0x19, 0xff, 0x11, 0x27, 0x16, 0x65, 0x3d, 0x03, 0x49, 0x52, 0xd9, 0x86, 0xd9,
	0x22, 0xc9, 0x28, 0x34, 0x52, 0xbf, 0x0d, 0x5b, 0x3d, 0xdf, 0x6f, 0x23, 0x11, 0xa2, 0xdf, 0x66,
	0x64, 0xc2, 0x32, 0x0f, 0xe1, 0x6a, 0xe8, 0xf5, 0xad, 0x43, 0x4f, 0xce, 0x29, 0xca, 0x21, 0x18,
	0x79, 0x70, 0x92, 0xd1, 0xed, 0x04, 0xa3, 0xd5, 0x18, 0xa3, 0xb8, 0xbd, 0x64, 0xf7, 0x8b, 0x06,
	0x15, 0x86, 0x57, 0x27, 0xa4, 0x7b, 0xd4, 0xf7, 0x22, 0x56, 0x1b, 0x30, 0xcb, 0x43, 0x9c, 0xa5,
	0x6d, 0x4e, 0x6c, 0xaf, 0x54, 0x9f, 0xe1, 0x33, 0xfb, 0x36, 0xba, 0x0e, 0x8b, 0x51, 0xb8, 0x31,
	0x0b, 0x90, 0x16, 0x0b, 0xd1, 0xf4, 0xbe, 0x1d, 0x9d, 0xac, 0x92, 0x7d, 0xb2, 0xf5, 0xf8, 0xc9,
	0x6a, 0x65, 0x98, 0x72, 0x6c, 0x73, 0x17, 0xfe, 0x97, 0xe2, 0x23, 0x8f, 0x75, 0x07, 0xe6, 0x7c,
	0x42, 0xba, 0x0d, 0xda, 0xf7, 0xd4, 0x8d, 0x2f, 0xc9, 0xb3, 0x29, 0xe3, 0xfa, 0xac, 0x2f, 0xbf,
	0xcc, 0xdf, 0xa7, 0x00, 0x3d, 0xc5, 0x96, 0xdf, 0x3c, 0xe1, 0x4a, 0x3d, 0xf1, 0xa8, 0x43, 0xdc,
	0x00, 0xe9, 0x30, 0xd3, 0x24, 0x3d, 0x97, 0xfa, 0x7d, 0x0e, 0x31, 0xc7, 0x0e, 0x25, 0x27, 0x50,
	0x05, 0xca, 0x4d, 0x87, 0xf6, 0xb9, 0xde, 0x6c, 0x81, 0x8f, 0xd0, 0x1a, 0x4c, 0xfb, 0xb8, 0xed,
	0x10, 0x77, 0xed, 0x82, 0x9c, 0x97, 0x63, 0x76, 0x0e, 0x96, 0x86, 0xfc, 0x80, 0x9f, 0x7e, 0xb1,
	0x2e, 0x47, 0x8c, 0xa8, 0x78, 0xa1, 0x18, 0xd1, 0xa5, 0x2d, 0xed, 0xe6, 0xa5, 0x90, 0x28, 0x0f,
	0x4d, 0x4e, 0x94, 0xca, 0x2f, 0xf4, 0x08, 0x20, 0xa0, 0x96, 0x4f, 0x1b, 0x36, 0x8b, 0xe4, 0x0a,
	0x3f, 0x97, 0x5e, 0x15, 0xb5, 0x45, 0x55, 0x55, 0x0c, 0xd5, 0x23, 0x55, 0x5b, 0xd4, 0xca, 0x2f,
	0xff, 0xdc, 0xd4, 0xea, 0x73, 0xdc, 0xe7, 0x31, 0x7b, 0x60, 0x3f, 0x86, 0x59, 0xec, 0xda, 0xc2,
	0xdd, 0x28, 0xe8, 0x3e, 0x83, 0x5d, 0x9b, 0x39, 0xd7, 0x96, 0x61, 0xa9, 0x43, 0x9a, 0x16, 0x13,
	0xa7, 0xd1, 0x72, 0x3a, 0x2c, 0x9f, 0xbe, 0xd4, 0x12, 0xca, 0xa9, 0x78, 0x38, 0x80, 0x4a, 0xc0,
	0x67, 0x1b, 0x8c, 0x7a, 0xd0, 0x20, 0x42, 0x51, 0x79, 0x13, 0x7a, 0x55, 0x56, 0x53, 0xc3, 0x9a,
	0xd7, 0x51, 0x30, 0x7c, 0x0f, 0x61, 0x64, 0x4c, 0x65, 0x47, 0xc6, 0x85, 0x44, 0xcc, 0xd7, 0xe0,
	0x4a, 0x82, 0xd1, 0x24, 0x81, 0xfe, 0x00, 0x96, 0x9f, 0x79, 0x4c, 0xa4, 0xac, 0x6a, 0x03, 0xf2,
	0x7e, 0xde, 0x87, 0x80, 0x84, 0x57, 0xf6, 0x83, 0x0f, 0xf9, 0x2f, 0xc3, 0x01, 0xac, 0x0a, 0xcf,
	0x71, 0x6f, 0x3e, 0x14, 0xc9, 0xe8, 0x21, 0xfb, 0x78, 0xe1, 0xa2, 0x5e, 0x6c, 0xc8, 0x7b, 0xb1,
	0x0f, 0x15, 0x87, 0xb1, 0x55, 0x25, 0x14, 0x79, 0x69, 0x43, 0x31, 0xb2, 0x0b, 0x4b, 0xc8, 0x7f,
	0x13, 0xbe, 0x81, 0x6b, 0x9f, 0x63, 0x17, 0xfb, 0x16, 0xc5, 0x9f, 0xf6, 0x7c, 0x1f, 0xbb, 0x2a,
	0x89, 0x7a, 0xc4, 0xa7, 0x93, 0xe5, 0xc1, 0x27, 0x60, 0x8e, 0x82, 0x94, 0x21, 0x72, 0x8b, 0xfd,
	0xbd, 0x6c, 0x26, 0xf5, 0x70, 0x0a, 0x33, 0x7e, 0xd1, 0xd2, 0xc0, 0x7c, 0x01, 0xd7, 0x15, 0xe0,
	0x77, 0xd8, 0xf2, 0x3b, 0xfd, 0x5d, 0xd7, 0xc6, 0xf6, 0x79, 0x79, 0x32, 0xeb, 0x3e, 0xb6, 0xc2,
	0x24, 0x21, 0x06, 0xe6, 0x33, 0xb8, 0x31, 0x6e, 0xb3, 0x30, 0xc8, 0x67, 0x04, 0x41, 0xf6, 0xab,
	0x5d, 0xc8, 0x3e, 0x82, 0xb2, 0x30, 0x4f, 0x22, 0x51, 0xf6, 0xdd, 0x26, 0xe9, 0x3a, 0x6e, 0xfb,
	0xbf, 0x38, 0xc0, 0x0f, 0x18, 0xbf, 0x08, 0x0f, 0xc0, 0x07, 0xe6, 0xd7, 0xf0, 0xce, 0xc8, 0x9d,
	0xfe, 0xb5, 0xfe, 0xf7, 0x7f, 0xbd, 0x0c, 0x8b, 0x3b, 0x3c, 0x89, 0x3c, 0xc5, 0xfe, 0xa9, 0xd3,
	0xc4, 0x68, 0x17, 0x16, 0x13, 0x1d, 0x11, 0xfa, 0xbf, 0xca, 0x32, 0x59, 0x8d, 0x92, 0xbe, 0x32,
	0x94, 0xf6, 0x76, 0x59, 0xbb, 0xc6, 0x12, 0xa4, 0x6a, 0x86, 0xd0, 0x6a, 0x0c, 0x21, 0x1e, 0xc5,
	0xb9, 0xce, 0xfb, 0xbc, 0xdc, 0x8f, 0x97, 0x14, 0xc8, 0x88, 0x61, 0x64, 0xf4, 0x4a, 0xb9, 0x50,
	0x1f, 0xc2, 0x8c, 0xf4, 0x40, 0x2b, 0x29, 0x88, 0x71, 0xae, 0xa1, 0x12, 0xb2, 0x0b, 0x49, 0x2b,
	0x91, 0xec, 0x68, 0xc6, 0x28, 0xc1, 0xd3, 0x54, 0x42, 0x89, 0x78, 0x72, 0x1b, 0xc3, 0x21, 0xca,
	0x4f, 0x09, 0x0e, 0x43, 0x49, 0x2e, 0x17, 0xe6, 0x11, 0x40, 0x94, 0x87, 0xd1, 0xba, 0xc2, 0x18,
	0xca, 0xcd, 0xb9, 0x00, 0x3b, 0x30, 0x1f, 0x4b, 0xc9, 0x48, 0x4f, 0x22, 0x14, 0x3a, 0xca, 0x97,
	0x70, 0x39, 0x9d, 0x9b, 0xd1, 0x66, 0x12, 0x67, 0x82, 0x03, 0xf1, 0x8b, 0x49, 0x1d, 0xa8, 0xc8,
	0xad, 0x84, 0x6c, 0x62, 0x91, 0x9e, 0x62, 0x53, 0x3c, 0xd8, 0x43, 0x75, 0x44, 0xbc, 0xa7, 0xd4,
	0x29, 0x14, 0xf2, 0x35, 0x98, 0x0b, 0xbb, 0x43, 0xb4, 0xa6, 0x00, 0xd2, 0x2d, 0xa7, 0xbe, 0x9e,
	0xb1, 0x22, 0xfe, 0xfa, 0x7b, 0x1a, 0x3a, 0x82, 0xa5, 0x54, 0x8f, 0x17, 0xfd, 0x36, 0xd9, 0x4d,
	0xa4, 0xbe, 0x99, 0xbb, 0x1e, 0xa2, 0xee, 0x02, 0x44, 0x7d, 0x1a, 0x4a, 0x10, 0x48, 0xb4, 0x7f,
	0xba, 0x9e, 0xb5, 0x94, 0x26, 0x17, 0x6b, 0xb6, 0x92, 0xe4, 0x86, 0xbb, 0xb9, 0x24, 0xb9, 0x8c,
	0x2e, 0x2d, 0x22, 0x27, 0x3a, 0xa6, 0x24, 0xb9, 0x44, 0x23, 0x96, 0x24, 0x97, 0x6c, 0xb0, 0xee,
	0x69, 0xe8, 0x79, 0xd4, 0x64, 0x84, 0xa5, 0x3d, 0xda, 0x8a, 0xbb, 0x64, 0x75, 0x56, 0xfa, 0xb5,
	0x11, 0x16, 0x21, 0xb6, 0xbc, 0x59, 0x9e, 0xa8, 0x93, 0x37, 0x1b, 0x2f, 0xf5, 0x92, 0x37, 0x9b,
	0x28, 0xb9, 0xee, 0x69, 0xc8, 0x11, 0x1d, 0xef, 0x70, 0xff, 0x81, 0xae, 0x0f, 0xb9, 0x65, 0xb5,
	0x3b, 0xfa, 0x8d, 0x71, 0x66, 0xe1, 0x56, 0x5f, 0xc1, 0x62, 0xa2, 0x15, 0x88, 0x32, 0x4e, 0x56,
	0xc7, 0xa2, 0x5f, 0xcd, 0x59, 0x0d, 0xf1, 0xf6, 0x60, 0x3e, 0x56, 0x46, 0xa2, 0xac, 0x9a, 0x55,
	0x61, 0x6d, 0x64, 0xae, 0x85, 0x48, 0x3d, 0xd0, 0xf3, 0x8b, 0x0f, 0x74, 0x4b, 0x39, 0x8f, 0xad,
	0x79, 0xf4, 0x77, 0x8b, 0x98, 0x86, 0xdb, 0xfe, 0xac, 0x81, 0x31, 0xba, 0x6c, 0x40, 0x77, 0xd3,
	0x80, 0x23, 0x6b, 0x19, 0xbd, 0x5a, 0xd4, 0x3c, 0xe4, 0xf0, 0x23, 0x6c, 0x8c, 0x78, 0xf8, 0xd1,
	0xd0, 0x81, 0xf2, 0xeb, 0x10, 0xfd, 0x76, 0x21, 0x5b, 0xb5, 0x73, 0xed, 0xa3, 0x57, 0x6f, 0x8c,
	0xd2, 0xeb, 0x37, 0x46, 0xe9, 0xed, 0x1b, 0x43, 0xfb, 0x69, 0x60, 0x68, 0xbf, 0x0d, 0x0c, 0xed,
	0x8f, 0x81, 0xa1, 0xbd, 0x1a, 0x18, 0xda, 0x5f, 0x03, 0x43, 0xfb, 0x7b, 0x60, 0x94, 0xde, 0x0e,
	0x0c, 0xed, 0xe5, 0x99, 0x51, 0x7a, 0x75, 0x66, 0x94, 0x5e, 0x9f, 0x19, 0xa5, 0xe7, 0xe5, 0xea,
	0xb6, 0x77, 0x7c, 0x3c, 0xcd, 0x73, 0xdc, 0xfb, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x19, 0x08,
	0xf7, 0xdd, 0xf5, 0x15, 0x00, 0x00,
}

func (this *AddDiveMasterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddDiveMasterRequest)
	if !ok {
		that2, ok := that.(AddDiveMasterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DiveMaster.Equal(that1.DiveMaster) {
		return false
	}
	return true
}
func (this *AddStaffRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddStaffRequest)
	if !ok {
		that2, ok := that.(AddStaffRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Staff.Equal(that1.Staff) {
		return false
	}
	return true
}
func (this *AddTripTemplateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddTripTemplateRequest)
	if !ok {
		that2, ok := that.(AddTripTemplateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TripTemplate.Equal(that1.TripTemplate) {
		return false
	}
	if this.AgencyId != that1.AgencyId {
		return false
	}
	return true
}
func (this *AddTripRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddTripRequest)
	if !ok {
		that2, ok := that.(AddTripRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Trip.Equal(that1.Trip) {
		return false
	}
	if !this.TripTemplate.Equal(that1.TripTemplate) {
		return false
	}
	return true
}
func (this *AddDivingBoatRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddDivingBoatRequest)
	if !ok {
		that2, ok := that.(AddDivingBoatRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DivingBoat.Equal(that1.DivingBoat) {
		return false
	}
	return true
}
func (this *AddHotelRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddHotelRequest)
	if !ok {
		that2, ok := that.(AddHotelRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Hotel.Equal(that1.Hotel) {
		return false
	}
	return true
}
func (this *AddLiveaboardRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddLiveaboardRequest)
	if !ok {
		that2, ok := that.(AddLiveaboardRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Liveaboard.Equal(that1.Liveaboard) {
		return false
	}
	return true
}
func (this *ListBoatsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListBoatsRequest)
	if !ok {
		that2, ok := that.(ListBoatsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	return true
}
func (this *ListBoatsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListBoatsResponse)
	if !ok {
		that2, ok := that.(ListBoatsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Boat.Equal(that1.Boat) {
		return false
	}
	return true
}
func (this *ListDiveMastersRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListDiveMastersRequest)
	if !ok {
		that2, ok := that.(ListDiveMastersRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	return true
}
func (this *ListDiveMastersResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListDiveMastersResponse)
	if !ok {
		that2, ok := that.(ListDiveMastersResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DiveMaster.Equal(that1.DiveMaster) {
		return false
	}
	return true
}
func (this *ListHotelsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListHotelsRequest)
	if !ok {
		that2, ok := that.(ListHotelsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	return true
}
func (this *ListHotelsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListHotelsResponse)
	if !ok {
		that2, ok := that.(ListHotelsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Hotel.Equal(that1.Hotel) {
		return false
	}
	return true
}
func (this *ListLiveaboardsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListLiveaboardsRequest)
	if !ok {
		that2, ok := that.(ListLiveaboardsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	return true
}
func (this *ListLiveaboardsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListLiveaboardsResponse)
	if !ok {
		that2, ok := that.(ListLiveaboardsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Liveaboard.Equal(that1.Liveaboard) {
		return false
	}
	return true
}
func (this *ListStaffsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListStaffsRequest)
	if !ok {
		that2, ok := that.(ListStaffsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	return true
}
func (this *ListStaffsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListStaffsResponse)
	if !ok {
		that2, ok := that.(ListStaffsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Staff.Equal(that1.Staff) {
		return false
	}
	return true
}
func (this *ListTripTemplatesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTripTemplatesRequest)
	if !ok {
		that2, ok := that.(ListTripTemplatesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	return true
}
func (this *ListTripTemplatesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTripTemplatesResponse)
	if !ok {
		that2, ok := that.(ListTripTemplatesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Template.Equal(that1.Template) {
		return false
	}
	return true
}
func (this *ListTripsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTripsRequest)
	if !ok {
		that2, ok := that.(ListTripsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	return true
}
func (this *ListTripsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTripsResponse)
	if !ok {
		that2, ok := that.(ListTripsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Trip.Equal(that1.Trip) {
		return false
	}
	return true
}
func (this *ListTripsWithTemplatesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTripsWithTemplatesRequest)
	if !ok {
		that2, ok := that.(ListTripsWithTemplatesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	return true
}
func (this *ListTripsWithTemplatesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTripsWithTemplatesResponse)
	if !ok {
		that2, ok := that.(ListTripsWithTemplatesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Trip.Equal(that1.Trip) {
		return false
	}
	return true
}
func (this *ListRoomTypesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRoomTypesRequest)
	if !ok {
		that2, ok := that.(ListRoomTypesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Id == nil {
		if this.Id != nil {
			return false
		}
	} else if this.Id == nil {
		return false
	} else if !this.Id.Equal(that1.Id) {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	return true
}
func (this *ListRoomTypesRequest_HotelId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRoomTypesRequest_HotelId)
	if !ok {
		that2, ok := that.(ListRoomTypesRequest_HotelId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HotelId != that1.HotelId {
		return false
	}
	return true
}
func (this *ListRoomTypesRequest_LiveaboardId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRoomTypesRequest_LiveaboardId)
	if !ok {
		that2, ok := that.(ListRoomTypesRequest_LiveaboardId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LiveaboardId != that1.LiveaboardId {
		return false
	}
	return true
}
func (this *ListRoomTypesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListRoomTypesResponse)
	if !ok {
		that2, ok := that.(ListRoomTypesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RoomType.Equal(that1.RoomType) {
		return false
	}
	return true
}
func (this *SearchTripsOptions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchTripsOptions)
	if !ok {
		that2, ok := that.(SearchTripsOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.LocationFilter == nil {
		if this.LocationFilter != nil {
			return false
		}
	} else if this.LocationFilter == nil {
		return false
	} else if !this.LocationFilter.Equal(that1.LocationFilter) {
		return false
	}
	if this.Divers != that1.Divers {
		return false
	}
	if this.TripType != that1.TripType {
		return false
	}
	if that1.StartDate == nil {
		if this.StartDate != nil {
			return false
		}
	} else if !this.StartDate.Equal(*that1.StartDate) {
		return false
	}
	if that1.EndDate == nil {
		if this.EndDate != nil {
			return false
		}
	} else if !this.EndDate.Equal(*that1.EndDate) {
		return false
	}
	return true
}
func (this *SearchTripsOptions_Country) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchTripsOptions_Country)
	if !ok {
		that2, ok := that.(SearchTripsOptions_Country)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	return true
}
func (this *SearchTripsOptions_City) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchTripsOptions_City)
	if !ok {
		that2, ok := that.(SearchTripsOptions_City)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.City != that1.City {
		return false
	}
	return true
}
func (this *SearchTripsOptions_Region) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchTripsOptions_Region)
	if !ok {
		that2, ok := that.(SearchTripsOptions_Region)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	return true
}
func (this *SearchTripsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchTripsRequest)
	if !ok {
		that2, ok := that.(SearchTripsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SearchTripsOptions.Equal(that1.SearchTripsOptions) {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	return true
}
func (this *SearchTripsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchTripsResponse)
	if !ok {
		that2, ok := that.(SearchTripsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Trip.Equal(that1.Trip) {
		return false
	}
	return true
}
func (this *UpdateTripRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateTripRequest)
	if !ok {
		that2, ok := that.(UpdateTripRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Trip.Equal(that1.Trip) {
		return false
	}
	return true
}
func (this *UpdateHotelRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateHotelRequest)
	if !ok {
		that2, ok := that.(UpdateHotelRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Hotel.Equal(that1.Hotel) {
		return false
	}
	return true
}
func (this *UpdateLiveaboardRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateLiveaboardRequest)
	if !ok {
		that2, ok := that.(UpdateLiveaboardRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Liveaboard.Equal(that1.Liveaboard) {
		return false
	}
	return true
}
func (this *UpdateBoatRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateBoatRequest)
	if !ok {
		that2, ok := that.(UpdateBoatRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Boat.Equal(that1.Boat) {
		return false
	}
	return true
}
func (this *UpdateDiveMasterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateDiveMasterRequest)
	if !ok {
		that2, ok := that.(UpdateDiveMasterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DiveMaster.Equal(that1.DiveMaster) {
		return false
	}
	return true
}
func (this *UpdateStaffRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateStaffRequest)
	if !ok {
		that2, ok := that.(UpdateStaffRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Staff.Equal(that1.Staff) {
		return false
	}
	return true
}
func (this *GenerateCurrentTripsReportRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenerateCurrentTripsReportRequest)
	if !ok {
		that2, ok := that.(GenerateCurrentTripsReportRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	return true
}
func (this *GenerateCurrentTripsReportResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenerateCurrentTripsReportResponse)
	if !ok {
		that2, ok := that.(GenerateCurrentTripsReportResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Report.Equal(that1.Report) {
		return false
	}
	return true
}
func (this *GenerateYearlyEndedTripsReportRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenerateYearlyEndedTripsReportRequest)
	if !ok {
		that2, ok := that.(GenerateYearlyEndedTripsReportRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	if this.Years != that1.Years {
		return false
	}
	return true
}
func (this *GenerateYearlyEndedTripsReportResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenerateYearlyEndedTripsReportResponse)
	if !ok {
		that2, ok := that.(GenerateYearlyEndedTripsReportResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Reports) != len(that1.Reports) {
		return false
	}
	for i := range this.Reports {
		if !this.Reports[i].Equal(that1.Reports[i]) {
			return false
		}
	}
	return true
}
func (this *GenerateIncomingTripsReportRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenerateIncomingTripsReportRequest)
	if !ok {
		that2, ok := that.(GenerateIncomingTripsReportRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	if this.Weeks != that1.Weeks {
		return false
	}
	return true
}
func (this *GenerateIncomingTripsReportResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenerateIncomingTripsReportResponse)
	if !ok {
		that2, ok := that.(GenerateIncomingTripsReportResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Report.Equal(that1.Report) {
		return false
	}
	return true
}
func (this *AddDiveMasterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.AddDiveMasterRequest{")
	if this.DiveMaster != nil {
		s = append(s, "DiveMaster: "+fmt.Sprintf("%#v", this.DiveMaster)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddStaffRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.AddStaffRequest{")
	if this.Staff != nil {
		s = append(s, "Staff: "+fmt.Sprintf("%#v", this.Staff)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddTripTemplateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.AddTripTemplateRequest{")
	if this.TripTemplate != nil {
		s = append(s, "TripTemplate: "+fmt.Sprintf("%#v", this.TripTemplate)+",\n")
	}
	s = append(s, "AgencyId: "+fmt.Sprintf("%#v", this.AgencyId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddTripRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.AddTripRequest{")
	if this.Trip != nil {
		s = append(s, "Trip: "+fmt.Sprintf("%#v", this.Trip)+",\n")
	}
	if this.TripTemplate != nil {
		s = append(s, "TripTemplate: "+fmt.Sprintf("%#v", this.TripTemplate)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddDivingBoatRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.AddDivingBoatRequest{")
	if this.DivingBoat != nil {
		s = append(s, "DivingBoat: "+fmt.Sprintf("%#v", this.DivingBoat)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddHotelRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.AddHotelRequest{")
	if this.Hotel != nil {
		s = append(s, "Hotel: "+fmt.Sprintf("%#v", this.Hotel)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddLiveaboardRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.AddLiveaboardRequest{")
	if this.Liveaboard != nil {
		s = append(s, "Liveaboard: "+fmt.Sprintf("%#v", this.Liveaboard)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListBoatsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ListBoatsRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListBoatsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ListBoatsResponse{")
	if this.Boat != nil {
		s = append(s, "Boat: "+fmt.Sprintf("%#v", this.Boat)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListDiveMastersRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ListDiveMastersRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListDiveMastersResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ListDiveMastersResponse{")
	if this.DiveMaster != nil {
		s = append(s, "DiveMaster: "+fmt.Sprintf("%#v", this.DiveMaster)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListHotelsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ListHotelsRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListHotelsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ListHotelsResponse{")
	if this.Hotel != nil {
		s = append(s, "Hotel: "+fmt.Sprintf("%#v", this.Hotel)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListLiveaboardsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ListLiveaboardsRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListLiveaboardsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ListLiveaboardsResponse{")
	if this.Liveaboard != nil {
		s = append(s, "Liveaboard: "+fmt.Sprintf("%#v", this.Liveaboard)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListStaffsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ListStaffsRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListStaffsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ListStaffsResponse{")
	if this.Staff != nil {
		s = append(s, "Staff: "+fmt.Sprintf("%#v", this.Staff)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListTripTemplatesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ListTripTemplatesRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListTripTemplatesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ListTripTemplatesResponse{")
	if this.Template != nil {
		s = append(s, "Template: "+fmt.Sprintf("%#v", this.Template)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListTripsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ListTripsRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListTripsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ListTripsResponse{")
	if this.Trip != nil {
		s = append(s, "Trip: "+fmt.Sprintf("%#v", this.Trip)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListTripsWithTemplatesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ListTripsWithTemplatesRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListTripsWithTemplatesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ListTripsWithTemplatesResponse{")
	if this.Trip != nil {
		s = append(s, "Trip: "+fmt.Sprintf("%#v", this.Trip)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListRoomTypesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.ListRoomTypesRequest{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListRoomTypesRequest_HotelId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.ListRoomTypesRequest_HotelId{` +
		`HotelId:` + fmt.Sprintf("%#v", this.HotelId) + `}`}, ", ")
	return s
}
func (this *ListRoomTypesRequest_LiveaboardId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.ListRoomTypesRequest_LiveaboardId{` +
		`LiveaboardId:` + fmt.Sprintf("%#v", this.LiveaboardId) + `}`}, ", ")
	return s
}
func (this *ListRoomTypesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ListRoomTypesResponse{")
	if this.RoomType != nil {
		s = append(s, "RoomType: "+fmt.Sprintf("%#v", this.RoomType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchTripsOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.SearchTripsOptions{")
	if this.LocationFilter != nil {
		s = append(s, "LocationFilter: "+fmt.Sprintf("%#v", this.LocationFilter)+",\n")
	}
	s = append(s, "Divers: "+fmt.Sprintf("%#v", this.Divers)+",\n")
	s = append(s, "TripType: "+fmt.Sprintf("%#v", this.TripType)+",\n")
	s = append(s, "StartDate: "+fmt.Sprintf("%#v", this.StartDate)+",\n")
	s = append(s, "EndDate: "+fmt.Sprintf("%#v", this.EndDate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchTripsOptions_Country) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.SearchTripsOptions_Country{` +
		`Country:` + fmt.Sprintf("%#v", this.Country) + `}`}, ", ")
	return s
}
func (this *SearchTripsOptions_City) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.SearchTripsOptions_City{` +
		`City:` + fmt.Sprintf("%#v", this.City) + `}`}, ", ")
	return s
}
func (this *SearchTripsOptions_Region) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.SearchTripsOptions_Region{` +
		`Region:` + fmt.Sprintf("%#v", this.Region) + `}`}, ", ")
	return s
}
func (this *SearchTripsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SearchTripsRequest{")
	if this.SearchTripsOptions != nil {
		s = append(s, "SearchTripsOptions: "+fmt.Sprintf("%#v", this.SearchTripsOptions)+",\n")
	}
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchTripsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SearchTripsResponse{")
	if this.Trip != nil {
		s = append(s, "Trip: "+fmt.Sprintf("%#v", this.Trip)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateTripRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpdateTripRequest{")
	if this.Trip != nil {
		s = append(s, "Trip: "+fmt.Sprintf("%#v", this.Trip)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateHotelRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpdateHotelRequest{")
	if this.Hotel != nil {
		s = append(s, "Hotel: "+fmt.Sprintf("%#v", this.Hotel)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateLiveaboardRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpdateLiveaboardRequest{")
	if this.Liveaboard != nil {
		s = append(s, "Liveaboard: "+fmt.Sprintf("%#v", this.Liveaboard)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateBoatRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpdateBoatRequest{")
	if this.Boat != nil {
		s = append(s, "Boat: "+fmt.Sprintf("%#v", this.Boat)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateDiveMasterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpdateDiveMasterRequest{")
	if this.DiveMaster != nil {
		s = append(s, "DiveMaster: "+fmt.Sprintf("%#v", this.DiveMaster)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateStaffRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpdateStaffRequest{")
	if this.Staff != nil {
		s = append(s, "Staff: "+fmt.Sprintf("%#v", this.Staff)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GenerateCurrentTripsReportRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.GenerateCurrentTripsReportRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GenerateCurrentTripsReportResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GenerateCurrentTripsReportResponse{")
	if this.Report != nil {
		s = append(s, "Report: "+fmt.Sprintf("%#v", this.Report)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GenerateYearlyEndedTripsReportRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.GenerateYearlyEndedTripsReportRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "Years: "+fmt.Sprintf("%#v", this.Years)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GenerateYearlyEndedTripsReportResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GenerateYearlyEndedTripsReportResponse{")
	if this.Reports != nil {
		s = append(s, "Reports: "+fmt.Sprintf("%#v", this.Reports)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GenerateIncomingTripsReportRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.GenerateIncomingTripsReportRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "Weeks: "+fmt.Sprintf("%#v", this.Weeks)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GenerateIncomingTripsReportResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GenerateIncomingTripsReportResponse{")
	if this.Report != nil {
		s = append(s, "Report: "+fmt.Sprintf("%#v", this.Report)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAgency(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AgencyServiceClient is the client API for AgencyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgencyServiceClient interface {
	AddDiveMaster(ctx context.Context, in *AddDiveMasterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddStaff(ctx context.Context, in *AddStaffRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddTripTemplate(ctx context.Context, in *AddTripTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddTrip(ctx context.Context, in *AddTripRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddDivingBoat(ctx context.Context, in *AddDivingBoatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddHotel(ctx context.Context, in *AddHotelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddLiveaboard(ctx context.Context, in *AddLiveaboardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateTrip(ctx context.Context, in *UpdateTripRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateHotel(ctx context.Context, in *UpdateHotelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateLiveaboard(ctx context.Context, in *UpdateLiveaboardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateBoat(ctx context.Context, in *UpdateBoatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateDiveMaster(ctx context.Context, in *UpdateDiveMasterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateStaff(ctx context.Context, in *UpdateStaffRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListBoats(ctx context.Context, in *ListBoatsRequest, opts ...grpc.CallOption) (AgencyService_ListBoatsClient, error)
	ListDiveMasters(ctx context.Context, in *ListDiveMastersRequest, opts ...grpc.CallOption) (AgencyService_ListDiveMastersClient, error)
	ListHotels(ctx context.Context, in *ListHotelsRequest, opts ...grpc.CallOption) (AgencyService_ListHotelsClient, error)
	ListLiveaboards(ctx context.Context, in *ListLiveaboardsRequest, opts ...grpc.CallOption) (AgencyService_ListLiveaboardsClient, error)
	ListStaffs(ctx context.Context, in *ListStaffsRequest, opts ...grpc.CallOption) (AgencyService_ListStaffsClient, error)
	ListTripTemplates(ctx context.Context, in *ListTripTemplatesRequest, opts ...grpc.CallOption) (AgencyService_ListTripTemplatesClient, error)
	ListTrips(ctx context.Context, in *ListTripsRequest, opts ...grpc.CallOption) (AgencyService_ListTripsClient, error)
	ListTripsWithTemplates(ctx context.Context, in *ListTripsWithTemplatesRequest, opts ...grpc.CallOption) (AgencyService_ListTripsWithTemplatesClient, error)
	ListRoomTypes(ctx context.Context, in *ListRoomTypesRequest, opts ...grpc.CallOption) (AgencyService_ListRoomTypesClient, error)
	SearchTrips(ctx context.Context, in *SearchTripsRequest, opts ...grpc.CallOption) (AgencyService_SearchTripsClient, error)
	GenerateCurrentTripsReport(ctx context.Context, in *GenerateCurrentTripsReportRequest, opts ...grpc.CallOption) (AgencyService_GenerateCurrentTripsReportClient, error)
	// GenerateYearlyEndedTripsReport generates reports for trips that have already ended
	GenerateYearlyEndedTripsReport(ctx context.Context, in *GenerateYearlyEndedTripsReportRequest, opts ...grpc.CallOption) (AgencyService_GenerateYearlyEndedTripsReportClient, error)
	GenerateIncomingTripsReport(ctx context.Context, in *GenerateIncomingTripsReportRequest, opts ...grpc.CallOption) (AgencyService_GenerateIncomingTripsReportClient, error)
}

type agencyServiceClient struct {
	cc *grpc.ClientConn
}

func NewAgencyServiceClient(cc *grpc.ClientConn) AgencyServiceClient {
	return &agencyServiceClient{cc}
}

func (c *agencyServiceClient) AddDiveMaster(ctx context.Context, in *AddDiveMasterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/AddDiveMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyServiceClient) AddStaff(ctx context.Context, in *AddStaffRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/AddStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyServiceClient) AddTripTemplate(ctx context.Context, in *AddTripTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/AddTripTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyServiceClient) AddTrip(ctx context.Context, in *AddTripRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/AddTrip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyServiceClient) AddDivingBoat(ctx context.Context, in *AddDivingBoatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/AddDivingBoat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyServiceClient) AddHotel(ctx context.Context, in *AddHotelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/AddHotel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyServiceClient) AddLiveaboard(ctx context.Context, in *AddLiveaboardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/AddLiveaboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyServiceClient) UpdateTrip(ctx context.Context, in *UpdateTripRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/UpdateTrip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyServiceClient) UpdateHotel(ctx context.Context, in *UpdateHotelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/UpdateHotel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyServiceClient) UpdateLiveaboard(ctx context.Context, in *UpdateLiveaboardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/UpdateLiveaboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyServiceClient) UpdateBoat(ctx context.Context, in *UpdateBoatRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/UpdateBoat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyServiceClient) UpdateDiveMaster(ctx context.Context, in *UpdateDiveMasterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/UpdateDiveMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyServiceClient) UpdateStaff(ctx context.Context, in *UpdateStaffRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/agency.AgencyService/UpdateStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agencyServiceClient) ListBoats(ctx context.Context, in *ListBoatsRequest, opts ...grpc.CallOption) (AgencyService_ListBoatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgencyService_serviceDesc.Streams[0], "/agency.AgencyService/ListBoats", opts...)
	if err != nil {
		return nil, err
	}
	x := &agencyServiceListBoatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgencyService_ListBoatsClient interface {
	Recv() (*ListBoatsResponse, error)
	grpc.ClientStream
}

type agencyServiceListBoatsClient struct {
	grpc.ClientStream
}

func (x *agencyServiceListBoatsClient) Recv() (*ListBoatsResponse, error) {
	m := new(ListBoatsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agencyServiceClient) ListDiveMasters(ctx context.Context, in *ListDiveMastersRequest, opts ...grpc.CallOption) (AgencyService_ListDiveMastersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgencyService_serviceDesc.Streams[1], "/agency.AgencyService/ListDiveMasters", opts...)
	if err != nil {
		return nil, err
	}
	x := &agencyServiceListDiveMastersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgencyService_ListDiveMastersClient interface {
	Recv() (*ListDiveMastersResponse, error)
	grpc.ClientStream
}

type agencyServiceListDiveMastersClient struct {
	grpc.ClientStream
}

func (x *agencyServiceListDiveMastersClient) Recv() (*ListDiveMastersResponse, error) {
	m := new(ListDiveMastersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agencyServiceClient) ListHotels(ctx context.Context, in *ListHotelsRequest, opts ...grpc.CallOption) (AgencyService_ListHotelsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgencyService_serviceDesc.Streams[2], "/agency.AgencyService/ListHotels", opts...)
	if err != nil {
		return nil, err
	}
	x := &agencyServiceListHotelsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgencyService_ListHotelsClient interface {
	Recv() (*ListHotelsResponse, error)
	grpc.ClientStream
}

type agencyServiceListHotelsClient struct {
	grpc.ClientStream
}

func (x *agencyServiceListHotelsClient) Recv() (*ListHotelsResponse, error) {
	m := new(ListHotelsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agencyServiceClient) ListLiveaboards(ctx context.Context, in *ListLiveaboardsRequest, opts ...grpc.CallOption) (AgencyService_ListLiveaboardsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgencyService_serviceDesc.Streams[3], "/agency.AgencyService/ListLiveaboards", opts...)
	if err != nil {
		return nil, err
	}
	x := &agencyServiceListLiveaboardsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgencyService_ListLiveaboardsClient interface {
	Recv() (*ListLiveaboardsResponse, error)
	grpc.ClientStream
}

type agencyServiceListLiveaboardsClient struct {
	grpc.ClientStream
}

func (x *agencyServiceListLiveaboardsClient) Recv() (*ListLiveaboardsResponse, error) {
	m := new(ListLiveaboardsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agencyServiceClient) ListStaffs(ctx context.Context, in *ListStaffsRequest, opts ...grpc.CallOption) (AgencyService_ListStaffsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgencyService_serviceDesc.Streams[4], "/agency.AgencyService/ListStaffs", opts...)
	if err != nil {
		return nil, err
	}
	x := &agencyServiceListStaffsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgencyService_ListStaffsClient interface {
	Recv() (*ListStaffsResponse, error)
	grpc.ClientStream
}

type agencyServiceListStaffsClient struct {
	grpc.ClientStream
}

func (x *agencyServiceListStaffsClient) Recv() (*ListStaffsResponse, error) {
	m := new(ListStaffsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agencyServiceClient) ListTripTemplates(ctx context.Context, in *ListTripTemplatesRequest, opts ...grpc.CallOption) (AgencyService_ListTripTemplatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgencyService_serviceDesc.Streams[5], "/agency.AgencyService/ListTripTemplates", opts...)
	if err != nil {
		return nil, err
	}
	x := &agencyServiceListTripTemplatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgencyService_ListTripTemplatesClient interface {
	Recv() (*ListTripTemplatesResponse, error)
	grpc.ClientStream
}

type agencyServiceListTripTemplatesClient struct {
	grpc.ClientStream
}

func (x *agencyServiceListTripTemplatesClient) Recv() (*ListTripTemplatesResponse, error) {
	m := new(ListTripTemplatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agencyServiceClient) ListTrips(ctx context.Context, in *ListTripsRequest, opts ...grpc.CallOption) (AgencyService_ListTripsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgencyService_serviceDesc.Streams[6], "/agency.AgencyService/ListTrips", opts...)
	if err != nil {
		return nil, err
	}
	x := &agencyServiceListTripsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgencyService_ListTripsClient interface {
	Recv() (*ListTripsResponse, error)
	grpc.ClientStream
}

type agencyServiceListTripsClient struct {
	grpc.ClientStream
}

func (x *agencyServiceListTripsClient) Recv() (*ListTripsResponse, error) {
	m := new(ListTripsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agencyServiceClient) ListTripsWithTemplates(ctx context.Context, in *ListTripsWithTemplatesRequest, opts ...grpc.CallOption) (AgencyService_ListTripsWithTemplatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgencyService_serviceDesc.Streams[7], "/agency.AgencyService/ListTripsWithTemplates", opts...)
	if err != nil {
		return nil, err
	}
	x := &agencyServiceListTripsWithTemplatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgencyService_ListTripsWithTemplatesClient interface {
	Recv() (*ListTripsWithTemplatesResponse, error)
	grpc.ClientStream
}

type agencyServiceListTripsWithTemplatesClient struct {
	grpc.ClientStream
}

func (x *agencyServiceListTripsWithTemplatesClient) Recv() (*ListTripsWithTemplatesResponse, error) {
	m := new(ListTripsWithTemplatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agencyServiceClient) ListRoomTypes(ctx context.Context, in *ListRoomTypesRequest, opts ...grpc.CallOption) (AgencyService_ListRoomTypesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgencyService_serviceDesc.Streams[8], "/agency.AgencyService/ListRoomTypes", opts...)
	if err != nil {
		return nil, err
	}
	x := &agencyServiceListRoomTypesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgencyService_ListRoomTypesClient interface {
	Recv() (*ListRoomTypesResponse, error)
	grpc.ClientStream
}

type agencyServiceListRoomTypesClient struct {
	grpc.ClientStream
}

func (x *agencyServiceListRoomTypesClient) Recv() (*ListRoomTypesResponse, error) {
	m := new(ListRoomTypesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agencyServiceClient) SearchTrips(ctx context.Context, in *SearchTripsRequest, opts ...grpc.CallOption) (AgencyService_SearchTripsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgencyService_serviceDesc.Streams[9], "/agency.AgencyService/SearchTrips", opts...)
	if err != nil {
		return nil, err
	}
	x := &agencyServiceSearchTripsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgencyService_SearchTripsClient interface {
	Recv() (*SearchTripsResponse, error)
	grpc.ClientStream
}

type agencyServiceSearchTripsClient struct {
	grpc.ClientStream
}

func (x *agencyServiceSearchTripsClient) Recv() (*SearchTripsResponse, error) {
	m := new(SearchTripsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agencyServiceClient) GenerateCurrentTripsReport(ctx context.Context, in *GenerateCurrentTripsReportRequest, opts ...grpc.CallOption) (AgencyService_GenerateCurrentTripsReportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgencyService_serviceDesc.Streams[10], "/agency.AgencyService/GenerateCurrentTripsReport", opts...)
	if err != nil {
		return nil, err
	}
	x := &agencyServiceGenerateCurrentTripsReportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgencyService_GenerateCurrentTripsReportClient interface {
	Recv() (*GenerateCurrentTripsReportResponse, error)
	grpc.ClientStream
}

type agencyServiceGenerateCurrentTripsReportClient struct {
	grpc.ClientStream
}

func (x *agencyServiceGenerateCurrentTripsReportClient) Recv() (*GenerateCurrentTripsReportResponse, error) {
	m := new(GenerateCurrentTripsReportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agencyServiceClient) GenerateYearlyEndedTripsReport(ctx context.Context, in *GenerateYearlyEndedTripsReportRequest, opts ...grpc.CallOption) (AgencyService_GenerateYearlyEndedTripsReportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgencyService_serviceDesc.Streams[11], "/agency.AgencyService/GenerateYearlyEndedTripsReport", opts...)
	if err != nil {
		return nil, err
	}
	x := &agencyServiceGenerateYearlyEndedTripsReportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgencyService_GenerateYearlyEndedTripsReportClient interface {
	Recv() (*GenerateYearlyEndedTripsReportResponse, error)
	grpc.ClientStream
}

type agencyServiceGenerateYearlyEndedTripsReportClient struct {
	grpc.ClientStream
}

func (x *agencyServiceGenerateYearlyEndedTripsReportClient) Recv() (*GenerateYearlyEndedTripsReportResponse, error) {
	m := new(GenerateYearlyEndedTripsReportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agencyServiceClient) GenerateIncomingTripsReport(ctx context.Context, in *GenerateIncomingTripsReportRequest, opts ...grpc.CallOption) (AgencyService_GenerateIncomingTripsReportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AgencyService_serviceDesc.Streams[12], "/agency.AgencyService/GenerateIncomingTripsReport", opts...)
	if err != nil {
		return nil, err
	}
	x := &agencyServiceGenerateIncomingTripsReportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgencyService_GenerateIncomingTripsReportClient interface {
	Recv() (*GenerateIncomingTripsReportResponse, error)
	grpc.ClientStream
}

type agencyServiceGenerateIncomingTripsReportClient struct {
	grpc.ClientStream
}

func (x *agencyServiceGenerateIncomingTripsReportClient) Recv() (*GenerateIncomingTripsReportResponse, error) {
	m := new(GenerateIncomingTripsReportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgencyServiceServer is the server API for AgencyService service.
type AgencyServiceServer interface {
	AddDiveMaster(context.Context, *AddDiveMasterRequest) (*emptypb.Empty, error)
	AddStaff(context.Context, *AddStaffRequest) (*emptypb.Empty, error)
	AddTripTemplate(context.Context, *AddTripTemplateRequest) (*emptypb.Empty, error)
	AddTrip(context.Context, *AddTripRequest) (*emptypb.Empty, error)
	AddDivingBoat(context.Context, *AddDivingBoatRequest) (*emptypb.Empty, error)
	AddHotel(context.Context, *AddHotelRequest) (*emptypb.Empty, error)
	AddLiveaboard(context.Context, *AddLiveaboardRequest) (*emptypb.Empty, error)
	UpdateTrip(context.Context, *UpdateTripRequest) (*emptypb.Empty, error)
	UpdateHotel(context.Context, *UpdateHotelRequest) (*emptypb.Empty, error)
	UpdateLiveaboard(context.Context, *UpdateLiveaboardRequest) (*emptypb.Empty, error)
	UpdateBoat(context.Context, *UpdateBoatRequest) (*emptypb.Empty, error)
	UpdateDiveMaster(context.Context, *UpdateDiveMasterRequest) (*emptypb.Empty, error)
	UpdateStaff(context.Context, *UpdateStaffRequest) (*emptypb.Empty, error)
	ListBoats(*ListBoatsRequest, AgencyService_ListBoatsServer) error
	ListDiveMasters(*ListDiveMastersRequest, AgencyService_ListDiveMastersServer) error
	ListHotels(*ListHotelsRequest, AgencyService_ListHotelsServer) error
	ListLiveaboards(*ListLiveaboardsRequest, AgencyService_ListLiveaboardsServer) error
	ListStaffs(*ListStaffsRequest, AgencyService_ListStaffsServer) error
	ListTripTemplates(*ListTripTemplatesRequest, AgencyService_ListTripTemplatesServer) error
	ListTrips(*ListTripsRequest, AgencyService_ListTripsServer) error
	ListTripsWithTemplates(*ListTripsWithTemplatesRequest, AgencyService_ListTripsWithTemplatesServer) error
	ListRoomTypes(*ListRoomTypesRequest, AgencyService_ListRoomTypesServer) error
	SearchTrips(*SearchTripsRequest, AgencyService_SearchTripsServer) error
	GenerateCurrentTripsReport(*GenerateCurrentTripsReportRequest, AgencyService_GenerateCurrentTripsReportServer) error
	// GenerateYearlyEndedTripsReport generates reports for trips that have already ended
	GenerateYearlyEndedTripsReport(*GenerateYearlyEndedTripsReportRequest, AgencyService_GenerateYearlyEndedTripsReportServer) error
	GenerateIncomingTripsReport(*GenerateIncomingTripsReportRequest, AgencyService_GenerateIncomingTripsReportServer) error
}

// UnimplementedAgencyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAgencyServiceServer struct {
}

func (*UnimplementedAgencyServiceServer) AddDiveMaster(ctx context.Context, req *AddDiveMasterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDiveMaster not implemented")
}
func (*UnimplementedAgencyServiceServer) AddStaff(ctx context.Context, req *AddStaffRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStaff not implemented")
}
func (*UnimplementedAgencyServiceServer) AddTripTemplate(ctx context.Context, req *AddTripTemplateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTripTemplate not implemented")
}
func (*UnimplementedAgencyServiceServer) AddTrip(ctx context.Context, req *AddTripRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTrip not implemented")
}
func (*UnimplementedAgencyServiceServer) AddDivingBoat(ctx context.Context, req *AddDivingBoatRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDivingBoat not implemented")
}
func (*UnimplementedAgencyServiceServer) AddHotel(ctx context.Context, req *AddHotelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHotel not implemented")
}
func (*UnimplementedAgencyServiceServer) AddLiveaboard(ctx context.Context, req *AddLiveaboardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLiveaboard not implemented")
}
func (*UnimplementedAgencyServiceServer) UpdateTrip(ctx context.Context, req *UpdateTripRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrip not implemented")
}
func (*UnimplementedAgencyServiceServer) UpdateHotel(ctx context.Context, req *UpdateHotelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHotel not implemented")
}
func (*UnimplementedAgencyServiceServer) UpdateLiveaboard(ctx context.Context, req *UpdateLiveaboardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLiveaboard not implemented")
}
func (*UnimplementedAgencyServiceServer) UpdateBoat(ctx context.Context, req *UpdateBoatRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBoat not implemented")
}
func (*UnimplementedAgencyServiceServer) UpdateDiveMaster(ctx context.Context, req *UpdateDiveMasterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDiveMaster not implemented")
}
func (*UnimplementedAgencyServiceServer) UpdateStaff(ctx context.Context, req *UpdateStaffRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStaff not implemented")
}
func (*UnimplementedAgencyServiceServer) ListBoats(req *ListBoatsRequest, srv AgencyService_ListBoatsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListBoats not implemented")
}
func (*UnimplementedAgencyServiceServer) ListDiveMasters(req *ListDiveMastersRequest, srv AgencyService_ListDiveMastersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListDiveMasters not implemented")
}
func (*UnimplementedAgencyServiceServer) ListHotels(req *ListHotelsRequest, srv AgencyService_ListHotelsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListHotels not implemented")
}
func (*UnimplementedAgencyServiceServer) ListLiveaboards(req *ListLiveaboardsRequest, srv AgencyService_ListLiveaboardsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListLiveaboards not implemented")
}
func (*UnimplementedAgencyServiceServer) ListStaffs(req *ListStaffsRequest, srv AgencyService_ListStaffsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListStaffs not implemented")
}
func (*UnimplementedAgencyServiceServer) ListTripTemplates(req *ListTripTemplatesRequest, srv AgencyService_ListTripTemplatesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTripTemplates not implemented")
}
func (*UnimplementedAgencyServiceServer) ListTrips(req *ListTripsRequest, srv AgencyService_ListTripsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTrips not implemented")
}
func (*UnimplementedAgencyServiceServer) ListTripsWithTemplates(req *ListTripsWithTemplatesRequest, srv AgencyService_ListTripsWithTemplatesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTripsWithTemplates not implemented")
}
func (*UnimplementedAgencyServiceServer) ListRoomTypes(req *ListRoomTypesRequest, srv AgencyService_ListRoomTypesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListRoomTypes not implemented")
}
func (*UnimplementedAgencyServiceServer) SearchTrips(req *SearchTripsRequest, srv AgencyService_SearchTripsServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchTrips not implemented")
}
func (*UnimplementedAgencyServiceServer) GenerateCurrentTripsReport(req *GenerateCurrentTripsReportRequest, srv AgencyService_GenerateCurrentTripsReportServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateCurrentTripsReport not implemented")
}
func (*UnimplementedAgencyServiceServer) GenerateYearlyEndedTripsReport(req *GenerateYearlyEndedTripsReportRequest, srv AgencyService_GenerateYearlyEndedTripsReportServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateYearlyEndedTripsReport not implemented")
}
func (*UnimplementedAgencyServiceServer) GenerateIncomingTripsReport(req *GenerateIncomingTripsReportRequest, srv AgencyService_GenerateIncomingTripsReportServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateIncomingTripsReport not implemented")
}

func RegisterAgencyServiceServer(s *grpc.Server, srv AgencyServiceServer) {
	s.RegisterService(&_AgencyService_serviceDesc, srv)
}

func _AgencyService_AddDiveMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDiveMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).AddDiveMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/AddDiveMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).AddDiveMaster(ctx, req.(*AddDiveMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgencyService_AddStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).AddStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/AddStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).AddStaff(ctx, req.(*AddStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgencyService_AddTripTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTripTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).AddTripTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/AddTripTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).AddTripTemplate(ctx, req.(*AddTripTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgencyService_AddTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).AddTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/AddTrip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).AddTrip(ctx, req.(*AddTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgencyService_AddDivingBoat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDivingBoatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).AddDivingBoat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/AddDivingBoat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).AddDivingBoat(ctx, req.(*AddDivingBoatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgencyService_AddHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).AddHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/AddHotel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).AddHotel(ctx, req.(*AddHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgencyService_AddLiveaboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLiveaboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).AddLiveaboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/AddLiveaboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).AddLiveaboard(ctx, req.(*AddLiveaboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgencyService_UpdateTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).UpdateTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/UpdateTrip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).UpdateTrip(ctx, req.(*UpdateTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgencyService_UpdateHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).UpdateHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/UpdateHotel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).UpdateHotel(ctx, req.(*UpdateHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgencyService_UpdateLiveaboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLiveaboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).UpdateLiveaboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/UpdateLiveaboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).UpdateLiveaboard(ctx, req.(*UpdateLiveaboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgencyService_UpdateBoat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBoatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).UpdateBoat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/UpdateBoat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).UpdateBoat(ctx, req.(*UpdateBoatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgencyService_UpdateDiveMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDiveMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).UpdateDiveMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/UpdateDiveMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).UpdateDiveMaster(ctx, req.(*UpdateDiveMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgencyService_UpdateStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgencyServiceServer).UpdateStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agency.AgencyService/UpdateStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgencyServiceServer).UpdateStaff(ctx, req.(*UpdateStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgencyService_ListBoats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListBoatsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgencyServiceServer).ListBoats(m, &agencyServiceListBoatsServer{stream})
}

type AgencyService_ListBoatsServer interface {
	Send(*ListBoatsResponse) error
	grpc.ServerStream
}

type agencyServiceListBoatsServer struct {
	grpc.ServerStream
}

func (x *agencyServiceListBoatsServer) Send(m *ListBoatsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgencyService_ListDiveMasters_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListDiveMastersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgencyServiceServer).ListDiveMasters(m, &agencyServiceListDiveMastersServer{stream})
}

type AgencyService_ListDiveMastersServer interface {
	Send(*ListDiveMastersResponse) error
	grpc.ServerStream
}

type agencyServiceListDiveMastersServer struct {
	grpc.ServerStream
}

func (x *agencyServiceListDiveMastersServer) Send(m *ListDiveMastersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgencyService_ListHotels_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListHotelsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgencyServiceServer).ListHotels(m, &agencyServiceListHotelsServer{stream})
}

type AgencyService_ListHotelsServer interface {
	Send(*ListHotelsResponse) error
	grpc.ServerStream
}

type agencyServiceListHotelsServer struct {
	grpc.ServerStream
}

func (x *agencyServiceListHotelsServer) Send(m *ListHotelsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgencyService_ListLiveaboards_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListLiveaboardsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgencyServiceServer).ListLiveaboards(m, &agencyServiceListLiveaboardsServer{stream})
}

type AgencyService_ListLiveaboardsServer interface {
	Send(*ListLiveaboardsResponse) error
	grpc.ServerStream
}

type agencyServiceListLiveaboardsServer struct {
	grpc.ServerStream
}

func (x *agencyServiceListLiveaboardsServer) Send(m *ListLiveaboardsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgencyService_ListStaffs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListStaffsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgencyServiceServer).ListStaffs(m, &agencyServiceListStaffsServer{stream})
}

type AgencyService_ListStaffsServer interface {
	Send(*ListStaffsResponse) error
	grpc.ServerStream
}

type agencyServiceListStaffsServer struct {
	grpc.ServerStream
}

func (x *agencyServiceListStaffsServer) Send(m *ListStaffsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgencyService_ListTripTemplates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTripTemplatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgencyServiceServer).ListTripTemplates(m, &agencyServiceListTripTemplatesServer{stream})
}

type AgencyService_ListTripTemplatesServer interface {
	Send(*ListTripTemplatesResponse) error
	grpc.ServerStream
}

type agencyServiceListTripTemplatesServer struct {
	grpc.ServerStream
}

func (x *agencyServiceListTripTemplatesServer) Send(m *ListTripTemplatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgencyService_ListTrips_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTripsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgencyServiceServer).ListTrips(m, &agencyServiceListTripsServer{stream})
}

type AgencyService_ListTripsServer interface {
	Send(*ListTripsResponse) error
	grpc.ServerStream
}

type agencyServiceListTripsServer struct {
	grpc.ServerStream
}

func (x *agencyServiceListTripsServer) Send(m *ListTripsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgencyService_ListTripsWithTemplates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTripsWithTemplatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgencyServiceServer).ListTripsWithTemplates(m, &agencyServiceListTripsWithTemplatesServer{stream})
}

type AgencyService_ListTripsWithTemplatesServer interface {
	Send(*ListTripsWithTemplatesResponse) error
	grpc.ServerStream
}

type agencyServiceListTripsWithTemplatesServer struct {
	grpc.ServerStream
}

func (x *agencyServiceListTripsWithTemplatesServer) Send(m *ListTripsWithTemplatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgencyService_ListRoomTypes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRoomTypesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgencyServiceServer).ListRoomTypes(m, &agencyServiceListRoomTypesServer{stream})
}

type AgencyService_ListRoomTypesServer interface {
	Send(*ListRoomTypesResponse) error
	grpc.ServerStream
}

type agencyServiceListRoomTypesServer struct {
	grpc.ServerStream
}

func (x *agencyServiceListRoomTypesServer) Send(m *ListRoomTypesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgencyService_SearchTrips_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchTripsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgencyServiceServer).SearchTrips(m, &agencyServiceSearchTripsServer{stream})
}

type AgencyService_SearchTripsServer interface {
	Send(*SearchTripsResponse) error
	grpc.ServerStream
}

type agencyServiceSearchTripsServer struct {
	grpc.ServerStream
}

func (x *agencyServiceSearchTripsServer) Send(m *SearchTripsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgencyService_GenerateCurrentTripsReport_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenerateCurrentTripsReportRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgencyServiceServer).GenerateCurrentTripsReport(m, &agencyServiceGenerateCurrentTripsReportServer{stream})
}

type AgencyService_GenerateCurrentTripsReportServer interface {
	Send(*GenerateCurrentTripsReportResponse) error
	grpc.ServerStream
}

type agencyServiceGenerateCurrentTripsReportServer struct {
	grpc.ServerStream
}

func (x *agencyServiceGenerateCurrentTripsReportServer) Send(m *GenerateCurrentTripsReportResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgencyService_GenerateYearlyEndedTripsReport_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenerateYearlyEndedTripsReportRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgencyServiceServer).GenerateYearlyEndedTripsReport(m, &agencyServiceGenerateYearlyEndedTripsReportServer{stream})
}

type AgencyService_GenerateYearlyEndedTripsReportServer interface {
	Send(*GenerateYearlyEndedTripsReportResponse) error
	grpc.ServerStream
}

type agencyServiceGenerateYearlyEndedTripsReportServer struct {
	grpc.ServerStream
}

func (x *agencyServiceGenerateYearlyEndedTripsReportServer) Send(m *GenerateYearlyEndedTripsReportResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgencyService_GenerateIncomingTripsReport_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenerateIncomingTripsReportRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgencyServiceServer).GenerateIncomingTripsReport(m, &agencyServiceGenerateIncomingTripsReportServer{stream})
}

type AgencyService_GenerateIncomingTripsReportServer interface {
	Send(*GenerateIncomingTripsReportResponse) error
	grpc.ServerStream
}

type agencyServiceGenerateIncomingTripsReportServer struct {
	grpc.ServerStream
}

func (x *agencyServiceGenerateIncomingTripsReportServer) Send(m *GenerateIncomingTripsReportResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _AgencyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agency.AgencyService",
	HandlerType: (*AgencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDiveMaster",
			Handler:    _AgencyService_AddDiveMaster_Handler,
		},
		{
			MethodName: "AddStaff",
			Handler:    _AgencyService_AddStaff_Handler,
		},
		{
			MethodName: "AddTripTemplate",
			Handler:    _AgencyService_AddTripTemplate_Handler,
		},
		{
			MethodName: "AddTrip",
			Handler:    _AgencyService_AddTrip_Handler,
		},
		{
			MethodName: "AddDivingBoat",
			Handler:    _AgencyService_AddDivingBoat_Handler,
		},
		{
			MethodName: "AddHotel",
			Handler:    _AgencyService_AddHotel_Handler,
		},
		{
			MethodName: "AddLiveaboard",
			Handler:    _AgencyService_AddLiveaboard_Handler,
		},
		{
			MethodName: "UpdateTrip",
			Handler:    _AgencyService_UpdateTrip_Handler,
		},
		{
			MethodName: "UpdateHotel",
			Handler:    _AgencyService_UpdateHotel_Handler,
		},
		{
			MethodName: "UpdateLiveaboard",
			Handler:    _AgencyService_UpdateLiveaboard_Handler,
		},
		{
			MethodName: "UpdateBoat",
			Handler:    _AgencyService_UpdateBoat_Handler,
		},
		{
			MethodName: "UpdateDiveMaster",
			Handler:    _AgencyService_UpdateDiveMaster_Handler,
		},
		{
			MethodName: "UpdateStaff",
			Handler:    _AgencyService_UpdateStaff_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListBoats",
			Handler:       _AgencyService_ListBoats_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListDiveMasters",
			Handler:       _AgencyService_ListDiveMasters_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListHotels",
			Handler:       _AgencyService_ListHotels_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListLiveaboards",
			Handler:       _AgencyService_ListLiveaboards_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListStaffs",
			Handler:       _AgencyService_ListStaffs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListTripTemplates",
			Handler:       _AgencyService_ListTripTemplates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListTrips",
			Handler:       _AgencyService_ListTrips_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListTripsWithTemplates",
			Handler:       _AgencyService_ListTripsWithTemplates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListRoomTypes",
			Handler:       _AgencyService_ListRoomTypes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchTrips",
			Handler:       _AgencyService_SearchTrips_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GenerateCurrentTripsReport",
			Handler:       _AgencyService_GenerateCurrentTripsReport_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GenerateYearlyEndedTripsReport",
			Handler:       _AgencyService_GenerateYearlyEndedTripsReport_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GenerateIncomingTripsReport",
			Handler:       _AgencyService_GenerateIncomingTripsReport_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "agency.proto",
}

func (m *AddDiveMasterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddDiveMasterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddDiveMasterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DiveMaster != nil {
		{
			size, err := m.DiveMaster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddStaffRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddStaffRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddStaffRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Staff != nil {
		{
			size, err := m.Staff.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddTripTemplateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddTripTemplateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddTripTemplateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AgencyId != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.AgencyId))
		i--
		dAtA[i] = 0x10
	}
	if m.TripTemplate != nil {
		{
			size, err := m.TripTemplate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddTripRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddTripRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddTripRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TripTemplate != nil {
		{
			size, err := m.TripTemplate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Trip != nil {
		{
			size, err := m.Trip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddDivingBoatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddDivingBoatRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddDivingBoatRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DivingBoat != nil {
		{
			size, err := m.DivingBoat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddHotelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddHotelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddHotelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hotel != nil {
		{
			size, err := m.Hotel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddLiveaboardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddLiveaboardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddLiveaboardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Liveaboard != nil {
		{
			size, err := m.Liveaboard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListBoatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBoatsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBoatsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListBoatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBoatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListBoatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Boat != nil {
		{
			size, err := m.Boat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListDiveMastersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDiveMastersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDiveMastersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListDiveMastersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDiveMastersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDiveMastersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DiveMaster != nil {
		{
			size, err := m.DiveMaster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListHotelsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListHotelsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListHotelsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListHotelsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListHotelsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListHotelsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hotel != nil {
		{
			size, err := m.Hotel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListLiveaboardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListLiveaboardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListLiveaboardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListLiveaboardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListLiveaboardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListLiveaboardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Liveaboard != nil {
		{
			size, err := m.Liveaboard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListStaffsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListStaffsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListStaffsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListStaffsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListStaffsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListStaffsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Staff != nil {
		{
			size, err := m.Staff.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTripTemplatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTripTemplatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTripTemplatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListTripTemplatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTripTemplatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTripTemplatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Template != nil {
		{
			size, err := m.Template.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTripsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTripsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTripsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListTripsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTripsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTripsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Trip != nil {
		{
			size, err := m.Trip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTripsWithTemplatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTripsWithTemplatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTripsWithTemplatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListTripsWithTemplatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTripsWithTemplatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTripsWithTemplatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Trip != nil {
		{
			size, err := m.Trip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListRoomTypesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRoomTypesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRoomTypesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.Limit != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.Id != nil {
		{
			size := m.Id.Size()
			i -= size
			if _, err := m.Id.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListRoomTypesRequest_HotelId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRoomTypesRequest_HotelId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintAgency(dAtA, i, uint64(m.HotelId))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *ListRoomTypesRequest_LiveaboardId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRoomTypesRequest_LiveaboardId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintAgency(dAtA, i, uint64(m.LiveaboardId))
	i--
	dAtA[i] = 0x50
	return len(dAtA) - i, nil
}
func (m *ListRoomTypesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRoomTypesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRoomTypesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoomType != nil {
		{
			size, err := m.RoomType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchTripsOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchTripsOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchTripsOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndDate != nil {
		n18, err18 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.EndDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndDate):])
		if err18 != nil {
			return 0, err18
		}
		i -= n18
		i = encodeVarintAgency(dAtA, i, uint64(n18))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.StartDate != nil {
		n19, err19 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartDate):])
		if err19 != nil {
			return 0, err19
		}
		i -= n19
		i = encodeVarintAgency(dAtA, i, uint64(n19))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.TripType != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.TripType))
		i--
		dAtA[i] = 0x78
	}
	if m.Divers != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Divers))
		i--
		dAtA[i] = 0x50
	}
	if m.LocationFilter != nil {
		{
			size := m.LocationFilter.Size()
			i -= size
			if _, err := m.LocationFilter.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SearchTripsOptions_Country) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchTripsOptions_Country) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Country)
	copy(dAtA[i:], m.Country)
	i = encodeVarintAgency(dAtA, i, uint64(len(m.Country)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *SearchTripsOptions_City) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchTripsOptions_City) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.City)
	copy(dAtA[i:], m.City)
	i = encodeVarintAgency(dAtA, i, uint64(len(m.City)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *SearchTripsOptions_Region) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchTripsOptions_Region) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Region)
	copy(dAtA[i:], m.Region)
	i = encodeVarintAgency(dAtA, i, uint64(len(m.Region)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *SearchTripsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchTripsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchTripsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.SearchTripsOptions != nil {
		{
			size, err := m.SearchTripsOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchTripsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchTripsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchTripsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Trip != nil {
		{
			size, err := m.Trip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTripRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTripRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTripRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Trip != nil {
		{
			size, err := m.Trip.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}

func (m *UpdateHotelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateHotelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateHotelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hotel != nil {
		{
			size, err := m.Hotel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}

func (m *UpdateLiveaboardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateLiveaboardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateLiveaboardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Liveaboard != nil {
		{
			size, err := m.Liveaboard.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBoatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBoatRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBoatRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Boat != nil {
		{
			size, err := m.Boat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDiveMasterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDiveMasterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDiveMasterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DiveMaster != nil {
		{
			size, err := m.DiveMaster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}

func (m *UpdateStaffRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateStaffRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateStaffRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Staff != nil {
		{
			size, err := m.Staff.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}

func (m *GenerateCurrentTripsReportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateCurrentTripsReportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenerateCurrentTripsReportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenerateCurrentTripsReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateCurrentTripsReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenerateCurrentTripsReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Report != nil {
		{
			size, err := m.Report.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenerateYearlyEndedTripsReportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateYearlyEndedTripsReportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenerateYearlyEndedTripsReportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Years != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Years))
		i--
		dAtA[i] = 0x50
	}
	if m.Offset != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenerateYearlyEndedTripsReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateYearlyEndedTripsReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenerateYearlyEndedTripsReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reports) > 0 {
		for iNdEx := len(m.Reports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgency(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GenerateIncomingTripsReportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateIncomingTripsReportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenerateIncomingTripsReportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Weeks != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Weeks))
		i--
		dAtA[i] = 0x50
	}
	if m.Offset != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintAgency(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenerateIncomingTripsReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateIncomingTripsReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenerateIncomingTripsReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Report != nil {
		{
			size, err := m.Report.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgency(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAgency(dAtA []byte, offset int, v uint64) int {
	offset -= sovAgency(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddDiveMasterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DiveMaster != nil {
		l = m.DiveMaster.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *AddStaffRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Staff != nil {
		l = m.Staff.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *AddTripTemplateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TripTemplate != nil {
		l = m.TripTemplate.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.AgencyId != 0 {
		n += 1 + sovAgency(uint64(m.AgencyId))
	}
	return n
}

func (m *AddTripRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Trip != nil {
		l = m.Trip.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.TripTemplate != nil {
		l = m.TripTemplate.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *AddDivingBoatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DivingBoat != nil {
		l = m.DivingBoat.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *AddHotelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hotel != nil {
		l = m.Hotel.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *AddLiveaboardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Liveaboard != nil {
		l = m.Liveaboard.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *ListBoatsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovAgency(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovAgency(uint64(m.Offset))
	}
	return n
}

func (m *ListBoatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Boat != nil {
		l = m.Boat.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *ListDiveMastersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovAgency(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovAgency(uint64(m.Offset))
	}
	return n
}

func (m *ListDiveMastersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DiveMaster != nil {
		l = m.DiveMaster.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *ListHotelsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovAgency(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovAgency(uint64(m.Offset))
	}
	return n
}

func (m *ListHotelsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hotel != nil {
		l = m.Hotel.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *ListLiveaboardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovAgency(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovAgency(uint64(m.Offset))
	}
	return n
}

func (m *ListLiveaboardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Liveaboard != nil {
		l = m.Liveaboard.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *ListStaffsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovAgency(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovAgency(uint64(m.Offset))
	}
	return n
}

func (m *ListStaffsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Staff != nil {
		l = m.Staff.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *ListTripTemplatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovAgency(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovAgency(uint64(m.Offset))
	}
	return n
}

func (m *ListTripTemplatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Template != nil {
		l = m.Template.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *ListTripsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovAgency(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovAgency(uint64(m.Offset))
	}
	return n
}

func (m *ListTripsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Trip != nil {
		l = m.Trip.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *ListTripsWithTemplatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovAgency(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovAgency(uint64(m.Offset))
	}
	return n
}

func (m *ListTripsWithTemplatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Trip != nil {
		l = m.Trip.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *ListRoomTypesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		n += m.Id.Size()
	}
	if m.Limit != 0 {
		n += 2 + sovAgency(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 2 + sovAgency(uint64(m.Offset))
	}
	return n
}

func (m *ListRoomTypesRequest_HotelId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovAgency(uint64(m.HotelId))
	return n
}
func (m *ListRoomTypesRequest_LiveaboardId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovAgency(uint64(m.LiveaboardId))
	return n
}
func (m *ListRoomTypesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomType != nil {
		l = m.RoomType.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *SearchTripsOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LocationFilter != nil {
		n += m.LocationFilter.Size()
	}
	if m.Divers != 0 {
		n += 1 + sovAgency(uint64(m.Divers))
	}
	if m.TripType != 0 {
		n += 1 + sovAgency(uint64(m.TripType))
	}
	if m.StartDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartDate)
		n += 2 + l + sovAgency(uint64(l))
	}
	if m.EndDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndDate)
		n += 2 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *SearchTripsOptions_Country) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Country)
	n += 1 + l + sovAgency(uint64(l))
	return n
}
func (m *SearchTripsOptions_City) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.City)
	n += 1 + l + sovAgency(uint64(l))
	return n
}
func (m *SearchTripsOptions_Region) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Region)
	n += 1 + l + sovAgency(uint64(l))
	return n
}
func (m *SearchTripsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SearchTripsOptions != nil {
		l = m.SearchTripsOptions.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovAgency(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovAgency(uint64(m.Offset))
	}
	return n
}

func (m *SearchTripsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Trip != nil {
		l = m.Trip.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *UpdateTripRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Trip != nil {
		l = m.Trip.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *UpdateHotelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hotel != nil {
		l = m.Hotel.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *UpdateLiveaboardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Liveaboard != nil {
		l = m.Liveaboard.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *UpdateBoatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Boat != nil {
		l = m.Boat.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *UpdateDiveMasterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DiveMaster != nil {
		l = m.DiveMaster.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *UpdateStaffRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Staff != nil {
		l = m.Staff.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *GenerateCurrentTripsReportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovAgency(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovAgency(uint64(m.Offset))
	}
	return n
}

func (m *GenerateCurrentTripsReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Report != nil {
		l = m.Report.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func (m *GenerateYearlyEndedTripsReportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovAgency(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovAgency(uint64(m.Offset))
	}
	if m.Years != 0 {
		n += 1 + sovAgency(uint64(m.Years))
	}
	return n
}

func (m *GenerateYearlyEndedTripsReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reports) > 0 {
		for _, e := range m.Reports {
			l = e.Size()
			n += 1 + l + sovAgency(uint64(l))
		}
	}
	return n
}

func (m *GenerateIncomingTripsReportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovAgency(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovAgency(uint64(m.Offset))
	}
	if m.Weeks != 0 {
		n += 1 + sovAgency(uint64(m.Weeks))
	}
	return n
}

func (m *GenerateIncomingTripsReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Report != nil {
		l = m.Report.Size()
		n += 1 + l + sovAgency(uint64(l))
	}
	return n
}

func sovAgency(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAgency(x uint64) (n int) {
	return sovAgency(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AddDiveMasterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddDiveMasterRequest{`,
		`DiveMaster:` + strings.Replace(fmt.Sprintf("%v", this.DiveMaster), "DiveMaster", "DiveMaster", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddStaffRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddStaffRequest{`,
		`Staff:` + strings.Replace(fmt.Sprintf("%v", this.Staff), "Staff", "Staff", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddTripTemplateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddTripTemplateRequest{`,
		`TripTemplate:` + strings.Replace(fmt.Sprintf("%v", this.TripTemplate), "TripTemplate", "TripTemplate", 1) + `,`,
		`AgencyId:` + fmt.Sprintf("%v", this.AgencyId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddTripRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddTripRequest{`,
		`Trip:` + strings.Replace(fmt.Sprintf("%v", this.Trip), "Trip", "Trip", 1) + `,`,
		`TripTemplate:` + strings.Replace(fmt.Sprintf("%v", this.TripTemplate), "TripTemplate", "TripTemplate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddDivingBoatRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddDivingBoatRequest{`,
		`DivingBoat:` + strings.Replace(fmt.Sprintf("%v", this.DivingBoat), "Boat", "Boat", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddHotelRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddHotelRequest{`,
		`Hotel:` + strings.Replace(fmt.Sprintf("%v", this.Hotel), "Hotel", "Hotel", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddLiveaboardRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddLiveaboardRequest{`,
		`Liveaboard:` + strings.Replace(fmt.Sprintf("%v", this.Liveaboard), "Liveaboard", "Liveaboard", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListBoatsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListBoatsRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListBoatsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListBoatsResponse{`,
		`Boat:` + strings.Replace(fmt.Sprintf("%v", this.Boat), "Boat", "Boat", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListDiveMastersRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListDiveMastersRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListDiveMastersResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListDiveMastersResponse{`,
		`DiveMaster:` + strings.Replace(fmt.Sprintf("%v", this.DiveMaster), "DiveMaster", "DiveMaster", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListHotelsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListHotelsRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListHotelsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListHotelsResponse{`,
		`Hotel:` + strings.Replace(fmt.Sprintf("%v", this.Hotel), "Hotel", "Hotel", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListLiveaboardsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListLiveaboardsRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListLiveaboardsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListLiveaboardsResponse{`,
		`Liveaboard:` + strings.Replace(fmt.Sprintf("%v", this.Liveaboard), "Liveaboard", "Liveaboard", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListStaffsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListStaffsRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListStaffsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListStaffsResponse{`,
		`Staff:` + strings.Replace(fmt.Sprintf("%v", this.Staff), "Staff", "Staff", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListTripTemplatesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListTripTemplatesRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListTripTemplatesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListTripTemplatesResponse{`,
		`Template:` + strings.Replace(fmt.Sprintf("%v", this.Template), "TripTemplate", "TripTemplate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListTripsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListTripsRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListTripsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListTripsResponse{`,
		`Trip:` + strings.Replace(fmt.Sprintf("%v", this.Trip), "Trip", "Trip", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListTripsWithTemplatesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListTripsWithTemplatesRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListTripsWithTemplatesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListTripsWithTemplatesResponse{`,
		`Trip:` + strings.Replace(fmt.Sprintf("%v", this.Trip), "TripWithTemplate", "TripWithTemplate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListRoomTypesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListRoomTypesRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListRoomTypesRequest_HotelId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListRoomTypesRequest_HotelId{`,
		`HotelId:` + fmt.Sprintf("%v", this.HotelId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListRoomTypesRequest_LiveaboardId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListRoomTypesRequest_LiveaboardId{`,
		`LiveaboardId:` + fmt.Sprintf("%v", this.LiveaboardId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListRoomTypesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListRoomTypesResponse{`,
		`RoomType:` + strings.Replace(fmt.Sprintf("%v", this.RoomType), "RoomType", "RoomType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchTripsOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchTripsOptions{`,
		`LocationFilter:` + fmt.Sprintf("%v", this.LocationFilter) + `,`,
		`Divers:` + fmt.Sprintf("%v", this.Divers) + `,`,
		`TripType:` + fmt.Sprintf("%v", this.TripType) + `,`,
		`StartDate:` + strings.Replace(fmt.Sprintf("%v", this.StartDate), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`EndDate:` + strings.Replace(fmt.Sprintf("%v", this.EndDate), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchTripsOptions_Country) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchTripsOptions_Country{`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchTripsOptions_City) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchTripsOptions_City{`,
		`City:` + fmt.Sprintf("%v", this.City) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchTripsOptions_Region) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchTripsOptions_Region{`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchTripsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchTripsRequest{`,
		`SearchTripsOptions:` + strings.Replace(this.SearchTripsOptions.String(), "SearchTripsOptions", "SearchTripsOptions", 1) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchTripsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchTripsResponse{`,
		`Trip:` + strings.Replace(fmt.Sprintf("%v", this.Trip), "TripWithTemplate", "TripWithTemplate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateTripRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateTripRequest{`,
		`Trip:` + strings.Replace(fmt.Sprintf("%v", this.Trip), "Trip", "Trip", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateHotelRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateHotelRequest{`,
		`Hotel:` + strings.Replace(fmt.Sprintf("%v", this.Hotel), "Hotel", "Hotel", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateLiveaboardRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateLiveaboardRequest{`,
		`Liveaboard:` + strings.Replace(fmt.Sprintf("%v", this.Liveaboard), "Liveaboard", "Liveaboard", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateBoatRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateBoatRequest{`,
		`Boat:` + strings.Replace(fmt.Sprintf("%v", this.Boat), "Boat", "Boat", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateDiveMasterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateDiveMasterRequest{`,
		`DiveMaster:` + strings.Replace(fmt.Sprintf("%v", this.DiveMaster), "DiveMaster", "DiveMaster", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateStaffRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateStaffRequest{`,
		`Staff:` + strings.Replace(fmt.Sprintf("%v", this.Staff), "Staff", "Staff", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenerateCurrentTripsReportRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenerateCurrentTripsReportRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenerateCurrentTripsReportResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenerateCurrentTripsReportResponse{`,
		`Report:` + strings.Replace(fmt.Sprintf("%v", this.Report), "ReportTrip", "ReportTrip", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenerateYearlyEndedTripsReportRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenerateYearlyEndedTripsReportRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`Years:` + fmt.Sprintf("%v", this.Years) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenerateYearlyEndedTripsReportResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForReports := "[]*ReportTrip{"
	for _, f := range this.Reports {
		repeatedStringForReports += strings.Replace(fmt.Sprintf("%v", f), "ReportTrip", "ReportTrip", 1) + ","
	}
	repeatedStringForReports += "}"
	s := strings.Join([]string{`&GenerateYearlyEndedTripsReportResponse{`,
		`Reports:` + repeatedStringForReports + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenerateIncomingTripsReportRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenerateIncomingTripsReportRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`Weeks:` + fmt.Sprintf("%v", this.Weeks) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenerateIncomingTripsReportResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenerateIncomingTripsReportResponse{`,
		`Report:` + strings.Replace(fmt.Sprintf("%v", this.Report), "ReportTrip", "ReportTrip", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAgency(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AddDiveMasterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddDiveMasterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddDiveMasterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiveMaster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DiveMaster == nil {
				m.DiveMaster = &DiveMaster{}
			}
			if err := m.DiveMaster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddStaffRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddStaffRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddStaffRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staff", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Staff == nil {
				m.Staff = &Staff{}
			}
			if err := m.Staff.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddTripTemplateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddTripTemplateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddTripTemplateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TripTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TripTemplate == nil {
				m.TripTemplate = &TripTemplate{}
			}
			if err := m.TripTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgencyId", wireType)
			}
			m.AgencyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgencyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddTripRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddTripRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddTripRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trip == nil {
				m.Trip = &Trip{}
			}
			if err := m.Trip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TripTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TripTemplate == nil {
				m.TripTemplate = &TripTemplate{}
			}
			if err := m.TripTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddDivingBoatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddDivingBoatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddDivingBoatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DivingBoat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DivingBoat == nil {
				m.DivingBoat = &Boat{}
			}
			if err := m.DivingBoat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddHotelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddHotelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddHotelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hotel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hotel == nil {
				m.Hotel = &Hotel{}
			}
			if err := m.Hotel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddLiveaboardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddLiveaboardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddLiveaboardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liveaboard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Liveaboard == nil {
				m.Liveaboard = &Liveaboard{}
			}
			if err := m.Liveaboard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBoatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBoatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBoatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBoatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBoatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBoatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Boat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Boat == nil {
				m.Boat = &Boat{}
			}
			if err := m.Boat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDiveMastersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDiveMastersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDiveMastersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDiveMastersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDiveMastersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDiveMastersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiveMaster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DiveMaster == nil {
				m.DiveMaster = &DiveMaster{}
			}
			if err := m.DiveMaster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListHotelsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListHotelsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListHotelsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListHotelsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListHotelsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListHotelsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hotel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hotel == nil {
				m.Hotel = &Hotel{}
			}
			if err := m.Hotel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListLiveaboardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListLiveaboardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListLiveaboardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListLiveaboardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListLiveaboardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListLiveaboardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liveaboard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Liveaboard == nil {
				m.Liveaboard = &Liveaboard{}
			}
			if err := m.Liveaboard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListStaffsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListStaffsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListStaffsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListStaffsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListStaffsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListStaffsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staff", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Staff == nil {
				m.Staff = &Staff{}
			}
			if err := m.Staff.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTripTemplatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTripTemplatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTripTemplatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTripTemplatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTripTemplatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTripTemplatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Template", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Template == nil {
				m.Template = &TripTemplate{}
			}
			if err := m.Template.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTripsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTripsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTripsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTripsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTripsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTripsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trip == nil {
				m.Trip = &Trip{}
			}
			if err := m.Trip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTripsWithTemplatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTripsWithTemplatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTripsWithTemplatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTripsWithTemplatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTripsWithTemplatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTripsWithTemplatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trip == nil {
				m.Trip = &TripWithTemplate{}
			}
			if err := m.Trip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRoomTypesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRoomTypesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRoomTypesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotelId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &ListRoomTypesRequest_HotelId{v}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveaboardId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &ListRoomTypesRequest_LiveaboardId{v}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRoomTypesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRoomTypesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRoomTypesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoomType == nil {
				m.RoomType = &RoomType{}
			}
			if err := m.RoomType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchTripsOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchTripsOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchTripsOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationFilter = &SearchTripsOptions_Country{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationFilter = &SearchTripsOptions_City{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationFilter = &SearchTripsOptions_Region{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Divers", wireType)
			}
			m.Divers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Divers |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TripType", wireType)
			}
			m.TripType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TripType |= TripType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartDate == nil {
				m.StartDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndDate == nil {
				m.EndDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.EndDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchTripsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchTripsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchTripsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchTripsOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchTripsOptions == nil {
				m.SearchTripsOptions = &SearchTripsOptions{}
			}
			if err := m.SearchTripsOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchTripsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchTripsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchTripsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trip == nil {
				m.Trip = &TripWithTemplate{}
			}
			if err := m.Trip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTripRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTripRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTripRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trip == nil {
				m.Trip = &Trip{}
			}
			if err := m.Trip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateHotelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateHotelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateHotelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hotel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hotel == nil {
				m.Hotel = &Hotel{}
			}
			if err := m.Hotel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateLiveaboardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateLiveaboardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateLiveaboardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liveaboard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Liveaboard == nil {
				m.Liveaboard = &Liveaboard{}
			}
			if err := m.Liveaboard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBoatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBoatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBoatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Boat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Boat == nil {
				m.Boat = &Boat{}
			}
			if err := m.Boat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDiveMasterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDiveMasterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDiveMasterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiveMaster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DiveMaster == nil {
				m.DiveMaster = &DiveMaster{}
			}
			if err := m.DiveMaster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateStaffRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateStaffRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateStaffRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staff", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Staff == nil {
				m.Staff = &Staff{}
			}
			if err := m.Staff.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateCurrentTripsReportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateCurrentTripsReportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateCurrentTripsReportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateCurrentTripsReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateCurrentTripsReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateCurrentTripsReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Report", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Report == nil {
				m.Report = &ReportTrip{}
			}
			if err := m.Report.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateYearlyEndedTripsReportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateYearlyEndedTripsReportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateYearlyEndedTripsReportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Years", wireType)
			}
			m.Years = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Years |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateYearlyEndedTripsReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateYearlyEndedTripsReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateYearlyEndedTripsReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reports = append(m.Reports, &ReportTrip{})
			if err := m.Reports[len(m.Reports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateIncomingTripsReportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateIncomingTripsReportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateIncomingTripsReportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weeks", wireType)
			}
			m.Weeks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weeks |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateIncomingTripsReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateIncomingTripsReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateIncomingTripsReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Report", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgency
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgency
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Report == nil {
				m.Report = &ReportTrip{}
			}
			if err := m.Report.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAgency(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAgency
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgency
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAgency
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAgency
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAgency
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAgency        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAgency          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAgency = fmt.Errorf("proto: unexpected end of group")
)
