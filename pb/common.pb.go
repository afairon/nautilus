// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common.proto

package pb

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Account type
type AccountType int32

const (
	ADMIN  AccountType = 0
	AGENCY AccountType = 1
	DIVER  AccountType = 2
)

var AccountType_name = map[int32]string{
	0: "ADMIN",
	1: "AGENCY",
	2: "DIVER",
}

var AccountType_value = map[string]int32{
	"ADMIN":  0,
	"AGENCY": 1,
	"DIVER":  2,
}

func (AccountType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}

// Gender
type GenderType int32

const (
	FEMALE GenderType = 0
	MALE   GenderType = 1
)

var GenderType_name = map[int32]string{
	0: "FEMALE",
	1: "MALE",
}

var GenderType_value = map[string]int32{
	"FEMALE": 0,
	"MALE":   1,
}

func (GenderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{1}
}

// Level
type LevelType int32

const (
	INSTRUCTOR          LevelType = 0
	MASTER              LevelType = 1
	RESCUE              LevelType = 2
	ADVANCED_OPEN_WATER LevelType = 3
	OPEN_WATER          LevelType = 4
)

var LevelType_name = map[int32]string{
	0: "INSTRUCTOR",
	1: "MASTER",
	2: "RESCUE",
	3: "ADVANCED_OPEN_WATER",
	4: "OPEN_WATER",
}

var LevelType_value = map[string]int32{
	"INSTRUCTOR":          0,
	"MASTER":              1,
	"RESCUE":              2,
	"ADVANCED_OPEN_WATER": 3,
	"OPEN_WATER":          4,
}

func (LevelType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{2}
}

// Trip type
type TripType int32

const (
	ONSHORE  TripType = 0
	OFFSHORE TripType = 1
)

var TripType_name = map[int32]string{
	0: "ONSHORE",
	1: "OFFSHORE",
}

var TripType_value = map[string]int32{
	"ONSHORE":  0,
	"OFFSHORE": 1,
}

func (TripType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{3}
}

// Address
type Address struct {
	AddresLine_1 string `protobuf:"bytes,1,opt,name=addres_line_1,json=addresLine1,proto3" json:"addres_line_1,omitempty"`
	AddresLine_2 string `protobuf:"bytes,10,opt,name=addres_line_2,json=addresLine2,proto3" json:"addres_line_2,omitempty"`
	City         string `protobuf:"bytes,20,opt,name=city,proto3" json:"city,omitempty"`
	Postcode     string `protobuf:"bytes,30,opt,name=postcode,proto3" json:"postcode,omitempty"`
	Region       string `protobuf:"bytes,40,opt,name=region,proto3" json:"region,omitempty"`
	Country      string `protobuf:"bytes,50,opt,name=country,proto3" json:"country,omitempty"`
}

func (m *Address) Reset()      { *m = Address{} }
func (*Address) ProtoMessage() {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Address.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return m.Size()
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetAddresLine_1() string {
	if m != nil {
		return m.AddresLine_1
	}
	return ""
}

func (m *Address) GetAddresLine_2() string {
	if m != nil {
		return m.AddresLine_2
	}
	return ""
}

func (m *Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Address) GetPostcode() string {
	if m != nil {
		return m.Postcode
	}
	return ""
}

func (m *Address) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Address) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

// File transfer
type FileTransfer struct {
	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	File     []byte `protobuf:"bytes,10,opt,name=file,proto3" json:"file,omitempty"`
}

func (m *FileTransfer) Reset()      { *m = FileTransfer{} }
func (*FileTransfer) ProtoMessage() {}
func (*FileTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{1}
}
func (m *FileTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileTransfer.Merge(m, src)
}
func (m *FileTransfer) XXX_Size() int {
	return m.Size()
}
func (m *FileTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_FileTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_FileTransfer proto.InternalMessageInfo

func (m *FileTransfer) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *FileTransfer) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

func init() {
	proto.RegisterEnum("common.AccountType", AccountType_name, AccountType_value)
	proto.RegisterEnum("common.GenderType", GenderType_name, GenderType_value)
	proto.RegisterEnum("common.LevelType", LevelType_name, LevelType_value)
	proto.RegisterEnum("common.TripType", TripType_name, TripType_value)
	proto.RegisterType((*Address)(nil), "common.Address")
	proto.RegisterType((*FileTransfer)(nil), "common.FileTransfer")
}

func init() { proto.RegisterFile("common.proto", fileDescriptor_555bd8c177793206) }

var fileDescriptor_555bd8c177793206 = []byte{
	// 421 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x41, 0x6b, 0x13, 0x41,
	0x1c, 0xc5, 0x67, 0x6a, 0xdc, 0x24, 0xff, 0x44, 0x59, 0x46, 0xd1, 0xc5, 0xc3, 0x20, 0x01, 0xa1,
	0xe4, 0xd0, 0xd2, 0x78, 0xf3, 0x20, 0x8c, 0xc9, 0xa4, 0x06, 0x92, 0x5d, 0x99, 0x6c, 0x2b, 0x8a,
	0x10, 0xd2, 0xcd, 0x54, 0x16, 0x36, 0x33, 0xcb, 0xec, 0x2a, 0xe4, 0xe6, 0x47, 0xf0, 0x63, 0x78,
	0xf7, 0x4b, 0x78, 0xcc, 0xb1, 0x47, 0xb3, 0xb9, 0x78, 0xec, 0x47, 0x90, 0x99, 0xad, 0x45, 0x7a,
	0x7b, 0xbf, 0xff, 0x7b, 0x3c, 0xde, 0xe1, 0x0f, 0xdd, 0x44, 0xaf, 0xd7, 0x5a, 0x1d, 0xe5, 0x46,
	0x97, 0x9a, 0x78, 0x35, 0xf5, 0x7e, 0x62, 0x68, 0xb2, 0xd5, 0xca, 0xc8, 0xa2, 0x20, 0x3d, 0x78,
	0xb0, 0x74, 0x72, 0x91, 0xa5, 0x4a, 0x2e, 0x4e, 0x02, 0xfc, 0x1c, 0x1f, 0xb6, 0x45, 0xa7, 0x3e,
	0x4e, 0x53, 0x25, 0x4f, 0xee, 0x66, 0x06, 0x01, 0xdc, 0xcd, 0x0c, 0x08, 0x81, 0x46, 0x92, 0x96,
	0x9b, 0xe0, 0xb1, 0xb3, 0x9c, 0x26, 0xcf, 0xa0, 0x95, 0xeb, 0xa2, 0x4c, 0xf4, 0x4a, 0x06, 0xd4,
	0xdd, 0x6f, 0x99, 0x3c, 0x01, 0xcf, 0xc8, 0xcf, 0xa9, 0x56, 0xc1, 0xa1, 0x73, 0x6e, 0x88, 0x04,
	0xd0, 0x4c, 0xf4, 0x17, 0x55, 0x9a, 0x4d, 0x30, 0x70, 0xc6, 0x3f, 0xec, 0xbd, 0x86, 0xee, 0x38,
	0xcd, 0x64, 0x6c, 0x96, 0xaa, 0xb8, 0x94, 0xc6, 0xb6, 0x5f, 0xa6, 0x99, 0x54, 0xcb, 0xb5, 0xbc,
	0x19, 0x7d, 0xcb, 0x76, 0x8d, 0xd5, 0x6e, 0x68, 0x57, 0x38, 0xdd, 0x3f, 0x86, 0x0e, 0x4b, 0x5c,
	0x59, 0xbc, 0xc9, 0x25, 0x69, 0xc3, 0x7d, 0x36, 0x9a, 0x4d, 0x42, 0x1f, 0x11, 0x00, 0x8f, 0x9d,
	0xf2, 0x70, 0xf8, 0xc1, 0xc7, 0xf6, 0x3c, 0x9a, 0x9c, 0x73, 0xe1, 0x1f, 0xf4, 0x7b, 0x00, 0xa7,
	0x52, 0xad, 0xa4, 0x71, 0x79, 0x00, 0x6f, 0xcc, 0x67, 0x6c, 0xca, 0x7d, 0x44, 0x5a, 0xd0, 0x70,
	0x0a, 0xf7, 0x3f, 0x41, 0x7b, 0x2a, 0xbf, 0xca, 0xcc, 0x45, 0x1e, 0x02, 0x4c, 0xc2, 0x79, 0x2c,
	0xce, 0x86, 0x71, 0x24, 0xea, 0xde, 0x19, 0x9b, 0xc7, 0x5c, 0xf8, 0xd8, 0x6a, 0xc1, 0xe7, 0xc3,
	0x33, 0xee, 0x1f, 0x90, 0xa7, 0xf0, 0x88, 0x8d, 0xce, 0x59, 0x38, 0xe4, 0xa3, 0x45, 0xf4, 0x8e,
	0x87, 0x8b, 0xf7, 0xcc, 0x86, 0xee, 0xd9, 0x82, 0xff, 0xb8, 0xd1, 0x7f, 0x01, 0xad, 0xd8, 0xa4,
	0xb9, 0x2b, 0xef, 0x40, 0x33, 0x0a, 0xe7, 0x6f, 0x23, 0x61, 0x07, 0x74, 0xa1, 0x15, 0x8d, 0xc7,
	0x35, 0xe1, 0x37, 0xaf, 0xb6, 0x3b, 0x8a, 0xae, 0x76, 0x14, 0x5d, 0xef, 0x28, 0xfe, 0x56, 0x51,
	0xfc, 0xa3, 0xa2, 0xf8, 0x57, 0x45, 0xf1, 0xb6, 0xa2, 0xf8, 0x77, 0x45, 0xf1, 0x9f, 0x8a, 0xa2,
	0xeb, 0x8a, 0xe2, 0xef, 0x7b, 0x8a, 0xb6, 0x7b, 0x8a, 0xae, 0xf6, 0x14, 0x7d, 0x6c, 0x1c, 0x1d,
	0xe7, 0x17, 0x17, 0x9e, 0x7b, 0x8d, 0x97, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x46, 0x6f, 0x26,
	0x5e, 0x2a, 0x02, 0x00, 0x00,
}

func (x AccountType) String() string {
	s, ok := AccountType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x GenderType) String() string {
	s, ok := GenderType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x LevelType) String() string {
	s, ok := LevelType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TripType) String() string {
	s, ok := TripType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Address) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Address)
	if !ok {
		that2, ok := that.(Address)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AddresLine_1 != that1.AddresLine_1 {
		return false
	}
	if this.AddresLine_2 != that1.AddresLine_2 {
		return false
	}
	if this.City != that1.City {
		return false
	}
	if this.Postcode != that1.Postcode {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	return true
}
func (this *FileTransfer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FileTransfer)
	if !ok {
		that2, ok := that.(FileTransfer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Filename != that1.Filename {
		return false
	}
	if !bytes.Equal(this.File, that1.File) {
		return false
	}
	return true
}
func (this *Address) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.Address{")
	s = append(s, "AddresLine_1: "+fmt.Sprintf("%#v", this.AddresLine_1)+",\n")
	s = append(s, "AddresLine_2: "+fmt.Sprintf("%#v", this.AddresLine_2)+",\n")
	s = append(s, "City: "+fmt.Sprintf("%#v", this.City)+",\n")
	s = append(s, "Postcode: "+fmt.Sprintf("%#v", this.Postcode)+",\n")
	s = append(s, "Region: "+fmt.Sprintf("%#v", this.Region)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FileTransfer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.FileTransfer{")
	s = append(s, "Filename: "+fmt.Sprintf("%#v", this.Filename)+",\n")
	s = append(s, "File: "+fmt.Sprintf("%#v", this.File)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCommon(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Address) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Address) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Address) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x92
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Postcode) > 0 {
		i -= len(m.Postcode)
		copy(dAtA[i:], m.Postcode)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Postcode)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.AddresLine_2) > 0 {
		i -= len(m.AddresLine_2)
		copy(dAtA[i:], m.AddresLine_2)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.AddresLine_2)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.AddresLine_1) > 0 {
		i -= len(m.AddresLine_1)
		copy(dAtA[i:], m.AddresLine_1)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.AddresLine_1)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FileTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.File) > 0 {
		i -= len(m.File)
		copy(dAtA[i:], m.File)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.File)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Filename) > 0 {
		i -= len(m.Filename)
		copy(dAtA[i:], m.Filename)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Filename)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AddresLine_1)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.AddresLine_2)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 2 + l + sovCommon(uint64(l))
	}
	l = len(m.Postcode)
	if l > 0 {
		n += 2 + l + sovCommon(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 2 + l + sovCommon(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 2 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *FileTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func sovCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Address) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Address{`,
		`AddresLine_1:` + fmt.Sprintf("%v", this.AddresLine_1) + `,`,
		`AddresLine_2:` + fmt.Sprintf("%v", this.AddresLine_2) + `,`,
		`City:` + fmt.Sprintf("%v", this.City) + `,`,
		`Postcode:` + fmt.Sprintf("%v", this.Postcode) + `,`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FileTransfer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FileTransfer{`,
		`Filename:` + fmt.Sprintf("%v", this.Filename) + `,`,
		`File:` + fmt.Sprintf("%v", this.File) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCommon(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Address) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddresLine_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddresLine_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddresLine_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddresLine_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Postcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Postcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = append(m.File[:0], dAtA[iNdEx:postIndex]...)
			if m.File == nil {
				m.File = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommon = fmt.Errorf("proto: unexpected end of group")
)
