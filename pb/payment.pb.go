// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: payment.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MakePaymentRequest struct {
	Payment *Payment `protobuf:"bytes,1,opt,name=payment,proto3" json:"payment,omitempty"`
}

func (m *MakePaymentRequest) Reset()      { *m = MakePaymentRequest{} }
func (*MakePaymentRequest) ProtoMessage() {}
func (*MakePaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6362648dfa63d410, []int{0}
}
func (m *MakePaymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MakePaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MakePaymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MakePaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MakePaymentRequest.Merge(m, src)
}
func (m *MakePaymentRequest) XXX_Size() int {
	return m.Size()
}
func (m *MakePaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MakePaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MakePaymentRequest proto.InternalMessageInfo

func (m *MakePaymentRequest) GetPayment() *Payment {
	if m != nil {
		return m.Payment
	}
	return nil
}

type UpdatePaymentRequest struct {
	Payment *Payment `protobuf:"bytes,10,opt,name=payment,proto3" json:"payment,omitempty"`
}

func (m *UpdatePaymentRequest) Reset()      { *m = UpdatePaymentRequest{} }
func (*UpdatePaymentRequest) ProtoMessage() {}
func (*UpdatePaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6362648dfa63d410, []int{1}
}
func (m *UpdatePaymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePaymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePaymentRequest.Merge(m, src)
}
func (m *UpdatePaymentRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePaymentRequest proto.InternalMessageInfo

func (m *UpdatePaymentRequest) GetPayment() *Payment {
	if m != nil {
		return m.Payment
	}
	return nil
}

type UpdatePaymentStatusRequest struct {
	Payment *Payment `protobuf:"bytes,10,opt,name=payment,proto3" json:"payment,omitempty"`
}

func (m *UpdatePaymentStatusRequest) Reset()      { *m = UpdatePaymentStatusRequest{} }
func (*UpdatePaymentStatusRequest) ProtoMessage() {}
func (*UpdatePaymentStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6362648dfa63d410, []int{2}
}
func (m *UpdatePaymentStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePaymentStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePaymentStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePaymentStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePaymentStatusRequest.Merge(m, src)
}
func (m *UpdatePaymentStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePaymentStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePaymentStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePaymentStatusRequest proto.InternalMessageInfo

func (m *UpdatePaymentStatusRequest) GetPayment() *Payment {
	if m != nil {
		return m.Payment
	}
	return nil
}

type GetPaymentByReservationRequest struct {
	ReservationId uint64 `protobuf:"varint,20,opt,name=reservation_id,json=reservationId,proto3" json:"reservation_id,omitempty"`
}

func (m *GetPaymentByReservationRequest) Reset()      { *m = GetPaymentByReservationRequest{} }
func (*GetPaymentByReservationRequest) ProtoMessage() {}
func (*GetPaymentByReservationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6362648dfa63d410, []int{3}
}
func (m *GetPaymentByReservationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPaymentByReservationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPaymentByReservationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPaymentByReservationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPaymentByReservationRequest.Merge(m, src)
}
func (m *GetPaymentByReservationRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPaymentByReservationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPaymentByReservationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPaymentByReservationRequest proto.InternalMessageInfo

func (m *GetPaymentByReservationRequest) GetReservationId() uint64 {
	if m != nil {
		return m.ReservationId
	}
	return 0
}

type GetPaymentByReservationResponse struct {
	Payment *Payment `protobuf:"bytes,10,opt,name=payment,proto3" json:"payment,omitempty"`
}

func (m *GetPaymentByReservationResponse) Reset()      { *m = GetPaymentByReservationResponse{} }
func (*GetPaymentByReservationResponse) ProtoMessage() {}
func (*GetPaymentByReservationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6362648dfa63d410, []int{4}
}
func (m *GetPaymentByReservationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPaymentByReservationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPaymentByReservationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPaymentByReservationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPaymentByReservationResponse.Merge(m, src)
}
func (m *GetPaymentByReservationResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPaymentByReservationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPaymentByReservationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPaymentByReservationResponse proto.InternalMessageInfo

func (m *GetPaymentByReservationResponse) GetPayment() *Payment {
	if m != nil {
		return m.Payment
	}
	return nil
}

func init() {
	proto.RegisterType((*MakePaymentRequest)(nil), "payment.MakePaymentRequest")
	proto.RegisterType((*UpdatePaymentRequest)(nil), "payment.UpdatePaymentRequest")
	proto.RegisterType((*UpdatePaymentStatusRequest)(nil), "payment.UpdatePaymentStatusRequest")
	proto.RegisterType((*GetPaymentByReservationRequest)(nil), "payment.GetPaymentByReservationRequest")
	proto.RegisterType((*GetPaymentByReservationResponse)(nil), "payment.GetPaymentByReservationResponse")
}

func init() { proto.RegisterFile("payment.proto", fileDescriptor_6362648dfa63d410) }

var fileDescriptor_6362648dfa63d410 = []byte{
	// 358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x41, 0x4b, 0x02, 0x51,
	0x10, 0xc7, 0xf7, 0x85, 0x14, 0x8c, 0x28, 0xf4, 0x92, 0x92, 0x95, 0x26, 0x31, 0xa2, 0x3d, 0xad,
	0x60, 0xb7, 0x0e, 0x11, 0x42, 0x49, 0x45, 0x10, 0x1b, 0x5d, 0xba, 0xc4, 0xda, 0xbe, 0x64, 0x69,
	0xf5, 0xbd, 0x76, 0x9f, 0x82, 0xb7, 0x3e, 0x42, 0x1f, 0xa3, 0x8f, 0xd2, 0xd1, 0xa3, 0xc7, 0x7c,
	0x5e, 0x3a, 0xfa, 0x11, 0x22, 0xd7, 0x67, 0x4a, 0xae, 0xd5, 0x71, 0xfe, 0x33, 0xf3, 0x63, 0x66,
	0xfe, 0x03, 0x19, 0xe1, 0x76, 0x9b, 0xac, 0x25, 0x6d, 0x11, 0x72, 0xc9, 0xe9, 0xda, 0x24, 0x34,
	0xd3, 0x4d, 0xee, 0xb1, 0x20, 0x56, 0xcd, 0x42, 0x83, 0xf3, 0x46, 0xc0, 0xca, 0xe3, 0xa8, 0xde,
	0x7e, 0x28, 0xb3, 0xa6, 0x90, 0xdd, 0x38, 0x59, 0x3a, 0x02, 0x7a, 0xe9, 0x3e, 0xb2, 0xab, 0xb8,
	0xd1, 0x61, 0x4f, 0x6d, 0x16, 0x49, 0x6a, 0x81, 0x46, 0xe5, 0x49, 0x91, 0x58, 0xe9, 0x4a, 0xd6,
	0x8e, 0x89, 0xba, 0x4e, 0xa7, 0x4b, 0xc7, 0x90, 0xbb, 0x11, 0x9e, 0x2b, 0x97, 0x10, 0x60, 0x39,
	0xe1, 0x14, 0xcc, 0x39, 0xc2, 0xb5, 0x74, 0x65, 0x3b, 0xfa, 0x3f, 0xa7, 0x06, 0x58, 0x63, 0x72,
	0x22, 0x57, 0xbb, 0x0e, 0x8b, 0x58, 0xd8, 0x71, 0xa5, 0xcf, 0x5b, 0x9a, 0xb5, 0x07, 0xd9, 0xf0,
	0x5b, 0xbd, 0xf3, 0xbd, 0x7c, 0xae, 0x48, 0xac, 0x94, 0x93, 0x99, 0x51, 0xcf, 0xbc, 0xd2, 0x05,
	0xec, 0x24, 0x82, 0x22, 0xc1, 0x5b, 0x11, 0xfb, 0xfb, 0x54, 0x15, 0xb5, 0x02, 0x59, 0xbd, 0x18,
	0x0b, 0x3b, 0xfe, 0x3d, 0xa3, 0x55, 0x48, 0xcf, 0x9c, 0x9c, 0x16, 0x6c, 0x6d, 0xe2, 0x4f, 0x23,
	0xcc, 0x4d, 0x3b, 0x36, 0xcf, 0xd6, 0xe6, 0xd9, 0x27, 0x5f, 0xe6, 0xd1, 0x00, 0xb6, 0x12, 0x66,
	0xa4, 0xfb, 0x53, 0xde, 0xf2, 0x73, 0x98, 0xd6, 0xef, 0x85, 0x93, 0x75, 0xcf, 0x61, 0x7d, 0xde,
	0xa2, 0xc0, 0x17, 0x74, 0x7b, 0xda, 0xbe, 0xe8, 0x01, 0x12, 0x27, 0x77, 0x60, 0x63, 0x81, 0xdd,
	0x74, 0x77, 0x31, 0x6d, 0xee, 0x19, 0x92, 0x98, 0xd5, 0xc3, 0xde, 0x00, 0x8d, 0xfe, 0x00, 0x8d,
	0xd1, 0x00, 0xc9, 0xb3, 0x42, 0xf2, 0xaa, 0x90, 0xbc, 0x29, 0x24, 0x3d, 0x85, 0xe4, 0x5d, 0x21,
	0xf9, 0x50, 0x68, 0x8c, 0x14, 0x92, 0x97, 0x21, 0x1a, 0xbd, 0x21, 0x1a, 0xfd, 0x21, 0x1a, 0xb7,
	0x29, 0xbb, 0x2c, 0xea, 0xf5, 0xd5, 0x31, 0xeb, 0xe0, 0x33, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x9f,
	0x47, 0x2b, 0x4b, 0x03, 0x00, 0x00,
}

func (this *MakePaymentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MakePaymentRequest)
	if !ok {
		that2, ok := that.(MakePaymentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Payment.Equal(that1.Payment) {
		return false
	}
	return true
}
func (this *UpdatePaymentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdatePaymentRequest)
	if !ok {
		that2, ok := that.(UpdatePaymentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Payment.Equal(that1.Payment) {
		return false
	}
	return true
}
func (this *UpdatePaymentStatusRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdatePaymentStatusRequest)
	if !ok {
		that2, ok := that.(UpdatePaymentStatusRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Payment.Equal(that1.Payment) {
		return false
	}
	return true
}
func (this *GetPaymentByReservationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetPaymentByReservationRequest)
	if !ok {
		that2, ok := that.(GetPaymentByReservationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ReservationId != that1.ReservationId {
		return false
	}
	return true
}
func (this *GetPaymentByReservationResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetPaymentByReservationResponse)
	if !ok {
		that2, ok := that.(GetPaymentByReservationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Payment.Equal(that1.Payment) {
		return false
	}
	return true
}
func (this *MakePaymentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.MakePaymentRequest{")
	if this.Payment != nil {
		s = append(s, "Payment: "+fmt.Sprintf("%#v", this.Payment)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdatePaymentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpdatePaymentRequest{")
	if this.Payment != nil {
		s = append(s, "Payment: "+fmt.Sprintf("%#v", this.Payment)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdatePaymentStatusRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpdatePaymentStatusRequest{")
	if this.Payment != nil {
		s = append(s, "Payment: "+fmt.Sprintf("%#v", this.Payment)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetPaymentByReservationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetPaymentByReservationRequest{")
	s = append(s, "ReservationId: "+fmt.Sprintf("%#v", this.ReservationId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetPaymentByReservationResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetPaymentByReservationResponse{")
	if this.Payment != nil {
		s = append(s, "Payment: "+fmt.Sprintf("%#v", this.Payment)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPayment(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PaymentServiceClient interface {
	MakePayment(ctx context.Context, in *MakePaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPaymentByReservation(ctx context.Context, in *GetPaymentByReservationRequest, opts ...grpc.CallOption) (*GetPaymentByReservationResponse, error)
	UpdatePaymentSlip(ctx context.Context, in *UpdatePaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdatePaymentStatus(ctx context.Context, in *UpdatePaymentStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type paymentServiceClient struct {
	cc *grpc.ClientConn
}

func NewPaymentServiceClient(cc *grpc.ClientConn) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) MakePayment(ctx context.Context, in *MakePaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/MakePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetPaymentByReservation(ctx context.Context, in *GetPaymentByReservationRequest, opts ...grpc.CallOption) (*GetPaymentByReservationResponse, error) {
	out := new(GetPaymentByReservationResponse)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/GetPaymentByReservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) UpdatePaymentSlip(ctx context.Context, in *UpdatePaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/UpdatePaymentSlip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) UpdatePaymentStatus(ctx context.Context, in *UpdatePaymentStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/payment.PaymentService/UpdatePaymentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
type PaymentServiceServer interface {
	MakePayment(context.Context, *MakePaymentRequest) (*emptypb.Empty, error)
	GetPaymentByReservation(context.Context, *GetPaymentByReservationRequest) (*GetPaymentByReservationResponse, error)
	UpdatePaymentSlip(context.Context, *UpdatePaymentRequest) (*emptypb.Empty, error)
	UpdatePaymentStatus(context.Context, *UpdatePaymentStatusRequest) (*emptypb.Empty, error)
}

// UnimplementedPaymentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPaymentServiceServer struct {
}

func (*UnimplementedPaymentServiceServer) MakePayment(ctx context.Context, req *MakePaymentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakePayment not implemented")
}
func (*UnimplementedPaymentServiceServer) GetPaymentByReservation(ctx context.Context, req *GetPaymentByReservationRequest) (*GetPaymentByReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentByReservation not implemented")
}
func (*UnimplementedPaymentServiceServer) UpdatePaymentSlip(ctx context.Context, req *UpdatePaymentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentSlip not implemented")
}
func (*UnimplementedPaymentServiceServer) UpdatePaymentStatus(ctx context.Context, req *UpdatePaymentStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentStatus not implemented")
}

func RegisterPaymentServiceServer(s *grpc.Server, srv PaymentServiceServer) {
	s.RegisterService(&_PaymentService_serviceDesc, srv)
}

func _PaymentService_MakePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).MakePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/MakePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).MakePayment(ctx, req.(*MakePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetPaymentByReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentByReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPaymentByReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/GetPaymentByReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPaymentByReservation(ctx, req.(*GetPaymentByReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_UpdatePaymentSlip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).UpdatePaymentSlip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/UpdatePaymentSlip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).UpdatePaymentSlip(ctx, req.(*UpdatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_UpdatePaymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).UpdatePaymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.PaymentService/UpdatePaymentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).UpdatePaymentStatus(ctx, req.(*UpdatePaymentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PaymentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "payment.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakePayment",
			Handler:    _PaymentService_MakePayment_Handler,
		},
		{
			MethodName: "GetPaymentByReservation",
			Handler:    _PaymentService_GetPaymentByReservation_Handler,
		},
		{
			MethodName: "UpdatePaymentSlip",
			Handler:    _PaymentService_UpdatePaymentSlip_Handler,
		},
		{
			MethodName: "UpdatePaymentStatus",
			Handler:    _PaymentService_UpdatePaymentStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment.proto",
}

func (m *MakePaymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MakePaymentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MakePaymentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payment != nil {
		{
			size, err := m.Payment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPayment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdatePaymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePaymentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatePaymentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payment != nil {
		{
			size, err := m.Payment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPayment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}

func (m *UpdatePaymentStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePaymentStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatePaymentStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payment != nil {
		{
			size, err := m.Payment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPayment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}

func (m *GetPaymentByReservationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPaymentByReservationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPaymentByReservationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReservationId != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.ReservationId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	return len(dAtA) - i, nil
}

func (m *GetPaymentByReservationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPaymentByReservationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPaymentByReservationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payment != nil {
		{
			size, err := m.Payment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPayment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}

func encodeVarintPayment(dAtA []byte, offset int, v uint64) int {
	offset -= sovPayment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MakePaymentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payment != nil {
		l = m.Payment.Size()
		n += 1 + l + sovPayment(uint64(l))
	}
	return n
}

func (m *UpdatePaymentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payment != nil {
		l = m.Payment.Size()
		n += 1 + l + sovPayment(uint64(l))
	}
	return n
}

func (m *UpdatePaymentStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payment != nil {
		l = m.Payment.Size()
		n += 1 + l + sovPayment(uint64(l))
	}
	return n
}

func (m *GetPaymentByReservationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReservationId != 0 {
		n += 2 + sovPayment(uint64(m.ReservationId))
	}
	return n
}

func (m *GetPaymentByReservationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payment != nil {
		l = m.Payment.Size()
		n += 1 + l + sovPayment(uint64(l))
	}
	return n
}

func sovPayment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPayment(x uint64) (n int) {
	return sovPayment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MakePaymentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MakePaymentRequest{`,
		`Payment:` + strings.Replace(fmt.Sprintf("%v", this.Payment), "Payment", "Payment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdatePaymentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdatePaymentRequest{`,
		`Payment:` + strings.Replace(fmt.Sprintf("%v", this.Payment), "Payment", "Payment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdatePaymentStatusRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdatePaymentStatusRequest{`,
		`Payment:` + strings.Replace(fmt.Sprintf("%v", this.Payment), "Payment", "Payment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetPaymentByReservationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetPaymentByReservationRequest{`,
		`ReservationId:` + fmt.Sprintf("%v", this.ReservationId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetPaymentByReservationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetPaymentByReservationResponse{`,
		`Payment:` + strings.Replace(fmt.Sprintf("%v", this.Payment), "Payment", "Payment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPayment(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MakePaymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MakePaymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MakePaymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payment == nil {
				m.Payment = &Payment{}
			}
			if err := m.Payment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePaymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePaymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePaymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payment == nil {
				m.Payment = &Payment{}
			}
			if err := m.Payment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePaymentStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePaymentStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePaymentStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payment == nil {
				m.Payment = &Payment{}
			}
			if err := m.Payment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPaymentByReservationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPaymentByReservationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPaymentByReservationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservationId", wireType)
			}
			m.ReservationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReservationId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPaymentByReservationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPaymentByReservationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPaymentByReservationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payment == nil {
				m.Payment = &Payment{}
			}
			if err := m.Payment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPayment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPayment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPayment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPayment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPayment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPayment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPayment = fmt.Errorf("proto: unexpected end of group")
)
